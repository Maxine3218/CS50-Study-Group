1
00:00:50,490 --> 00:00:53,820
中文字幕
This is CS50 and this is lecture 6.

2
00:00:53,820 --> 00:00:56,490
中文字幕
And you'll recall that last week we introduced web programming

3
00:00:56,490 --> 00:00:58,870
中文字幕
by way of HTML and CSS, or at least the building blocks

4
00:00:58,870 --> 00:01:01,290
中文字幕
because we don't actually have the ability to program yet.

5
00:01:01,290 --> 00:01:04,900
中文字幕
It's just markup, HTML and CSS with stylization thereof.

6
00:01:04,900 --> 00:01:08,490
中文字幕
But we introduced this metaphor last week of a protocol called TCP/IP.

7
00:01:08,490 --> 00:01:10,780
中文字幕
And we related it to, of course, an envelope.

8
00:01:10,780 --> 00:01:12,750
中文字幕
And on this envelope, virtually, on the front

9
00:01:12,750 --> 00:01:14,790
中文字幕
was at least two pieces of information.

10
00:01:14,790 --> 00:01:17,040
中文字幕
And if anyone remembers what were those two

11
00:01:17,040 --> 00:01:19,500
中文字幕
pieces of information in the to field?

12
00:01:19,500 --> 00:01:22,010
中文字幕
Someone else who we didn't hear from recently?

13
00:01:22,010 --> 00:01:22,510
中文字幕
Yeah?

14
00:01:22,510 --> 00:01:23,400
中文字幕
An IP address.

15
00:01:23,400 --> 00:01:23,590
中文字幕
Yeah.

16
00:01:23,590 --> 00:01:26,730
中文字幕
An IP address, a numeric address that uniquely identifies your computer

17
00:01:26,730 --> 00:01:27,960
中文字幕
and someone else's computer.

18
00:01:27,960 --> 00:01:29,500
中文字幕
And one other thing, if you remember.

19
00:01:32,120 --> 00:01:32,620
中文字幕
Oh, come on.

20
00:01:32,620 --> 00:01:33,860
中文字幕
It was like two minutes ago.

21
00:01:33,860 --> 00:01:34,100
中文字幕
OK.

22
00:01:34,100 --> 00:01:34,530
中文字幕
Yeah.

23
00:01:34,530 --> 00:01:36,510
中文字幕
A port number.

24
00:01:36,510 --> 00:01:40,420
中文字幕
So another number, shorter number, that's just a number like 80 or 443

25
00:01:40,420 --> 00:01:44,090
中文字幕
referring to HTTP or HTTPS, or other numbers,

26
00:01:44,090 --> 00:01:45,890
中文字幕
like 25 for email and the like.

27
00:01:45,890 --> 00:01:49,090
中文字幕
And so together these unique addresses allow you to send information

28
00:01:49,090 --> 00:01:51,940
中文字幕
to not only a specific computer, but a specific service

29
00:01:51,940 --> 00:01:53,860
中文字幕
running on that computer.

30
00:01:53,860 --> 00:01:57,580
中文字幕
And in order to actually request information from that server,

31
00:01:57,580 --> 00:02:01,480
中文字幕
there's this other protocol called HTTP, Hypertext Transfer Protocol.

32
00:02:01,480 --> 00:02:03,600
中文字幕
This is what's inside of the envelope.

33
00:02:03,600 --> 00:02:06,130
中文字幕
So when the server opens it up, metaphorically,

34
00:02:06,130 --> 00:02:10,500
中文字幕
looks inside, this is the command that that server reads in order to decide

35
00:02:10,500 --> 00:02:12,180
中文字幕
what it should actually respond with.

36
00:02:12,180 --> 00:02:15,260
中文字幕
And so this request here is telling the server--

37
00:02:15,260 --> 00:02:19,330
中文字幕
otherwise known as www.example.com in this particular example--

38
00:02:19,330 --> 00:02:23,560
中文字幕
to send back what exactly in its own envelope to me

39
00:02:23,560 --> 00:02:27,990
中文字幕
and my laptop if I were to request this?

40
00:02:27,990 --> 00:02:31,020
中文字幕
A specific web page.

41
00:02:31,020 --> 00:02:33,450
中文字幕
And someone else, which web page specifically, presumably?

42
00:02:33,450 --> 00:02:34,120
中文字幕
Index.

43
00:02:34,120 --> 00:02:36,700
中文字幕
Yeah, so index.html, which we said last week

44
00:02:36,700 --> 00:02:40,600
中文字幕
just tends to be the default file name on a server for a web page

45
00:02:40,600 --> 00:02:43,560
中文字幕
that's just selected by default. And it doesn't have to be called this,

46
00:02:43,560 --> 00:02:44,820
中文字幕
but it's a human convention.

47
00:02:44,820 --> 00:02:48,070
中文字幕
And the rest of this is just a verb saying, literally, get me that file.

48
00:02:48,070 --> 00:02:50,400
中文字幕
This is just telling the server what version of HTTP

49
00:02:50,400 --> 00:02:54,600
中文字幕
I speak so that humans can improve it and upgrade it over time.

50
00:02:54,600 --> 00:02:57,660
中文字幕
But this would tell the server to return index.html.

51
00:02:57,660 --> 00:03:00,480
中文字幕
Meanwhile, we saw more sophisticated get queries

52
00:03:00,480 --> 00:03:03,960
中文字幕
when we started talking about Google, and any website that

53
00:03:03,960 --> 00:03:07,830
中文字幕
has not just a front end, like HTML and CSS, but also a back end.

54
00:03:07,830 --> 00:03:10,320
中文字幕
And a back end is where the logic is, where the server is,

55
00:03:10,320 --> 00:03:12,850
中文字幕
and the interesting work, ultimately.

56
00:03:12,850 --> 00:03:15,780
中文字幕
And so this slash search indicates some kind

57
00:03:15,780 --> 00:03:18,820
中文字幕
of software running on Google servers as of last week

58
00:03:18,820 --> 00:03:20,460
中文字幕
that's simply responds to requests.

59
00:03:20,460 --> 00:03:27,740
中文字幕
And what did question mark q equals cats do or represent in that demonstration?

60
00:03:27,740 --> 00:03:28,720
中文字幕
User input.

61
00:03:28,720 --> 00:03:29,780
中文字幕
Yeah, user input.

62
00:03:29,780 --> 00:03:32,790
中文字幕
So the question mark just says, that's it for the file name or the URL.

63
00:03:32,790 --> 00:03:34,500
中文字幕
Here comes the user's input.

64
00:03:34,500 --> 00:03:38,360
中文字幕
Q is just literally the HTTP parameter or input

65
00:03:38,360 --> 00:03:40,110
中文字幕
that Larry and Sergey, founders of Google,

66
00:03:40,110 --> 00:03:44,340
中文字幕
20 years ago decided would represent the user's input, q for query.

67
00:03:44,340 --> 00:03:47,230
中文字幕
Equal just means that query that the human typed in was cats.

68
00:03:47,230 --> 00:03:49,230
中文字幕
But the human doesn't even have to type this in.

69
00:03:49,230 --> 00:03:53,250
中文字幕
Once you understand HTTP, if you really wanted to be kind of a nerd,

70
00:03:53,250 --> 00:03:58,380
中文字幕
you could go to www.google.com/search?q=cats and it

71
00:03:58,380 --> 00:04:00,970
中文字幕
would induce the search for you because at the end of the day,

72
00:04:00,970 --> 00:04:02,720
中文字幕
that's all the browser is doing.

73
00:04:02,720 --> 00:04:05,640
中文字幕
When you have these web forms that you now have the ability to create,

74
00:04:05,640 --> 00:04:09,810
中文字幕
it's just automating the process of generating these HTTP messages.

75
00:04:09,810 --> 00:04:13,820
中文字幕
Now, the server hopefully responds with a message you never, ever actually see,

76
00:04:13,820 --> 00:04:17,010
中文字幕
HTTP 200, which literally means OK.

77
00:04:17,010 --> 00:04:22,200
中文字幕
Of course, many of us have seen numbers other than 200 appear, like what?

78
00:04:22,200 --> 00:04:24,450
中文字幕
404, which means?

79
00:04:24,450 --> 00:04:25,410
中文字幕
File not found.

80
00:04:25,410 --> 00:04:28,980
中文字幕
Now, why the humans decided years ago to tell

81
00:04:28,980 --> 00:04:31,440
中文字幕
other humans what that numeric code is, I mean,

82
00:04:31,440 --> 00:04:33,000
中文字幕
that is an uninteresting detail.

83
00:04:33,000 --> 00:04:36,660
中文字幕
But the world, for whatever reason, has revealed in many web sites 404.

84
00:04:36,660 --> 00:04:38,070
中文字幕
But it just means the same thing.

85
00:04:38,070 --> 00:04:39,450
中文字幕
Everything is not OK.

86
00:04:39,450 --> 00:04:40,610
中文字幕
A file was not found.

87
00:04:40,610 --> 00:04:42,240
中文字幕
You might see something else like this.

88
00:04:42,240 --> 00:04:44,730
中文字幕
We saw this with Harvard, in fact, curiously,

89
00:04:44,730 --> 00:04:46,780
中文字幕
that Harvard had moved permanently.

90
00:04:46,780 --> 00:04:51,780
中文字幕
Now, Harvard was responding to certain queries with HTTP 301s

91
00:04:51,780 --> 00:04:55,610
中文字幕
in order to achieve what feature or effect?

92
00:04:55,610 --> 00:04:56,110
中文字幕
Why?

93
00:04:56,110 --> 00:04:56,670
中文字幕
Yeah.

94
00:04:56,670 --> 00:04:58,400
中文字幕
Redirections.

95
00:04:58,400 --> 00:05:00,690
中文字幕
So this is kind of a low-level way of describing it.

96
00:05:00,690 --> 00:05:03,150
中文字幕
But 301, even though it says moved permanently,

97
00:05:03,150 --> 00:05:05,330
中文字幕
that's a more technical hint to the browser saying,

98
00:05:05,330 --> 00:05:08,420
中文字幕
Harvard moved not to whatever URL you just came from,

99
00:05:08,420 --> 00:05:10,440
中文字幕
but to this URL specifically.

100
00:05:10,440 --> 00:05:14,000
中文字幕
And now Harvard was probably, if you recall, redirecting me from what URL?

101
00:05:14,000 --> 00:05:19,010
中文字幕
If I wasn't already at that URL, where might I have been?

102
00:05:19,010 --> 00:05:22,450
中文字幕
Maybe dot com, if they actually own multiple domains and were redirecting.

103
00:05:22,450 --> 00:05:23,410
中文字幕
That could work.

104
00:05:23,410 --> 00:05:23,930
中文字幕
What else?

105
00:05:23,930 --> 00:05:25,070
中文字幕
Yeah.

106
00:05:25,070 --> 00:05:26,020
中文字幕
Just HTTP.

107
00:05:26,020 --> 00:05:26,770
中文字幕
Yeah.

108
00:05:26,770 --> 00:05:30,250
中文字幕
Maybe I just typed in HTTP, and Harvard, in the interest of security,

109
00:05:30,250 --> 00:05:36,610
中文字幕
wants to force my browser to request this page again via HTTPS.

110
00:05:36,610 --> 00:05:40,490
中文字幕
Sometimes a website might prepend the www if you haven't typed it in,

111
00:05:40,490 --> 00:05:42,640
中文字幕
or you can be redirected most anywhere.

112
00:05:42,640 --> 00:05:47,020
中文字幕
In fact, if you go to CS50's own website by just typing CS50.harvard.edu,

113
00:05:47,020 --> 00:05:47,890
中文字幕
watch the URL.

114
00:05:47,890 --> 00:05:51,990
中文字幕
You'll be redirected to a more specific page, depending on the time of year.

115
00:05:51,990 --> 00:05:53,800
中文字幕
So we use these tricks, as well.

116
00:05:53,800 --> 00:05:56,720
中文字幕
404 not found might look like this, but inside deeper

117
00:05:56,720 --> 00:06:00,630
中文字幕
of that metaphorical envelope is the actual contents of the web page.

118
00:06:00,630 --> 00:06:03,190
中文字幕
So you get back not only these HTTP headers,

119
00:06:03,190 --> 00:06:06,160
中文字幕
as they're called, in the top of the response, so to speak,

120
00:06:06,160 --> 00:06:10,750
中文字幕
but you also get back HTML, yet another language we looked at,

121
00:06:10,750 --> 00:06:13,480
中文字幕
this one actually a language, but not a programming language.

122
00:06:13,480 --> 00:06:17,440
中文字幕
These tags tell the browser exactly what to do and to render.

123
00:06:17,440 --> 00:06:19,480
中文字幕
We introduced this style tag, though.

124
00:06:19,480 --> 00:06:22,180
中文字幕
What did that allow us to do that HTML alone did not?

125
00:06:27,770 --> 00:06:29,030
中文字幕
Yeah.

126
00:06:29,030 --> 00:06:31,620
中文字幕
Use CSS to beautify the site and just make it nicer.

127
00:06:31,620 --> 00:06:34,040
中文字幕
HTML, for the most part, is about structure

128
00:06:34,040 --> 00:06:37,400
中文字幕
and about tagging the contents of your web page in a way

129
00:06:37,400 --> 00:06:38,930
中文字幕
that the browser finds helpful.

130
00:06:38,930 --> 00:06:41,810
中文字幕
But CSS is really for the user's benefit, at the end of the day,

131
00:06:41,810 --> 00:06:43,640
中文字幕
and his or her eyes, because it really lets

132
00:06:43,640 --> 00:06:46,110
中文字幕
you control font size and positioning and lower-level stuff

133
00:06:46,110 --> 00:06:49,280
中文字幕
that you might have started tinkering with with the most recent problem set.

134
00:06:49,280 --> 00:06:51,590
中文字幕
Now, we'd proposed that you probably shouldn't just

135
00:06:51,590 --> 00:06:54,960
中文字幕
start typing CSS inside of your HTML page

136
00:06:54,960 --> 00:06:57,710
中文字幕
because it's just a little harder to maintain as your examples get

137
00:06:57,710 --> 00:06:58,730
中文字幕
more sophisticated.

138
00:06:58,730 --> 00:06:59,990
中文字幕
So you might factor it out.

139
00:06:59,990 --> 00:07:01,690
中文字幕
And odds are you did this for the problem

140
00:07:01,690 --> 00:07:04,430
中文字幕
set because when making a home page, if you have the same CSS

141
00:07:04,430 --> 00:07:08,450
中文字幕
styles across multiple files, it would be pretty silly and inefficient to copy

142
00:07:08,450 --> 00:07:11,730
中文字幕
and paste them again and again when you can factor them out like this.

143
00:07:11,730 --> 00:07:14,090
中文字幕
Lastly, we looked at JavaScript, last time,

144
00:07:14,090 --> 00:07:16,460
中文字幕
another programming language that's super similar

145
00:07:16,460 --> 00:07:18,250
中文字幕
to see, at least at first glance.

146
00:07:18,250 --> 00:07:20,420
中文字幕
But it actually gets rid of a lot of the lower level

147
00:07:20,420 --> 00:07:22,990
中文字幕
headaches like pointers and memory addresses and that

148
00:07:22,990 --> 00:07:24,740
中文字幕
that we've struggled with in recent weeks.

149
00:07:24,740 --> 00:07:27,230
中文字幕
But most important was how we used it.

150
00:07:27,230 --> 00:07:31,460
中文字幕
So you can consider a web page like this as once it's loaded by your browser

151
00:07:31,460 --> 00:07:32,880
中文字幕
as just being a tree structure.

152
00:07:32,880 --> 00:07:35,720
中文字幕
Thinking back a couple of weeks to our discussion of data structures

153
00:07:35,720 --> 00:07:40,580
中文字幕
and each of these nodes in the tree we saw in JavaScript can be manipulated.

154
00:07:40,580 --> 00:07:43,040
中文字幕
And via that very simple principle, writing

155
00:07:43,040 --> 00:07:47,990
中文字幕
code that modifies this existing tree in the browser's memory,

156
00:07:47,990 --> 00:07:51,380
中文字幕
means you can make much more dynamic things like Gmail and Facebook

157
00:07:51,380 --> 00:07:53,880
中文字幕
and any number of websites that are constantly changing.

158
00:07:53,880 --> 00:07:55,750
中文字幕
You did not do this yet for the problems set.

159
00:07:55,750 --> 00:07:59,330
中文字幕
You made static web pages just by hard coding HTML and CSS.

160
00:07:59,330 --> 00:08:02,420
中文字幕
But starting next week, once we have, thanks to this week, the vocabulary

161
00:08:02,420 --> 00:08:04,910
中文字幕
of Python will you start to make things more dynamic

162
00:08:04,910 --> 00:08:07,670
中文字幕
and then even bring back into play JavaScript,

163
00:08:07,670 --> 00:08:11,150
中文字幕
bringing all of these various threads together.

164
00:08:11,150 --> 00:08:14,360
中文字幕
And to include the JavaScript, recall, we used either a script tag at the top

165
00:08:14,360 --> 00:08:16,010
中文字幕
or refactored it out to a file.

166
00:08:16,010 --> 00:08:18,620
中文字幕
Or in some cases, it's necessary or beneficial

167
00:08:18,620 --> 00:08:22,550
中文字幕
to move it down to the bottom of the file or factor it out like that,

168
00:08:22,550 --> 00:08:24,680
中文字幕
but more on that down the road.

169
00:08:24,680 --> 00:08:32,600
中文字幕
So any questions on last week or on HTTP, HTML, CSS, or TCP/IP?

170
00:08:32,600 --> 00:08:33,330
中文字幕
No?

171
00:08:33,330 --> 00:08:35,530
中文字幕
Anything at all?

172
00:08:35,530 --> 00:08:36,140
中文字幕
Oh, yeah?

173
00:08:36,140 --> 00:08:38,220
中文字幕
So in what case would you put the script

174
00:08:38,220 --> 00:08:41,220
中文字幕
tag up at the top 

175
00:08:41,220 --> 00:08:42,350
中文字幕
Good question.

176
00:08:42,350 --> 00:08:44,800
中文字幕
So in what cases would you put the script tag up at the top

177
00:08:44,800 --> 00:08:45,970
中文字幕
versus at the bottom?

178
00:08:45,970 --> 00:08:49,090
中文字幕
If the code you're writing in JavaScript manipulates

179
00:08:49,090 --> 00:08:52,510
中文字幕
the DOM, the tree that I had on the screen just a moment ago,

180
00:08:52,510 --> 00:08:56,860
中文字幕
the catch is that that tree needs to exist when your code is executed.

181
00:08:56,860 --> 00:09:01,330
中文字幕
So if you, for instance, have JavaScript code up here in the head of your page,

182
00:09:01,330 --> 00:09:04,570
中文字幕
but the nodes in the tree, the tags that you

183
00:09:04,570 --> 00:09:07,360
中文字幕
want to manipulate in changing things to red to green to blue

184
00:09:07,360 --> 00:09:11,020
中文字幕
like we did last week, or making things blank, are down here in the page,

185
00:09:11,020 --> 00:09:14,590
中文字幕
you can't write your code up here and have it change things in the page

186
00:09:14,590 --> 00:09:16,780
中文字幕
down here because it's happening out of order.

187
00:09:16,780 --> 00:09:20,110
中文字幕
So similar in spirit to C where things have to happen in the right order,

188
00:09:20,110 --> 00:09:22,120
中文字幕
if you want to change something down here,

189
00:09:22,120 --> 00:09:25,480
中文字幕
your code needs to at least be down here,

190
00:09:25,480 --> 00:09:28,430
中文字幕
or you need to use some fancier techniques to say,

191
00:09:28,430 --> 00:09:31,120
中文字幕
I'm going to write my code up here but wait a few seconds

192
00:09:31,120 --> 00:09:34,120
中文字幕
before executing it until the whole webpage is loaded.

193
00:09:34,120 --> 00:09:36,790
中文字幕
So for most of the examples we looked at, this was not an issue.

194
00:09:36,790 --> 00:09:39,460
中文字幕
But we'll come back to this perhaps before long.

195
00:09:39,460 --> 00:09:42,100
中文字幕
All right, so let's now take the same approach

196
00:09:42,100 --> 00:09:45,410
中文字幕
that we did last time of introducing one language by way of another.

197
00:09:45,410 --> 00:09:48,460
中文字幕
You'll recall, of course, that we started the whole semester with Scratch

198
00:09:48,460 --> 00:09:51,010
中文字幕
and then we transitioned a few weeks back now to C. Last week

199
00:09:51,010 --> 00:09:52,780
中文字幕
we made some comparisons with JavaScript.

200
00:09:52,780 --> 00:09:54,820
中文字幕
Let's do the same thing briefly with Python

201
00:09:54,820 --> 00:09:57,790
中文字幕
but then spend more time at the keyboard comparing the two to see

202
00:09:57,790 --> 00:10:00,430
中文字幕
what actually is different about these.

203
00:10:00,430 --> 00:10:02,350
中文字幕
So why in another language, though, first?

204
00:10:02,350 --> 00:10:07,900
中文字幕
We have Scratch, C, JavaScript, Python, not to mention HTML and CSS

205
00:10:07,900 --> 00:10:09,010
中文字幕
for different purposes.

206
00:10:09,010 --> 00:10:11,890
中文字幕
Like, why do we have all of these darn languages already?

207
00:10:11,890 --> 00:10:16,030
中文字幕
Why didn't humans just decide, that's it, we're all using Scratch?

208
00:10:16,030 --> 00:10:19,720
中文字幕
We're all using C or JavaScript or Python?

209
00:10:19,720 --> 00:10:23,930
中文字幕
What's, perhaps, the intuition behind that?

210
00:10:23,930 --> 00:10:27,450
中文字幕
Why are there so many damn languages, not to mention in this one course?

211
00:10:27,450 --> 00:10:28,120
中文字幕
Yeah?

212
00:10:29,920 --> 00:10:31,050
中文字幕
Say once more?

213
00:10:31,050 --> 00:10:32,770
中文字幕
Different ones are good for different things.

214
00:10:32,770 --> 00:10:34,540
中文字幕
Yeah, different ones are good for different things.

215
00:10:34,540 --> 00:10:36,850
中文字幕
And this probably goes without saying for something like Scratch, right?

216
00:10:36,850 --> 00:10:37,570
中文字幕
It's so visual.

217
00:10:37,570 --> 00:10:39,340
中文字幕
It's so graphical and animated.

218
00:10:39,340 --> 00:10:41,120
中文字幕
It makes sense that the puzzle pieces--

219
00:10:41,120 --> 00:10:43,330
中文字幕
or that the language itself is based on puzzle pieces

220
00:10:43,330 --> 00:10:44,720
中文字幕
and dragging and dropping.

221
00:10:44,720 --> 00:10:47,410
中文字幕
So maybe languages are tailored to certain applications.

222
00:10:47,410 --> 00:10:51,550
中文字幕
But is that true for C, Python, and JavaScript, which

223
00:10:51,550 --> 00:10:54,490
中文字幕
are all text-based languages we'll see?

224
00:10:54,490 --> 00:10:57,310
中文字幕
 for example, they're

225
00:10:57,310 --> 00:10:58,730
中文字幕
different levels of abstraction.

226
00:10:58,730 --> 00:10:59,390
中文字幕
OK.

227
00:10:59,390 --> 00:11:01,000
中文字幕
Different levels of abstraction.

228
00:11:01,000 --> 00:11:06,470
中文字幕
C is very  actually dealing with a lot of things that you

229
00:11:06,470 --> 00:11:08,960
中文字幕
don't have to think about in Python--

230
00:11:08,960 --> 00:11:10,160
中文字幕
Good.

231
00:11:10,160 --> 00:11:14,150
中文字幕
--where these sort of things are taken care of for you,

232
00:11:14,150 --> 00:11:18,130
中文字幕
such as memory allocations and so on.

233
00:11:18,130 --> 00:11:22,510
中文字幕
And so depending on what level of abstraction you want to work on

234
00:11:22,510 --> 00:11:24,550
中文字幕
and what parts you want to manipulate.

235
00:11:24,550 --> 00:11:25,470
中文字幕
OK, good.

236
00:11:25,470 --> 00:11:27,460
中文字幕
Bringing it back to abstraction does make sense.

237
00:11:27,460 --> 00:11:31,470
中文字幕
C is, indeed, very low level, literally having the ability to manipulate memory

238
00:11:31,470 --> 00:11:32,860
中文字幕
and via pointers and so forth.

239
00:11:32,860 --> 00:11:35,460
中文字幕
And that's great because you can do anything you want with the computer.

240
00:11:35,460 --> 00:11:37,290
中文字幕
But it comes at great risk and great cost.

241
00:11:37,290 --> 00:11:39,060
中文字幕
One, the cost is human time.

242
00:11:39,060 --> 00:11:41,940
中文字幕
It's just painful to write that kind of code sometimes.

243
00:11:41,940 --> 00:11:48,210
中文字幕
Two, it's also very risky because if you make a mistake, even a simple mistake,

244
00:11:48,210 --> 00:11:49,680
中文字幕
the whole computer can crash.

245
00:11:49,680 --> 00:11:51,470
中文字幕
And we didn't see examples of this, but you

246
00:11:51,470 --> 00:11:53,340
中文字幕
can make your code vulnerable to a hacker

247
00:11:53,340 --> 00:11:56,270
中文字幕
if he or she is able to somehow exploit a memory-related bug

248
00:11:56,270 --> 00:11:59,190
中文字幕
and read all of the passwords in your program, or something like that.

249
00:11:59,190 --> 00:12:01,500
中文字幕
So with great power comes great responsibility

250
00:12:01,500 --> 00:12:03,630
中文字幕
is kind of the mantra of C down here.

251
00:12:03,630 --> 00:12:07,140
中文字幕
But JavaScript we saw allows us to do things a little more high-level.

252
00:12:07,140 --> 00:12:08,100
中文字幕
There were no pointers.

253
00:12:08,100 --> 00:12:08,910
中文字幕
There was no memory.

254
00:12:08,910 --> 00:12:10,650
中文字幕
We didn't talk about things at that level.

255
00:12:10,650 --> 00:12:12,560
中文字幕
We talked about things at the level of a tree,

256
00:12:12,560 --> 00:12:16,900
中文字幕
a DOM in memory and changing colors and positioning of things on the screen.

257
00:12:16,900 --> 00:12:18,360
中文字幕
And that's, indeed, a higher level.

258
00:12:18,360 --> 00:12:21,990
中文字幕
Now, Python is not necessarily even web-centric.

259
00:12:21,990 --> 00:12:23,580
中文字幕
It's more of a multi-purpose language.

260
00:12:23,580 --> 00:12:26,310
中文字幕
People use Python to write command-line programs,

261
00:12:26,310 --> 00:12:29,480
中文字幕
like we will soon, at the keyboard, like we've been doing with C.

262
00:12:29,480 --> 00:12:31,230
中文字幕
You can also, though, use it, as we'll see

263
00:12:31,230 --> 00:12:33,400
中文字幕
next week, to generate other languages.

264
00:12:33,400 --> 00:12:35,820
中文字幕
So next week we will write code in Python,

265
00:12:35,820 --> 00:12:39,990
中文字幕
the language we're about to see, to generate another language, HTML

266
00:12:39,990 --> 00:12:40,630
中文字幕
and CSS.

267
00:12:40,630 --> 00:12:44,430
中文字幕
Some of you probably noticed in your homepages that you had some redundancy.

268
00:12:44,430 --> 00:12:46,770
中文字幕
You probably had similar tags or similar structure,

269
00:12:46,770 --> 00:12:48,690
中文字幕
maybe a similar menu across pages.

270
00:12:48,690 --> 00:12:51,120
中文字幕
Python and other languages will let us factor that

271
00:12:51,120 --> 00:12:53,760
中文字幕
out and generate those commonalities a lot more

272
00:12:53,760 --> 00:12:55,440
中文字幕
easily, among many other things.

273
00:12:55,440 --> 00:12:58,560
中文字幕
And it's also arguably easier and faster to write

274
00:12:58,560 --> 00:13:02,050
中文字幕
because it comes with so many more features, as we will soon see.

275
00:13:02,050 --> 00:13:03,180
中文字幕
So in fact-- you know what?

276
00:13:03,180 --> 00:13:03,940
中文字幕
Let me do this.

277
00:13:03,940 --> 00:13:07,570
中文字幕
Let me go ahead and open up CS50 IDE.

278
00:13:07,570 --> 00:13:09,390
中文字幕
Let me go ahead and create a new file.

279
00:13:09,390 --> 00:13:11,330
中文字幕
And out of curiosity, of our recent problem

280
00:13:11,330 --> 00:13:16,480
中文字幕
sets, what was maybe among the most challenging programs you've written?

281
00:13:16,480 --> 00:13:17,190
中文字幕
Crack.

282
00:13:17,190 --> 00:13:18,780
中文字幕
OK, crack was a good one.

283
00:13:18,780 --> 00:13:19,680
中文字幕
What else?

284
00:13:19,680 --> 00:13:20,460
中文字幕
Resize.

285
00:13:20,460 --> 00:13:21,570
中文字幕
Resize, recover.

286
00:13:21,570 --> 00:13:22,980
中文字幕
Yeah, definitely the forensics ones.

287
00:13:22,980 --> 00:13:24,980
中文字幕
And more people probably did recover and resize.

288
00:13:24,980 --> 00:13:26,640
中文字幕
So let's take resize, for example.

289
00:13:26,640 --> 00:13:30,750
中文字幕
So let me go ahead and write a program in a file called resize.py for Python,

290
00:13:30,750 --> 00:13:35,790
中文字幕
instead of .c, and see if we can't spend, what, few hours, couple days,

291
00:13:35,790 --> 00:13:38,220
中文字幕
as you probably did in C, implementing resize.

292
00:13:38,220 --> 00:13:40,270
中文字幕
Well, let me go ahead and do this.

293
00:13:40,270 --> 00:13:42,360
中文字幕
I'm going to go ahead and--

294
00:13:42,360 --> 00:13:42,960
中文字幕
let's see.

295
00:13:42,960 --> 00:13:46,570
中文字幕
First I'm going to import some features that just come with Python.

296
00:13:46,570 --> 00:13:50,910
中文字幕
And I'm going to go ahead and say from sys import argv.

297
00:13:50,910 --> 00:13:54,730
中文字幕
And I'm going to go ahead and also do from pil import image.

298
00:13:54,730 --> 00:13:55,980
中文字幕
Don't know yet what these are.

299
00:13:55,980 --> 00:13:57,450
中文字幕
We'll tease this apart in a moment.

300
00:13:57,450 --> 00:13:58,780
中文字幕
But then let me just do a check.

301
00:13:58,780 --> 00:14:00,270
中文字幕
If the length of--

302
00:14:00,270 --> 00:14:04,770
中文字幕
rather, if the length of argv does not equal 4,

303
00:14:04,770 --> 00:14:08,190
中文字幕
I'm going to go ahead and exit for the user and say the usage of this program

304
00:14:08,190 --> 00:14:12,840
中文字幕
is Python resize.py and in file, out file.

305
00:14:12,840 --> 00:14:15,440
中文字幕
So even though some of this should look cryptic at the moment,

306
00:14:15,440 --> 00:14:18,110
中文字幕
there's some commonalities-- argv, you recall, from C,

307
00:14:18,110 --> 00:14:21,450
中文字幕
and this usage string that we printed out whenever anything went wrong.

308
00:14:21,450 --> 00:14:23,640
中文字幕
That looks very similar in spirit to C.

309
00:14:23,640 --> 00:14:25,110
中文字幕
And what did we do in resize?

310
00:14:25,110 --> 00:14:27,570
中文字幕
If you implemented resize, like the less comfy version,

311
00:14:27,570 --> 00:14:31,590
中文字幕
to increase the size of things, you probably declared a variable like an

312
00:14:31,590 --> 00:14:33,240
中文字幕
and got sys--

313
00:14:33,240 --> 00:14:36,940
中文字幕
or rather, argv bracket one to get access to it.

314
00:14:36,940 --> 00:14:39,580
中文字幕
I'm going to go ahead and convert that or cast that to an int.

315
00:14:39,580 --> 00:14:43,660
中文字幕
You probably had an infile variable that gave you access to argv two.

316
00:14:43,660 --> 00:14:46,710
中文字幕
You probably had an out file variable that gave you access to argv three,

317
00:14:46,710 --> 00:14:47,820
中文字幕
and so forth.

318
00:14:47,820 --> 00:14:49,740
中文字幕
And it turns out in Python, you know what?

319
00:14:49,740 --> 00:14:53,280
中文字幕
I can actually use a library, code that other people have written.

320
00:14:53,280 --> 00:14:56,580
中文字幕
Let me come up with a variable called in image, like infile.

321
00:14:56,580 --> 00:14:58,290
中文字幕
This is my input image.

322
00:14:58,290 --> 00:15:01,200
中文字幕
And that's going to equal image.open because I

323
00:15:01,200 --> 00:15:03,040
中文字幕
want to open this thing called infile.

324
00:15:03,040 --> 00:15:04,650
中文字幕
And then the width--

325
00:15:04,650 --> 00:15:07,230
中文字幕
let me get the width and the height of the existing image

326
00:15:07,230 --> 00:15:09,840
中文字幕
by doing input image.size.

327
00:15:09,840 --> 00:15:12,960
中文字幕
And then let me go ahead and make a new image-- out image, I'll call it--

328
00:15:12,960 --> 00:15:17,520
中文字幕
which is going to equal the input image calling a resize function

329
00:15:17,520 --> 00:15:22,210
中文字幕
and doing the width times n, which is the number the human probably typed in,

330
00:15:22,210 --> 00:15:26,220
中文字幕
and height times n, which is the number the human typed in.

331
00:15:26,220 --> 00:15:29,970
中文字幕
Then let me go ahead and just save the outfile as follows.

332
00:15:29,970 --> 00:15:32,520
中文字幕
Outfile, OK.

333
00:15:32,520 --> 00:15:33,840
中文字幕
Done.

334
00:15:33,840 --> 00:15:37,460
中文字幕
Problem set three.

335
00:15:37,460 --> 00:15:39,660
中文字幕
Tada.

336
00:15:39,660 --> 00:15:43,280
中文字幕
OK, either really exciting or really, really disheartening perhaps.

337
00:15:43,280 --> 00:15:45,630
中文字幕
So with the right language, as you say, can you

338
00:15:45,630 --> 00:15:48,660
中文字幕
solve problems so much more easily.

339
00:15:48,660 --> 00:15:51,210
中文字幕
Now, I'm being a little disingenuous because I'm also

340
00:15:51,210 --> 00:15:52,680
中文字幕
leveraging what's called a library.

341
00:15:52,680 --> 00:15:54,800
中文字幕
And we had access to these in C. And undoubtedly

342
00:15:54,800 --> 00:15:56,850
中文字幕
we could have dug a little deeper on the internet

343
00:15:56,850 --> 00:16:02,010
中文字幕
into other people's available code and found maybe a library for bitmap files.

344
00:16:02,010 --> 00:16:05,840
中文字幕
But notice that there is no dealing with padding now.

345
00:16:05,840 --> 00:16:07,330
中文字幕
There's no dealing with arrays.

346
00:16:07,330 --> 00:16:11,560
中文字幕
There's no dealing with memory because I'm using the right tool for the job.

347
00:16:11,560 --> 00:16:13,740
中文字幕
And if I wrote this code correctly-- and let

348
00:16:13,740 --> 00:16:16,440
中文字幕
me cross my fingers that I didn't make any typos.

349
00:16:16,440 --> 00:16:20,280
中文字幕
Let me go ahead here and get myself a copy

350
00:16:20,280 --> 00:16:23,200
中文字幕
of smiley, which I brought with me.

351
00:16:23,200 --> 00:16:25,420
中文字幕
So that was the tiny little image from last week.

352
00:16:25,420 --> 00:16:27,120
中文字幕
Let me go ahead and open this in the IDE.

353
00:16:27,120 --> 00:16:28,770
中文字幕
Smiley, super small.

354
00:16:28,770 --> 00:16:30,330
中文字幕
Just a few pixels there.

355
00:16:30,330 --> 00:16:33,840
中文字幕
And let me go ahead now and run Python, which we'll see why in a moment,

356
00:16:33,840 --> 00:16:34,860
中文字幕
resize.

357
00:16:34,860 --> 00:16:40,680
中文字幕
Let's increase this by a factor of 10, increasing Smiley, and call it out.bmp.

358
00:16:40,680 --> 00:16:45,960
中文字幕
Now let me go ahead and open out.bnp and voila, it indeed seems to work.

359
00:16:45,960 --> 00:16:47,250
中文字幕
Right, no funky colors.

360
00:16:47,250 --> 00:16:49,080
中文字幕
No weird sizes.

361
00:16:49,080 --> 00:16:49,810
中文字幕
No padding.

362
00:16:49,810 --> 00:16:51,330
中文字幕
No padding of all things.

363
00:16:51,330 --> 00:16:53,070
中文字幕
It's just now Python.

364
00:16:53,070 --> 00:16:56,010
中文字幕
So you can probably glean some of the logic that's going on here.

365
00:16:56,010 --> 00:16:59,250
中文字幕
But some of it certainly should and probably does look magical.

366
00:16:59,250 --> 00:17:02,130
中文字幕
So let's use today to tease this apart and appreciate not only

367
00:17:02,130 --> 00:17:04,650
中文字幕
what you can do with another language like Python,

368
00:17:04,650 --> 00:17:07,070
中文字幕
but how it's similar and different and how it actually

369
00:17:07,070 --> 00:17:11,120
中文字幕
is built upon something like C. So let's do some comparisons first

370
00:17:11,120 --> 00:17:13,610
中文字幕
so that we can see that it's not a huge stretch to introduce

371
00:17:13,610 --> 00:17:15,550
中文字幕
yet another language so quickly.

372
00:17:15,550 --> 00:17:18,510
中文字幕
So recall that in Scratch if we wanted to set a variable, like counter,

373
00:17:18,510 --> 00:17:20,940
中文字幕
to zero, you might simply do something like this,

374
00:17:20,940 --> 00:17:22,470
中文字幕
setting it equal to zero at left.

375
00:17:22,470 --> 00:17:24,810
中文字幕
In C, we would do the same thing here at the right.

376
00:17:24,810 --> 00:17:27,600
中文字幕
In JavaScript, this instead looked a little different.

377
00:17:27,600 --> 00:17:29,670
中文字幕
What did we do in JavaScript?

378
00:17:29,670 --> 00:17:33,600
中文字幕
Yeah, we used let instead because we don't specify explicitly the type.

379
00:17:33,600 --> 00:17:37,560
中文字幕
But we do need to tell the computer, let me have this variable called counter.

380
00:17:37,560 --> 00:17:41,310
中文字幕
In Python, it's going to be that.

381
00:17:41,310 --> 00:17:43,500
中文字幕
So we've gotten rid of the type still.

382
00:17:43,500 --> 00:17:46,850
中文字幕
We've gotten rid of any mention of let or another keyword.

383
00:17:46,850 --> 00:17:50,880
中文字幕
And we've gotten rid of-- perhaps most gratifyingly--

384
00:17:50,880 --> 00:17:52,440
中文字幕
semi-colons are gone.

385
00:17:52,440 --> 00:17:53,580
中文字幕
No more semi-colons.

386
00:17:53,580 --> 00:17:56,890
中文字幕
And no more curly braces in the way you've seen them thus far.

387
00:17:56,890 --> 00:17:59,280
中文字幕
So that was C, JavaScript, and now Python.

388
00:17:59,280 --> 00:18:00,660
中文字幕
So how about something like this?

389
00:18:00,660 --> 00:18:03,400
中文字幕
In Scratch, if you wanted to increment a counter by one,

390
00:18:03,400 --> 00:18:04,740
中文字幕
you would use a block like this.

391
00:18:04,740 --> 00:18:07,200
中文字幕
In C, we would do the same on the right here in code.

392
00:18:07,200 --> 00:18:09,450
中文字幕
In JavaScript, did it look any different on the right?

393
00:18:13,290 --> 00:18:14,670
中文字幕
No.

394
00:18:14,670 --> 00:18:16,410
中文字幕
You haven't had occasion to use this yet.

395
00:18:16,410 --> 00:18:20,640
中文字幕
But one of the sort of revelations of JavaScript was that's also JavaScript.

396
00:18:20,640 --> 00:18:21,960
中文字幕
It was identical.

397
00:18:21,960 --> 00:18:24,930
中文字幕
Something like this, though, is Python.

398
00:18:24,930 --> 00:18:26,100
中文字幕
So it's almost the same.

399
00:18:26,100 --> 00:18:27,680
中文字幕
But I've gotten rid of the semi-colon.

400
00:18:27,680 --> 00:18:29,370
中文字幕
But the logic is exactly the same--

401
00:18:29,370 --> 00:18:32,760
中文字幕
set counter on the left equal to whatever it is on the right plus one

402
00:18:32,760 --> 00:18:33,720
中文字幕
additional value.

403
00:18:33,720 --> 00:18:34,660
中文字幕
What about this?

404
00:18:34,660 --> 00:18:38,040
中文字幕
This in C had what effect?

405
00:18:38,040 --> 00:18:39,160
中文字幕
Incrementing the variable.

406
00:18:39,160 --> 00:18:40,540
中文字幕
So this is exactly the same.

407
00:18:40,540 --> 00:18:43,790
中文字幕
It's sort of a nice shorthand notation for doing counter equals

408
00:18:43,790 --> 00:18:46,170
中文字幕
counter plus 1, which just gets a little tedious to type.

409
00:18:46,170 --> 00:18:48,300
中文字幕
We had that same syntax in JavaScript.

410
00:18:48,300 --> 00:18:51,280
中文字幕
And you can probably guess in Python, what's it going to look like?

411
00:18:51,280 --> 00:18:52,700
中文字幕
Same thing without the--

412
00:18:52,700 --> 00:18:54,850
中文字幕
Same thing minus the semi-colon.

413
00:18:54,850 --> 00:18:56,320
中文字幕
So pretty nice pattern so far.

414
00:18:56,320 --> 00:18:58,880
中文字幕
Languages just keep getting trimmer and trimmer, if you will.

415
00:18:58,880 --> 00:19:01,160
中文字幕
In C, recall that we could just do plus plus,

416
00:19:01,160 --> 00:19:04,310
中文字幕
which was another trick for automating that same process.

417
00:19:04,310 --> 00:19:06,440
中文字幕
JavaScript allows for the same.

418
00:19:06,440 --> 00:19:09,740
中文字幕
And if you really like this syntax, I can't show you a slide for Python.

419
00:19:09,740 --> 00:19:10,430
中文字幕
Doesn't exist.

420
00:19:10,430 --> 00:19:11,750
中文字幕
Can no longer do plus plus.

421
00:19:11,750 --> 00:19:13,160
中文字幕
So we're paying a price.

422
00:19:13,160 --> 00:19:15,620
中文字幕
The author of Python did not include this in the language.

423
00:19:15,620 --> 00:19:16,250
中文字幕
But that's OK.

424
00:19:16,250 --> 00:19:18,830
中文字幕
We at least have this one, which is not too horrible.

425
00:19:18,830 --> 00:19:20,680
中文字幕
So what else did we look at last time?

426
00:19:20,680 --> 00:19:23,780
中文字幕
An if condition like this, comparing if x is less than y,

427
00:19:23,780 --> 00:19:25,310
中文字幕
in C it looks like this.

428
00:19:25,310 --> 00:19:27,920
中文字幕
In JavaScript it looks like this same thing.

429
00:19:27,920 --> 00:19:31,740
中文字幕
In Python, it looks like this.

430
00:19:31,740 --> 00:19:34,460
中文字幕
So gone are the curly braces.

431
00:19:34,460 --> 00:19:36,050
中文字幕
Added is a colon.

432
00:19:36,050 --> 00:19:40,380
中文字幕
And what you don't see yet is that indentation is going to be important.

433
00:19:40,380 --> 00:19:43,370
中文字幕
So any of you have been a little fast and loose with style 50

434
00:19:43,370 --> 00:19:46,080
中文字幕
and, like we've seen at office hours, all of your code,

435
00:19:46,080 --> 00:19:48,280
中文字幕
however many lines you've written for whatever reason

436
00:19:48,280 --> 00:19:50,970
中文字幕
is all aligned on the left and nothing is actually indented.

437
00:19:50,970 --> 00:19:52,670
中文字幕
Now Python is not going to tolerate that.

438
00:19:52,670 --> 00:19:55,180
中文字幕
Python requires indentation for logic.

439
00:19:55,180 --> 00:19:57,680
中文字幕
And so this is actually a stylistic feature of the language.

440
00:19:57,680 --> 00:20:02,000
中文字幕
It forces you to adopt good visual stylistic habits because the code just

441
00:20:02,000 --> 00:20:04,520
中文字幕
won't run if you haven't indented it properly.

442
00:20:04,520 --> 00:20:07,070
中文字幕
So anything that's going to happen if x is less than y

443
00:20:07,070 --> 00:20:11,100
中文字幕
needs to be indented, say, four spaces underneath that colon.

444
00:20:11,100 --> 00:20:12,080
中文字幕
What else have we seen?

445
00:20:12,080 --> 00:20:14,630
中文字幕
In C or in Scratch we had this block for if's and elses.

446
00:20:14,630 --> 00:20:16,460
中文字幕
In C it looks like this.

447
00:20:16,460 --> 00:20:18,170
中文字幕
In JavaScript it looks like this.

448
00:20:18,170 --> 00:20:21,890
中文字幕
In Python it's going to look like this, albeit with indentation

449
00:20:21,890 --> 00:20:23,120
中文字幕
below each of those colons.

450
00:20:23,120 --> 00:20:23,750
中文字幕
How about this?

451
00:20:23,750 --> 00:20:27,260
中文字幕
When we had three-way a fork in the road-- if else, if else--

452
00:20:27,260 --> 00:20:28,970
中文字幕
in C it looks like this.

453
00:20:28,970 --> 00:20:30,440
中文字幕
JavaScript looked the same.

454
00:20:30,440 --> 00:20:32,880
中文字幕
In Python, looks a little funky.

455
00:20:32,880 --> 00:20:34,130
中文字幕
It's going to look like this--

456
00:20:34,130 --> 00:20:36,670
中文字幕
elif but three colons, this time two.

457
00:20:36,670 --> 00:20:37,170
中文字幕
What else?

458
00:20:37,170 --> 00:20:41,480
中文字幕
We also looked at forever loops in Scratch, in C, and in JavaScript.

459
00:20:41,480 --> 00:20:45,950
中文字幕
You could use exactly the same syntax in Python, almost the same.

460
00:20:45,950 --> 00:20:48,320
中文字幕
Gone are the curly braces, added is the colon.

461
00:20:48,320 --> 00:20:52,580
中文字幕
And the slight subtlety, if you noticed, true and false

462
00:20:52,580 --> 00:20:54,440
中文字幕
are now proper nouns, if you will.

463
00:20:54,440 --> 00:20:56,960
中文字幕
Capital T capital F is necessary to write.

464
00:20:56,960 --> 00:20:57,930
中文字幕
How about a for loop?

465
00:20:57,930 --> 00:21:00,870
中文字幕
So in Scratch, we could very easily say, repeat this 50 times.

466
00:21:00,870 --> 00:21:03,410
中文字幕
C and JavaScript is a little pedantic in that you have

467
00:21:03,410 --> 00:21:05,810
中文字幕
to initialize and increment and check.

468
00:21:05,810 --> 00:21:08,060
中文字幕
Both C and JavaScript take that same approach,

469
00:21:08,060 --> 00:21:11,450
中文字幕
although in JavaScript we of course use let instead of int.

470
00:21:11,450 --> 00:21:15,470
中文字幕
Python is a little more succinct although a little less explicit

471
00:21:15,470 --> 00:21:16,880
中文字幕
step by step.

472
00:21:16,880 --> 00:21:17,960
中文字幕
You just do this.

473
00:21:17,960 --> 00:21:23,270
中文字幕
For i in range of 50 is the way of saying start iterating at 0,

474
00:21:23,270 --> 00:21:25,970
中文字幕
count all the way up to but not including 50,

475
00:21:25,970 --> 00:21:28,260
中文字幕
thereby giving you a range of values.

476
00:21:28,260 --> 00:21:30,770
中文字幕
So this is the one that's perhaps the most weird

477
00:21:30,770 --> 00:21:33,620
中文字幕
thus far, but still a little more succinct to write.

478
00:21:33,620 --> 00:21:37,250
中文字幕
So in C, we had so many data types-- bool, char, double, float, int, long,

479
00:21:37,250 --> 00:21:37,960
中文字幕
string--

480
00:21:37,960 --> 00:21:40,340
中文字幕
the last of which, of course, came from the CS50 library.

481
00:21:40,340 --> 00:21:42,040
中文字幕
And there's others that you can use in C,

482
00:21:42,040 --> 00:21:44,810
中文字幕
as you might recall, from problem set 3, perhaps.

483
00:21:44,810 --> 00:21:47,790
中文字幕
In Python, we're going to shorten this list, at least initially,

484
00:21:47,790 --> 00:21:48,850
中文字幕
to just these data types.

485
00:21:48,850 --> 00:21:52,730
中文字幕
In Python, we're going to have bools for true-false, floats for real numbers,

486
00:21:52,730 --> 00:21:56,410
中文字幕
ints for integers, and then strs for strings.

487
00:21:56,410 --> 00:21:59,860
中文字幕
Just a little more succinct, but it does actually exist. str in Python

488
00:21:59,860 --> 00:22:00,530
中文字幕
is a real thing.

489
00:22:00,530 --> 00:22:02,560
中文字幕
It is not a CS50 addition.

490
00:22:02,560 --> 00:22:04,610
中文字幕
There are other data types that come with Python.

491
00:22:04,610 --> 00:22:07,400
中文字幕
In fact, this is where the language gets powerful.

492
00:22:07,400 --> 00:22:11,190
中文字幕
And those of you who came from a Java background or C++,

493
00:22:11,190 --> 00:22:13,070
中文字幕
the subset of you who have programmed before,

494
00:22:13,070 --> 00:22:16,310
中文字幕
you have more features in Python just like you do in those other languages

495
00:22:16,310 --> 00:22:21,770
中文字幕
that we did not have in C. In Python, you have dictionaries or hash tables.

496
00:22:21,770 --> 00:22:25,640
中文字幕
You have lists, which are arrays, but that can automatically resize.

497
00:22:25,640 --> 00:22:28,330
中文字幕
You don't have to decide in advance how big or small they are.

498
00:22:28,330 --> 00:22:31,520
中文字幕
Range we just saw, it's a range of values, like 50 of them,

499
00:22:31,520 --> 00:22:33,050
中文字幕
set in the mathematical sense.

500
00:22:33,050 --> 00:22:35,600
中文字幕
It's a collection of things that ensures you don't

501
00:22:35,600 --> 00:22:37,790
中文字幕
have duplicates in that collection.

502
00:22:37,790 --> 00:22:40,820
中文字幕
And then tuple is a combination of things kind of like for math

503
00:22:40,820 --> 00:22:43,760
中文字幕
when you have x comma y or latitude comma longitude.

504
00:22:43,760 --> 00:22:46,490
中文字幕
Any time you have pairs or triples or more of things,

505
00:22:46,490 --> 00:22:47,870
中文字幕
those are called tuples.

506
00:22:47,870 --> 00:22:51,410
中文字幕
And those are common in math courses and higher-level CS theory classes,

507
00:22:51,410 --> 00:22:52,320
中文字幕
as well.

508
00:22:52,320 --> 00:22:54,500
中文字幕
But we do give you, at least in this first week

509
00:22:54,500 --> 00:22:57,410
中文字幕
of our look at Python, a few functions from CS50,

510
00:22:57,410 --> 00:23:01,610
中文字幕
among them getFloat, getInt, and getString, which behave exactly

511
00:23:01,610 --> 00:23:02,720
中文字幕
like their C counterparts.

512
00:23:02,720 --> 00:23:04,520
中文字幕
And this is just going to allow us to start

513
00:23:04,520 --> 00:23:08,180
中文字幕
writing code very reminiscent of what we did the last few weeks.

514
00:23:08,180 --> 00:23:10,370
中文字幕
But let's consider what's going to change

515
00:23:10,370 --> 00:23:12,740
中文字幕
as we're about to start writing our own programs.

516
00:23:12,740 --> 00:23:16,130
中文字幕
In C, when you wanted to use the CS50 library, you of course

517
00:23:16,130 --> 00:23:17,690
中文字幕
included its header file.

518
00:23:17,690 --> 00:23:20,990
中文字幕
That syntax is going to change in Python so that for this first week when

519
00:23:20,990 --> 00:23:24,410
中文字幕
you want to use the CS50 library, you're going to instead say

520
00:23:24,410 --> 00:23:29,060
中文字幕
from CS50 import and then a comma separated list of the functions

521
00:23:29,060 --> 00:23:31,560
中文字幕
that you want to import or use in your code.

522
00:23:31,560 --> 00:23:32,810
中文字幕
So it's a little more precise.

523
00:23:32,810 --> 00:23:34,940
中文字幕
This syntax is not saying give me everything.

524
00:23:34,940 --> 00:23:36,650
中文字幕
Give me this, this, and this other thing.

525
00:23:36,650 --> 00:23:39,760
中文字幕
And if you want to use one or more, you can just separate them by commas.

526
00:23:39,760 --> 00:23:42,470
中文字幕
As an aside, especially those of you who have seen Python before,

527
00:23:42,470 --> 00:23:44,270
中文字幕
there's other ways to do this.

528
00:23:44,270 --> 00:23:45,740
中文字幕
There are several approaches.

529
00:23:45,740 --> 00:23:48,290
中文字幕
This is, perhaps, the most comparable for our purposes today.

530
00:23:48,290 --> 00:23:50,090
中文字幕
What else are you're going to have to know?

531
00:23:50,090 --> 00:23:52,880
中文字幕
In C you had to compile your code.

532
00:23:52,880 --> 00:23:54,690
中文字幕
And you did so with clang, like this.

533
00:23:54,690 --> 00:23:57,320
中文字幕
And then you ran your program with dot slash hello.

534
00:23:57,320 --> 00:23:59,270
中文字幕
Or more simply, you did make hello and then

535
00:23:59,270 --> 00:24:02,630
中文字幕
we'd figure out the command for you in the IDE or the sandbox or lab.

536
00:24:02,630 --> 00:24:05,600
中文字幕
In Python, you're going to skip the compilation step.

537
00:24:05,600 --> 00:24:07,310
中文字幕
When you want to run a program in Python,

538
00:24:07,310 --> 00:24:09,600
中文字幕
you're going to do just what I did quickly before.

539
00:24:09,600 --> 00:24:13,400
中文字幕
You're just going to run the command Python and then the name of the file

540
00:24:13,400 --> 00:24:14,660
中文字幕
that you want to run.

541
00:24:14,660 --> 00:24:16,580
中文字幕
And the reason for this is as follows.

542
00:24:16,580 --> 00:24:20,750
中文字幕
In the world of C, recall that we had this sort of pipeline process

543
00:24:20,750 --> 00:24:24,530
中文字幕
where we have our source code as our input.

544
00:24:24,530 --> 00:24:29,750
中文字幕
And then we wanted to get to the point of machine code, the zeros and ones.

545
00:24:29,750 --> 00:24:32,990
中文字幕
And what was standing in between source code and machine code,

546
00:24:32,990 --> 00:24:34,430
中文字幕
just to be clear?

547
00:24:34,430 --> 00:24:36,420
中文字幕
What process?

548
00:24:36,420 --> 00:24:37,640
中文字幕
Yeah, so compiling.

549
00:24:37,640 --> 00:24:40,730
中文字幕
So we had a compiler in the middle whose purpose in life

550
00:24:40,730 --> 00:24:44,180
中文字幕
is by definition to translate one language to another.

551
00:24:44,180 --> 00:24:47,510
中文字幕
It happens to be an English-like language to a computer-like language,

552
00:24:47,510 --> 00:24:50,790
中文字幕
but a compiler is a general term that just converts one thing to another.

553
00:24:50,790 --> 00:24:53,750
中文字幕
And so this pipeline for C looked like this.

554
00:24:53,750 --> 00:24:56,570
中文字幕
And that's why you had to run Clang explicitly, or make.

555
00:24:56,570 --> 00:24:58,730
中文字幕
You had to induce that middle man operation

556
00:24:58,730 --> 00:25:01,370
中文字幕
to convert the language to something the computer understands.

557
00:25:01,370 --> 00:25:06,980
中文字幕
Python and other languages are not typically compiled in the same way.

558
00:25:06,980 --> 00:25:09,020
中文字幕
They're generally said to be interpreted,

559
00:25:09,020 --> 00:25:11,600
中文字幕
whereby you don't compile them into zeros and ones

560
00:25:11,600 --> 00:25:12,860
中文字幕
and then run the program.

561
00:25:12,860 --> 00:25:17,330
中文字幕
You instead run a program that someone else wrote called Python.

562
00:25:17,330 --> 00:25:20,000
中文字幕
And that program is, by definition, an interpreter.

563
00:25:20,000 --> 00:25:22,130
中文字幕
And that interpreter's purpose in life, as the word

564
00:25:22,130 --> 00:25:25,580
中文字幕
implies, is to read your code top to bottom, left to right,

565
00:25:25,580 --> 00:25:27,380
中文字幕
and just do exactly what you tell it to do,

566
00:25:27,380 --> 00:25:32,420
中文字幕
step by step by step, without doing the upfront work of converting things

567
00:25:32,420 --> 00:25:33,260
中文字幕
to zeros and ones.

568
00:25:33,260 --> 00:25:35,840
中文字幕
So in the human world, if I speak English and someone there

569
00:25:35,840 --> 00:25:38,450
中文字幕
speaks Spanish and we don't speak each other's language,

570
00:25:38,450 --> 00:25:41,720
中文字幕
we might put a third human in between us, obviously a human interpreter.

571
00:25:41,720 --> 00:25:43,070
中文字幕
The role is very similar.

572
00:25:43,070 --> 00:25:45,110
中文字幕
The interpreter listens to me and then translates

573
00:25:45,110 --> 00:25:46,900
中文字幕
that to something the computer understands.

574
00:25:46,900 --> 00:25:48,760
中文字幕
But it doesn't get into zeros and ones.

575
00:25:48,760 --> 00:25:51,010
中文字幕
It just goes from one directly to the other.

576
00:25:51,010 --> 00:25:53,380
中文字幕
So the difference here in Python is that you still

577
00:25:53,380 --> 00:25:56,560
中文字幕
are going to write source code, like I quickly did for resize.

578
00:25:56,560 --> 00:25:59,380
中文字幕
And ultimately, we want to actually get it

579
00:25:59,380 --> 00:26:04,260
中文字幕
into a program called an interpreter.

580
00:26:04,260 --> 00:26:07,320
中文字幕
And so the step ideally just looks like this.

581
00:26:07,320 --> 00:26:11,400
中文字幕
But as an aside, Python is a pretty sophisticated language.

582
00:26:11,400 --> 00:26:14,220
中文字幕
And even though we have the pleasure of running it just

583
00:26:14,220 --> 00:26:18,570
中文字幕
with one step instead of these two steps, there actually is, as an aside,

584
00:26:18,570 --> 00:26:21,470
中文字幕
some magic going on underneath the hood.

585
00:26:21,470 --> 00:26:25,500
中文字幕
And for the curious, there actually is, for performance reasons,

586
00:26:25,500 --> 00:26:28,920
中文字幕
a compiler built into Python that actually converts it to something

587
00:26:28,920 --> 00:26:31,500
中文字幕
intermediary called bytecode.

588
00:26:31,500 --> 00:26:34,120
中文字幕
And bytecode is what's actually interpreted.

589
00:26:34,120 --> 00:26:38,370
中文字幕
And so this is why Python, while potentially slower than C

590
00:26:38,370 --> 00:26:42,090
中文字幕
at certain tasks because you're not going to the low level zeros and ones,

591
00:26:42,090 --> 00:26:45,260
中文字幕
can actually be used in business applications and popular websites

592
00:26:45,260 --> 00:26:45,760
中文字幕
and such.

593
00:26:45,760 --> 00:26:47,590
中文字幕
And that didn't really work very well.

594
00:26:47,590 --> 00:26:51,000
中文字幕
And so it can be highly performing, as well.

595
00:26:51,000 --> 00:26:52,990
中文字幕
But more on that in a little bit.

596
00:26:52,990 --> 00:26:55,860
中文字幕
So with that said, if these are the differences not only

597
00:26:55,860 --> 00:26:58,410
中文字幕
syntactically but also mechanically, let's go ahead

598
00:26:58,410 --> 00:27:00,420
中文字幕
and actually write a program.

599
00:27:00,420 --> 00:27:03,120
中文字幕
So let me go ahead and go into the IDE.

600
00:27:03,120 --> 00:27:04,710
中文字幕
Let me close our examples from before.

601
00:27:04,710 --> 00:27:07,680
中文字幕
And let's start more simply because resize was a mouthful all at once.

602
00:27:07,680 --> 00:27:10,680
中文字幕
Let me go ahead and create a file called hello.py.

603
00:27:10,680 --> 00:27:13,140
中文字幕
And instead of writing this program in C,

604
00:27:13,140 --> 00:27:15,420
中文字幕
let me go ahead and just write hello world.

605
00:27:15,420 --> 00:27:17,190
中文字幕
So let's go ahead and do this.

606
00:27:17,190 --> 00:27:19,200
中文字幕
Print hello world.

607
00:27:19,200 --> 00:27:20,220
中文字幕
Done.

608
00:27:20,220 --> 00:27:23,830
中文字幕
That's my first program in Python, and truly my first program in Python,

609
00:27:23,830 --> 00:27:26,380
中文字幕
not sort of coming out swinging with resize.

610
00:27:26,380 --> 00:27:32,950
中文字幕
So what is not present in this file that was in something like hello.c?

611
00:27:32,950 --> 00:27:35,490
中文字幕
There is no main function necessary here.

612
00:27:35,490 --> 00:27:37,150
中文字幕
What else is missing?

613
00:27:37,150 --> 00:27:38,100
中文字幕
Printf.

614
00:27:38,100 --> 00:27:39,530
中文字幕
There is no mention of printf.

615
00:27:39,530 --> 00:27:41,940
中文字幕
It's instead print, which is a little more human friendly.

616
00:27:41,940 --> 00:27:42,780
中文字幕
Libraries.

617
00:27:42,780 --> 00:27:45,320
中文字幕
There is no mention of header files or libraries

618
00:27:45,320 --> 00:27:46,350
中文字幕
at the top of the file.

619
00:27:46,350 --> 00:27:48,760
中文字幕
I just dived right in and got to it.

620
00:27:48,760 --> 00:27:49,260
中文字幕
Yeah?

621
00:27:49,260 --> 00:27:51,360
中文字幕
No semi-colons.

622
00:27:51,360 --> 00:27:51,850
中文字幕
What else?

623
00:27:55,340 --> 00:27:55,840
中文字幕
What else?

624
00:27:55,840 --> 00:27:56,340
中文字幕
Yeah?

625
00:27:56,340 --> 00:27:58,750
中文字幕
No backslash n.

626
00:27:58,750 --> 00:28:00,940
中文字幕
I probably-- I haven't run it yet, but I think

627
00:28:00,940 --> 00:28:02,980
中文字幕
I will get that for free this time with Python.

628
00:28:02,980 --> 00:28:04,270
中文字幕
I don't have to be so explicit.

629
00:28:04,270 --> 00:28:06,610
中文字幕
Was there another hand here?

630
00:28:06,610 --> 00:28:08,470
中文字幕
There's no f in printf.

631
00:28:08,470 --> 00:28:10,690
中文字幕
There's no f in printf, yep.

632
00:28:10,690 --> 00:28:11,320
中文字幕
Something else?

633
00:28:14,140 --> 00:28:15,220
中文字幕
There's no indentation.

634
00:28:15,220 --> 00:28:16,930
中文字幕
Though to be fair, there's only one line.

635
00:28:16,930 --> 00:28:18,050
中文字幕
But there's no indentation.

636
00:28:18,050 --> 00:28:19,430
中文字幕
That's fair.

637
00:28:19,430 --> 00:28:21,070
中文字幕
There's no curly braces, as well.

638
00:28:21,070 --> 00:28:22,180
中文字幕
There's no mention of int.

639
00:28:22,180 --> 00:28:23,350
中文字幕
There's no mention of void.

640
00:28:23,350 --> 00:28:24,640
中文字幕
I mean, my God.

641
00:28:24,640 --> 00:28:26,890
中文字幕
Why didn't we just do this last time?

642
00:28:26,890 --> 00:28:29,290
中文字幕
And so this is why languages evolve.

643
00:28:29,290 --> 00:28:32,560
中文字幕
People realized years ago, gee, C is serving us well.

644
00:28:32,560 --> 00:28:35,380
中文字幕
Once I understand pointers and the syntax, OK, I got it.

645
00:28:35,380 --> 00:28:38,590
中文字幕
But my God, it's just so tedious to write even the simplest of programs

646
00:28:38,590 --> 00:28:42,910
中文字幕
because I have to do hash includes, standard io.h, int main void, I mean,

647
00:28:42,910 --> 00:28:46,060
中文字幕
all of this syntactic overhead that's getting in the way of you just

648
00:28:46,060 --> 00:28:48,520
中文字幕
doing the work you care about, which in simplest form

649
00:28:48,520 --> 00:28:50,650
中文字幕
here is just printing hello world.

650
00:28:50,650 --> 00:28:53,890
中文字幕
So Python and a lot of more modern languages-- among them,

651
00:28:53,890 --> 00:28:56,110
中文字幕
Ruby and PHP and others--

652
00:28:56,110 --> 00:28:58,960
中文字幕
just get rid of a lot of that overhead so that you can just get down

653
00:28:58,960 --> 00:29:01,280
中文字幕
to work more quickly right away.

654
00:29:01,280 --> 00:29:02,790
中文字幕
So how do I go ahead and run this?

655
00:29:02,790 --> 00:29:06,570
中文字幕
In C, recall, I would have done dot slash hello.py.

656
00:29:06,570 --> 00:29:09,070
中文字幕
But we just said a moment ago that's not the right approach.

657
00:29:09,070 --> 00:29:11,780
中文字幕
How do I go and run this program?

658
00:29:11,780 --> 00:29:16,450
中文字幕
Yeah, so I run literally a program that is coincidentally called Python itself.

659
00:29:16,450 --> 00:29:17,450
中文字幕
That is the interpreter.

660
00:29:17,450 --> 00:29:20,780
中文字幕
That's the man in the middle between me and my Spanish-speaking friend that

661
00:29:20,780 --> 00:29:25,280
中文字幕
just has to convert hello.py into whatever the computer itself

662
00:29:25,280 --> 00:29:26,150
中文字幕
understands.

663
00:29:26,150 --> 00:29:28,070
中文字幕
And so there, indeed, we have hello world.

664
00:29:28,070 --> 00:29:30,830
中文字幕
And as you notice, there's no backslash n on my code.

665
00:29:30,830 --> 00:29:33,210
中文字幕
But I am moving the cursor to the new line.

666
00:29:33,210 --> 00:29:34,880
中文字幕
So Python just decided, you know what?

667
00:29:34,880 --> 00:29:37,880
中文字幕
It's so damn common to have new lines, let's just add those by default.

668
00:29:37,880 --> 00:29:39,800
中文字幕
You know, the price we're going to pay is it's

669
00:29:39,800 --> 00:29:41,480
中文字幕
a little annoying to get rid of them.

670
00:29:41,480 --> 00:29:43,560
中文字幕
But we'll see that in a little bit, too.

671
00:29:43,560 --> 00:29:44,360
中文字幕
So just a tradeoff.

672
00:29:44,360 --> 00:29:45,690
中文字幕
All right, let's do another one.

673
00:29:45,690 --> 00:29:48,110
中文字幕
That's just a simplest of possible programs.

674
00:29:48,110 --> 00:29:51,350
中文字幕
Let's go ahead and do, say, something a little fancier

675
00:29:51,350 --> 00:29:54,720
中文字幕
that allows us to do something more than that.

676
00:29:54,720 --> 00:29:58,310
中文字幕
So let's go ahead, say, and compare not just

677
00:29:58,310 --> 00:30:00,960
中文字幕
that, but let's actually go get some user input.

678
00:30:00,960 --> 00:30:03,020
中文字幕
So for user input, there's a few ways to do this.

679
00:30:03,020 --> 00:30:06,140
中文字幕
We'll do it the CS50 way initially, but these are training wheels this week

680
00:30:06,140 --> 00:30:08,510
中文字幕
that we'll use for just a week before we take them off,

681
00:30:08,510 --> 00:30:11,600
中文字幕
just bridging us from C to Python.

682
00:30:11,600 --> 00:30:13,670
中文字幕
Let me go ahead and call this string zero.py

683
00:30:13,670 --> 00:30:15,200
中文字幕
because I'm dealing with strings.

684
00:30:15,200 --> 00:30:18,860
中文字幕
And let me go ahead and do s to give me a variable.

685
00:30:18,860 --> 00:30:19,770
中文字幕
Get string.

686
00:30:19,770 --> 00:30:23,060
中文字幕
Let me prompt the human for his or her name like this and then let me go ahead

687
00:30:23,060 --> 00:30:24,860
中文字幕
and say hello.

688
00:30:24,860 --> 00:30:28,070
中文字幕
And so and now I just have to consider how to print out their name.

689
00:30:28,070 --> 00:30:30,590
中文字幕
And in Python, I can actually just do this.

690
00:30:30,590 --> 00:30:32,240
中文字幕
I don't need to do percent s.

691
00:30:32,240 --> 00:30:36,710
中文字幕
I don't need to put a second-- or, I do need to put a second comma here.

692
00:30:36,710 --> 00:30:39,170
中文字幕
But I can just do this, which is a little simpler.

693
00:30:39,170 --> 00:30:40,880
中文字幕
And this is not correct.

694
00:30:40,880 --> 00:30:43,900
中文字幕
I'm not practicing what I preached.

695
00:30:43,900 --> 00:30:44,610
中文字幕
Get rid of the f.

696
00:30:44,610 --> 00:30:46,530
中文字幕
Just print what you want to print, indeed.

697
00:30:46,530 --> 00:30:49,590
中文字幕
So s, notice, is apparently a variable because I'm assigning

698
00:30:49,590 --> 00:30:51,330
中文字幕
it a value from right to left.

699
00:30:51,330 --> 00:30:53,760
中文字幕
But notice that I'm not specifying the type.

700
00:30:53,760 --> 00:30:57,210
中文字幕
So Python does have type. str we said is the string equivalent.

701
00:30:57,210 --> 00:30:58,590
中文字幕
But you don't have to mention it.

702
00:30:58,590 --> 00:31:01,580
中文字幕
Python, like JavaScript, will just figure it out, even without a keyword

703
00:31:01,580 --> 00:31:02,160
中文字幕
like let.

704
00:31:02,160 --> 00:31:05,330
中文字幕
But I do need to add one thing.

705
00:31:05,330 --> 00:31:05,840
中文字幕
What's that?

706
00:31:05,840 --> 00:31:07,630
中文字幕
You need to import the getString?

707
00:31:07,630 --> 00:31:09,630
中文字幕
Yeah, getString is a CS50 thing.

708
00:31:09,630 --> 00:31:12,570
中文字幕
And we're only going to use it for a week, but I do need to import it.

709
00:31:12,570 --> 00:31:15,990
中文字幕
And the syntax with which to do this is to say, from the CS50 library,

710
00:31:15,990 --> 00:31:17,940
中文字幕
import a function called get string.

711
00:31:17,940 --> 00:31:20,160
中文字幕
I don't need to import any more with commas.

712
00:31:20,160 --> 00:31:21,800
中文字幕
That one suffices for this program.

713
00:31:21,800 --> 00:31:23,060
中文字幕
Yeah.

714
00:31:23,060 --> 00:31:25,510
中文字幕
Would you want to--

715
00:31:25,510 --> 00:31:29,920
中文字幕
instead of saying hello your name, would you want to first getName that says

716
00:31:32,370 --> 00:31:35,520
中文字幕
You're not indicating where the error is ..

717
00:31:35,520 --> 00:31:37,940
中文字幕
Sure, let me come back to this in one second.

718
00:31:37,940 --> 00:31:40,520
中文字幕
Let's run this program first to demonstrate that it indeed

719
00:31:40,520 --> 00:31:42,810
中文字幕
does what we saw it do last week.

720
00:31:42,810 --> 00:31:50,980
中文字幕
And let me go ahead here and do this time Python of string 0.

721
00:31:50,980 --> 00:31:53,070
中文字幕
Let me go ahead and it's just waiting for my name.

722
00:31:53,070 --> 00:31:54,090
中文字幕
So I'll type in David.

723
00:31:54,090 --> 00:31:54,740
中文字幕
Hello, David.

724
00:31:54,740 --> 00:31:57,800
中文字幕
But as you propose, what if you wanted to flip this around?

725
00:31:57,800 --> 00:32:01,310
中文字幕
Well, suppose I wanted to say the person's name and then

726
00:32:01,310 --> 00:32:06,620
中文字幕
something like hello because I'm just excited to see them, instead.

727
00:32:06,620 --> 00:32:07,670
中文字幕
Let's see what this does.

728
00:32:07,670 --> 00:32:10,430
中文字幕
Let me go ahead now and run Python of string 0.

729
00:32:10,430 --> 00:32:12,050
中文字幕
Type in my name.

730
00:32:12,050 --> 00:32:14,630
中文字幕
And it's almost what I think you intended.

731
00:32:14,630 --> 00:32:16,040
中文字幕
But there is a bug--

732
00:32:16,040 --> 00:32:17,330
中文字幕
an aesthetic bug, at least.

733
00:32:17,330 --> 00:32:19,850
中文字幕
So it seems with Python's print function you don't need

734
00:32:19,850 --> 00:32:21,970
中文字幕
to use the placeholder like percent s.

735
00:32:21,970 --> 00:32:27,680
中文字幕
But it would seem to presumptuously add a space for you after everything you're

736
00:32:27,680 --> 00:32:31,190
中文字幕
passing in as an input to print itself.

737
00:32:31,190 --> 00:32:33,380
中文字幕
So notice print is taking how many arguments

738
00:32:33,380 --> 00:32:37,070
中文字幕
according to this highlighted portion?

739
00:32:37,070 --> 00:32:39,680
中文字幕
How many arguments might you infer?

740
00:32:39,680 --> 00:32:42,670
中文字幕
S space and then the thing.

741
00:32:42,670 --> 00:32:43,380
中文字幕
Two?

742
00:32:43,380 --> 00:32:44,370
中文字幕
Yeah, so two.

743
00:32:44,370 --> 00:32:48,290
中文字幕
One is s, comma, and then the rest is what's highlighted in green here.

744
00:32:48,290 --> 00:32:51,000
中文字幕
Yes, there's a second comma there, but it's inside of the string.

745
00:32:51,000 --> 00:32:53,480
中文字幕
So just like in C, that's sort of a red herring.

746
00:32:53,480 --> 00:32:54,820
中文字幕
There's only two arguments here.

747
00:32:54,820 --> 00:32:56,730
中文字幕
But it seems that the print function-- and you would know this

748
00:32:56,730 --> 00:33:00,180
中文字幕
by reading that documentation-- if you pass in two or three or more arguments,

749
00:33:00,180 --> 00:33:01,230
中文字幕
it prints all of them.

750
00:33:01,230 --> 00:33:02,850
中文字幕
But separates them with a single space.

751
00:33:02,850 --> 00:33:03,930
中文字幕
So this isn't quite right.

752
00:33:03,930 --> 00:33:06,450
中文字幕
So this is actually a great motivation for cleaning this up.

753
00:33:06,450 --> 00:33:10,030
中文字幕
If I want to actually improve this program and tidy it up a little bit,

754
00:33:10,030 --> 00:33:11,940
中文字幕
let me do that in version one here.

755
00:33:11,940 --> 00:33:15,660
中文字幕
Let me create another file called, say, string1.py.

756
00:33:15,660 --> 00:33:17,850
中文字幕
Let me start where we started a moment ago.

757
00:33:17,850 --> 00:33:21,430
中文字幕
And let me actually use a placeholder akin to C. So if I want to do,

758
00:33:21,430 --> 00:33:27,150
中文字幕
for instance, hello so-and-so, it turns out you can actually say, hey Python,

759
00:33:27,150 --> 00:33:30,540
中文字幕
put a variable called s right here.

760
00:33:30,540 --> 00:33:34,920
中文字幕
However, if I run this as is, there's still going to be a bug.

761
00:33:34,920 --> 00:33:36,460
中文字幕
It's not quite solved yet.

762
00:33:36,460 --> 00:33:38,770
中文字幕
But when I hit Enter now and type in my name--

763
00:33:38,770 --> 00:33:41,040
中文字幕
all right, this is obviously stupid looking.

764
00:33:41,040 --> 00:33:45,660
中文字幕
So it seems that I need to tell Python that this string that I'm passing in,

765
00:33:45,660 --> 00:33:48,480
中文字幕
hello comma so and so, is a formatted string.

766
00:33:48,480 --> 00:33:52,080
中文字幕
It's a placeholder string that it should make some changes to.

767
00:33:52,080 --> 00:33:55,230
中文字幕
And this is a little weird, cryptic syntactically in Python.

768
00:33:55,230 --> 00:34:01,050
中文字幕
But the way you do this in Python is you put an f before the string itself.

769
00:34:01,050 --> 00:34:04,020
中文字幕
So I'm sorry, we got rid of the f a moment ago.

770
00:34:04,020 --> 00:34:05,190
中文字幕
So we just called it print.

771
00:34:05,190 --> 00:34:07,230
中文字幕
Now we're reusing a different f here.

772
00:34:07,230 --> 00:34:09,270
中文字幕
And it's stupid-looking syntax, admittedly.

773
00:34:09,270 --> 00:34:12,270
中文字幕
But this just means hey, Python, the following double quotes

774
00:34:12,270 --> 00:34:14,280
中文字幕
or single quotes that you're about to see should

775
00:34:14,280 --> 00:34:16,190
中文字幕
be formatted by you in a special way.

776
00:34:16,190 --> 00:34:18,780
中文字幕
And it literally goes at the beginning of the string

777
00:34:18,780 --> 00:34:21,010
中文字幕
even though that does admittedly look weird.

778
00:34:21,010 --> 00:34:24,400
中文字幕
But if I now rerun this Python string one and type in my name now,

779
00:34:24,400 --> 00:34:26,110
中文字幕
now it does the substitution.

780
00:34:26,110 --> 00:34:29,460
中文字幕
So I can flip it around logically much more flexibly now

781
00:34:29,460 --> 00:34:33,150
中文字幕
and do something like hello because now I'm passing in one argument

782
00:34:33,150 --> 00:34:35,230
中文字幕
that print will format for me.

783
00:34:35,230 --> 00:34:38,690
中文字幕
So when I type in my name now, I'm not going to get that superfluous space.

784
00:34:38,690 --> 00:34:42,090
中文字幕
And now I have complete control over the formatting of the string.

785
00:34:42,090 --> 00:34:46,230
中文字幕
So you know, sort of two steps forward, one step back, perhaps, syntactically.

786
00:34:46,230 --> 00:34:48,480
中文字幕
But it does allow us to do what we want this to do.

787
00:34:48,480 --> 00:34:50,230
中文字幕
We could write the same program using ints

788
00:34:50,230 --> 00:34:52,460
中文字幕
and floats using getInt and getFloat.

789
00:34:52,460 --> 00:34:53,860
中文字幕
Would look exactly the same.

790
00:34:53,860 --> 00:34:57,330
中文字幕
You don't need to worry about percent s versus percent i versus percent f.

791
00:34:57,330 --> 00:35:01,440
中文字幕
You just type in the variable name inside of those curly braces.

792
00:35:01,440 --> 00:35:04,830
中文字幕
All right, let me go ahead and do some quick math.

793
00:35:04,830 --> 00:35:06,000
中文字幕
Let me go ahead and do this.

794
00:35:06,000 --> 00:35:07,680
中文字幕
Let me go ahead and create a new file.

795
00:35:07,680 --> 00:35:10,170
中文字幕
We'll call this ints.py for integers.

796
00:35:10,170 --> 00:35:13,680
中文字幕
And let me go ahead and get this access to--

797
00:35:13,680 --> 00:35:18,240
中文字幕
how about the CS50 library's get int method or function which exists.

798
00:35:18,240 --> 00:35:20,040
中文字幕
Then let me go ahead and declare a variable

799
00:35:20,040 --> 00:35:23,540
中文字幕
called x and get an int from the user and just prompt him or her for x.

800
00:35:23,540 --> 00:35:25,290
中文字幕
Then let me go ahead and do the same thing

801
00:35:25,290 --> 00:35:27,590
中文字幕
and just get y from them, as well.

802
00:35:27,590 --> 00:35:29,760
中文字幕
And then down here, let me just do some simple math.

803
00:35:29,760 --> 00:35:34,270
中文字幕
And we did this way back in week one by printing as follows.

804
00:35:34,270 --> 00:35:38,220
中文字幕
Let me go ahead and just print out x plus y equals--

805
00:35:38,220 --> 00:35:42,090
中文字幕
and this is what's cool now about this curly brace feature.

806
00:35:42,090 --> 00:35:46,050
中文字幕
You can actually do not just variable's names,

807
00:35:46,050 --> 00:35:48,180
中文字幕
but you can do simple operations in there, too.

808
00:35:48,180 --> 00:35:52,430
中文字幕
I can literally do math inside of those curly braces and print out that value.

809
00:35:52,430 --> 00:35:55,600
中文字幕
But of course, this alone is just going to literally print the curly braces.

810
00:35:55,600 --> 00:35:56,960
中文字幕
What do I have to add?

811
00:35:56,960 --> 00:35:58,560
中文字幕
Yeah, so it looks a little weird.

812
00:35:58,560 --> 00:36:00,420
中文字幕
But this now will solve that problem.

813
00:36:00,420 --> 00:36:05,920
中文字幕
It will print literally x plus y equals whatever the actual sum is.

814
00:36:05,920 --> 00:36:07,840
中文字幕
Just following up, what does f mean?

815
00:36:07,840 --> 00:36:08,670
中文字幕
Format.

816
00:36:08,670 --> 00:36:10,180
中文字幕
Format the following string for me.

817
00:36:10,180 --> 00:36:11,060
中文字幕
Good question.

818
00:36:11,060 --> 00:36:14,900
中文字幕
Let's do just a few copy/paste but change the operator here.

819
00:36:14,900 --> 00:36:19,520
中文字幕
So x minus y, I want to see what this looks like.

820
00:36:19,520 --> 00:36:21,070
中文字幕
X, say-- what did we do last time?

821
00:36:21,070 --> 00:36:22,630
中文字幕
Multiplying by y.

822
00:36:22,630 --> 00:36:23,800
中文字幕
I want to do that math, too.

823
00:36:23,800 --> 00:36:26,420
中文字幕
I can divide as well.

824
00:36:26,420 --> 00:36:29,140
中文字幕
And then we had one more, which was modulo,

825
00:36:29,140 --> 00:36:31,900
中文字幕
or modular arithmetic, which, recall, was the percent sign.

826
00:36:31,900 --> 00:36:33,920
中文字幕
So syntactically, it's identical to see.

827
00:36:33,920 --> 00:36:36,880
中文字幕
We're just adding this curly brace notation just for the print function

828
00:36:36,880 --> 00:36:37,630
中文字幕
right now.

829
00:36:37,630 --> 00:36:38,830
中文字幕
Let me go ahead and run this.

830
00:36:38,830 --> 00:36:40,390
中文字幕
Python of ints.py.

831
00:36:40,390 --> 00:36:44,710
中文字幕
And let me go ahead and do one and say two.

832
00:36:44,710 --> 00:36:46,840
中文字幕
So 1 plus 2 is 3.

833
00:36:46,840 --> 00:36:48,610
中文字幕
1 minus 2 is negative 1.

834
00:36:48,610 --> 00:36:50,430
中文字幕
1 times 2 is 2.

835
00:36:50,430 --> 00:36:53,280
中文字幕
1 divided by 2 is 0.5.

836
00:36:53,280 --> 00:36:57,700
中文字幕
And 1 then divide by 2 and take the remainder is 1.

837
00:36:57,700 --> 00:37:00,550
中文字幕
So I think this checks out mathematically.

838
00:37:00,550 --> 00:37:03,230
中文字幕
But you should be a little surprised by one of these outcomes.

839
00:37:06,340 --> 00:37:07,090
中文字幕
Say again?

840
00:37:07,090 --> 00:37:08,560
中文字幕
You're getting a float.

841
00:37:08,560 --> 00:37:10,180
中文字幕
Yeah, I'm getting a float.

842
00:37:10,180 --> 00:37:14,560
中文字幕
Like, Python itself seems to have fixed a bug in C itself.

843
00:37:14,560 --> 00:37:20,420
中文字幕
What happened in C when you divided 1, an integer, by 2, an integer, in C?

844
00:37:20,420 --> 00:37:21,670
中文字幕
You would get another integer.

845
00:37:21,670 --> 00:37:23,670
中文字幕
And what's the closest integer you can represent

846
00:37:23,670 --> 00:37:26,170
中文字幕
that doesn't have a decimal point?

847
00:37:26,170 --> 00:37:29,530
中文字幕
0, because the C would truncate everything after the decimal point.

848
00:37:29,530 --> 00:37:32,220
中文字幕
And yet, Python seems to have fixed this problem.

849
00:37:32,220 --> 00:37:34,340
中文字幕
And this is actually a somewhat recent phenomenon.

850
00:37:34,340 --> 00:37:36,670
中文字幕
And this a huge religious debate as to whether or not

851
00:37:36,670 --> 00:37:40,900
中文字幕
you should just keep the historical definition of division, which

852
00:37:40,900 --> 00:37:44,170
中文字幕
is floor division, so to speak, or we should make it truly division,

853
00:37:44,170 --> 00:37:45,910
中文字幕
like we all grew up learning in school.

854
00:37:45,910 --> 00:37:50,230
中文字幕
Python took the latter approach and made division mean division, true division,

855
00:37:50,230 --> 00:37:52,450
中文字幕
where if you divide two ints you get back a float.

856
00:37:52,450 --> 00:37:54,250
中文字幕
Of course, this is a problem if people want

857
00:37:54,250 --> 00:37:56,740
中文字幕
to write code that assumes that it's going to be truncated.

858
00:37:56,740 --> 00:37:59,350
中文字幕
That can actually be a powerful feature.

859
00:37:59,350 --> 00:38:02,740
中文字幕
So it turns out, and you won't have terribly many occasions to use this,

860
00:38:02,740 --> 00:38:05,650
中文字幕
but the compromise in the world was, all right, if you really

861
00:38:05,650 --> 00:38:11,020
中文字幕
want the old behavior of the division in Python, we will give it back to you.

862
00:38:11,020 --> 00:38:12,380
中文字幕
You have to use two slashes.

863
00:38:12,380 --> 00:38:15,050
中文字幕
So again, another one of these two steps forward, one step back.

864
00:38:15,050 --> 00:38:18,040
中文字幕
But it's there, so problems can still be solved in the same way.

865
00:38:18,040 --> 00:38:22,080
中文字幕
And this, if I save it and rerun that same code, 1 and 2,

866
00:38:22,080 --> 00:38:27,160
中文字幕
now I get back 0, just as I would in C, which does have some applicability.

867
00:38:27,160 --> 00:38:29,410
中文字幕
Let's do one other example now involving some numbers.

868
00:38:29,410 --> 00:38:32,520
中文字幕
And let me go ahead and call this floats.py.

869
00:38:32,520 --> 00:38:36,940
中文字幕
And let me do the same thing, from CS50 import getFloat this time.

870
00:38:36,940 --> 00:38:38,650
中文字幕
So I can deal with floating point values.

871
00:38:38,650 --> 00:38:40,570
中文字幕
Let me declare a variable x and get a float

872
00:38:40,570 --> 00:38:42,580
中文字幕
and we'll ask the user for a variable x.

873
00:38:42,580 --> 00:38:45,840
中文字幕
Then let's go ahead and get another float, and just as before, call it y.

874
00:38:45,840 --> 00:38:47,800
中文字幕
But this time both of them are, indeed, floats.

875
00:38:47,800 --> 00:38:51,070
中文字幕
Then let me go ahead and do some math, x plus y equals z.

876
00:38:51,070 --> 00:38:52,660
中文字幕
Let's give myself a third variable.

877
00:38:52,660 --> 00:38:55,480
中文字幕
And then let me just go ahead and print out a similar message--

878
00:38:55,480 --> 00:39:00,200
中文字幕
x divided by y equals z.

879
00:39:00,200 --> 00:39:03,130
中文字幕
All right, and let me go ahead and save this, clear my terminal,

880
00:39:03,130 --> 00:39:05,620
中文字幕
and do Python of floats.py.

881
00:39:05,620 --> 00:39:08,270
中文字幕
1 divided by 10 this time.

882
00:39:08,270 --> 00:39:09,700
中文字幕
And I get-- dammit, bug.

883
00:39:09,700 --> 00:39:11,270
中文字幕
How do I fix this?

884
00:39:11,270 --> 00:39:12,520
中文字幕
All right, so just a simple f.

885
00:39:12,520 --> 00:39:13,570
中文字幕
Make it a format string.

886
00:39:13,570 --> 00:39:14,330
中文字幕
No big deal.

887
00:39:14,330 --> 00:39:16,610
中文字幕
So let's rerun this, 1, 10.

888
00:39:16,610 --> 00:39:19,000
中文字幕
OK, hoo, hoo.

889
00:39:19,000 --> 00:39:21,120
中文字幕
That's a new one.

890
00:39:21,120 --> 00:39:22,430
中文字幕
What is going on there?

891
00:39:29,470 --> 00:39:32,640
中文字幕
I did define z in the line above it, and what was your comment?

892
00:39:32,640 --> 00:39:33,800
中文字幕
You used x plus y.

893
00:39:33,800 --> 00:39:36,220
中文字幕
I did use x plus y, but I think I--

894
00:39:36,220 --> 00:39:37,330
中文字幕
oh, wait, OK.

895
00:39:37,330 --> 00:39:37,870
中文字幕
I'm sorry.

896
00:39:37,870 --> 00:39:41,760
中文字幕
Let's-- OK, so we can fix that.

897
00:39:41,760 --> 00:39:44,590
中文字幕
Let's-- sorry.

898
00:39:44,590 --> 00:39:45,900
中文字幕
There.

899
00:39:45,900 --> 00:39:48,450
中文字幕
OK, so 110.

900
00:39:48,450 --> 00:39:51,900
中文字幕
Hmm, still wrong.

901
00:39:51,900 --> 00:39:54,150
中文字幕
Good catch, thank you, though.

902
00:39:54,150 --> 00:39:57,840
中文字幕
Why is 1 plus 2 11--

903
00:39:57,840 --> 00:40:01,210
中文字幕
or 1 plus 10, 11?

904
00:40:01,210 --> 00:40:01,960
中文字幕
Yeah?

905
00:40:01,960 --> 00:40:03,700
中文字幕
.

906
00:40:03,700 --> 00:40:04,950
中文字幕
Wait, wait, wait.

907
00:40:04,950 --> 00:40:06,260
中文字幕
Sorry.

908
00:40:10,410 --> 00:40:13,690
中文字幕
This brings me back to my earlier point as to how tired I am.

909
00:40:13,690 --> 00:40:14,590
中文字幕
So this is correct.

910
00:40:14,590 --> 00:40:19,460
中文字幕
So Python does math correctly.

911
00:40:19,460 --> 00:40:21,760
中文字幕
But-- OK, horrifying.

912
00:40:21,760 --> 00:40:24,850
中文字幕
All right, so now let's do division and try

913
00:40:24,850 --> 00:40:28,690
中文字幕
to make the point I think I meant to make late last night where I if I do 1

914
00:40:28,690 --> 00:40:35,260
中文字幕
divided by 10, OK, 1 divided by 10, as expected, does actually work here.

915
00:40:35,260 --> 00:40:36,700
中文字幕
So 0.1, that's correct.

916
00:40:36,700 --> 00:40:39,040
中文字幕
But remember in C-- let me dig myself out of this hole--

917
00:40:39,040 --> 00:40:42,430
中文字幕
remember in C what happened if we dug a little deeper

918
00:40:42,430 --> 00:40:44,750
中文字幕
and we looked a little past the first decimal point.

919
00:40:44,750 --> 00:40:46,080
中文字幕
So how do I do this in Python?

920
00:40:46,080 --> 00:40:47,510
中文字幕
It's actually pretty similar.

921
00:40:47,510 --> 00:40:50,860
中文字幕
Let me go ahead and not just show myself z but go ahead

922
00:40:50,860 --> 00:40:54,970
中文字幕
and print out to, let's say, two decimal places that same value.

923
00:40:54,970 --> 00:40:56,170
中文字幕
The syntax here is weird.

924
00:40:56,170 --> 00:40:59,470
中文字幕
It's different from C. But you literally take the variable that you want

925
00:40:59,470 --> 00:41:02,380
中文字幕
to format, you put a colon and then a dot--

926
00:41:02,380 --> 00:41:03,880
中文字幕
because you want to adjust the dot--

927
00:41:03,880 --> 00:41:06,220
中文字幕
and then you want to say something like 2f.

928
00:41:06,220 --> 00:41:09,670
中文字幕
So this is saying, hey, Python, format the variable

929
00:41:09,670 --> 00:41:13,650
中文字幕
that's to the left of the colon using two decimal points.

930
00:41:13,650 --> 00:41:15,490
中文字幕
And by the way, it's a floating point value.

931
00:41:15,490 --> 00:41:16,900
中文字幕
So this f has a different meaning.

932
00:41:16,900 --> 00:41:18,070
中文字幕
This is f as in float.

933
00:41:18,070 --> 00:41:20,570
中文字幕
The f to the left is in format.

934
00:41:20,570 --> 00:41:22,020
中文字幕
So let me go ahead and run this.

935
00:41:22,020 --> 00:41:23,590
中文字幕
1 divided by 10.

936
00:41:23,590 --> 00:41:25,220
中文字幕
And OK, still looking pretty good.

937
00:41:25,220 --> 00:41:28,870
中文字幕
Let's do maybe three decimal places, save that, rerun it.

938
00:41:28,870 --> 00:41:30,430
中文字幕
1 divided by 10.

939
00:41:30,430 --> 00:41:31,490
中文字幕
Still pretty good.

940
00:41:31,490 --> 00:41:33,040
中文字幕
Let's get a little ambitious.

941
00:41:33,040 --> 00:41:37,870
中文字幕
Let's do it 50 decimal places out, 1 divided by 10, and damn it.

942
00:41:37,870 --> 00:41:40,690
中文字幕
Python has not fixed this fundamental problem.

943
00:41:40,690 --> 00:41:42,400
中文字幕
So we describe this problem as what?

944
00:41:45,590 --> 00:41:50,090
中文字幕
What's the sort of buzzword here to sort of explain or forgive this issue?

945
00:41:51,190 --> 00:41:53,690
中文字幕
This is an integer overflow, related in spirit.

946
00:41:53,690 --> 00:41:55,610
中文字幕
Integer overflow literally happens when you're

947
00:41:55,610 --> 00:41:58,580
中文字幕
doing lots of addition and something's rolling over from a big value

948
00:41:58,580 --> 00:42:01,160
中文字幕
to a small or even a negative.

949
00:42:01,160 --> 00:42:01,980
中文字幕
Similar in spirit.

950
00:42:01,980 --> 00:42:02,480
中文字幕
Yeah?

951
00:42:08,170 --> 00:42:08,920
中文字幕
Yeah.

952
00:42:08,920 --> 00:42:12,320
中文字幕
If you want to have an infinite amount of precision all the way out,

953
00:42:12,320 --> 00:42:13,910
中文字幕
you need an infinite amount of memory.

954
00:42:13,910 --> 00:42:16,730
中文字幕
And no Mac or PC or phone has an infinite amount of memory.

955
00:42:16,730 --> 00:42:20,510
中文字幕
At some point, a line is drawn in the sand and you can only be so precise.

956
00:42:20,510 --> 00:42:24,230
中文字幕
And so imprecision was the analog in the floating point world

957
00:42:24,230 --> 00:42:27,290
中文字幕
to overflow, recall, where if you only have a finite number of bits

958
00:42:27,290 --> 00:42:29,060
中文字幕
you can do really well up to a point.

959
00:42:29,060 --> 00:42:32,510
中文字幕
But eventually, the computer's got to estimate that value for you

960
00:42:32,510 --> 00:42:35,370
中文字幕
because you can't represent an infinite number of values.

961
00:42:35,370 --> 00:42:38,960
中文字幕
So this is to say Python is just as limited, fundamentally,

962
00:42:38,960 --> 00:42:40,910
中文字幕
as some other languages like C. So we've not

963
00:42:40,910 --> 00:42:42,410
中文字幕
gotten rid of all of those problems.

964
00:42:42,410 --> 00:42:45,690
中文字幕
But frankly, in the world of data science and analytics,

965
00:42:45,690 --> 00:42:47,690
中文字幕
it's certainly important precise mathematics.

966
00:42:47,690 --> 00:42:49,710
中文字幕
So there are solutions to this problem.

967
00:42:49,710 --> 00:42:52,070
中文字幕
But it requires special libraries, typically,

968
00:42:52,070 --> 00:42:55,070
中文字幕
importing something that allows you to use as much memory

969
00:42:55,070 --> 00:42:58,560
中文字幕
as you want more than just the default amount of memory.

970
00:42:58,560 --> 00:43:00,350
中文字幕
So that problem there still exists.

971
00:43:00,350 --> 00:43:03,470
中文字幕
Let me go ahead and open up one other example here.

972
00:43:03,470 --> 00:43:07,730
中文字幕
And in fact, in C, you'll recall that we had this example here.

973
00:43:07,730 --> 00:43:13,240
中文字幕
In C we had a program called overflow.c.

974
00:43:13,240 --> 00:43:16,330
中文字幕
And notice that this code in C from a few weeks

975
00:43:16,330 --> 00:43:19,910
中文字幕
back just multiplied i by 2, by 2, by 2.

976
00:43:19,910 --> 00:43:21,790
中文字幕
So it was doing exponentiation, so to speak--

977
00:43:21,790 --> 00:43:25,000
中文字幕
1 to 2 to 4 to 8, 16, 32, 64, and so forth.

978
00:43:25,000 --> 00:43:27,670
中文字幕
What happened if we waited long enough and watched

979
00:43:27,670 --> 00:43:30,910
中文字幕
this program a few weeks back?

980
00:43:30,910 --> 00:43:32,680
中文字幕
You go to 5 billion instead of--

981
00:43:32,680 --> 00:43:36,840
中文字幕
Yeah, we hit roughly 5 billion or 4 billion--

982
00:43:36,840 --> 00:43:39,970
中文字幕
or rather, we technically hit, I think, 2 billion, and then it rolled over.

983
00:43:39,970 --> 00:43:41,410
中文字幕
And it actually created a problem.

984
00:43:41,410 --> 00:43:42,230
中文字幕
So let me actually do this.

985
00:43:42,230 --> 00:43:44,620
中文字幕
Let me go ahead and make overflow so we can demonstrate

986
00:43:44,620 --> 00:43:47,710
中文字幕
the points that you made earlier about integer overflow, which is, indeed,

987
00:43:47,710 --> 00:43:48,430
中文字幕
this one.

988
00:43:48,430 --> 00:43:50,860
中文字幕
Let me go ahead now and run overflow.

989
00:43:50,860 --> 00:43:54,290
中文字幕
I'll expand my window just so we can fit a little more in the screen.

990
00:43:54,290 --> 00:43:55,860
中文字幕
And as this runs--

991
00:43:55,860 --> 00:43:57,490
中文字幕
whoops, let me fix this.

992
00:43:57,490 --> 00:43:59,280
中文字幕
Here we go.

993
00:43:59,280 --> 00:44:01,000
中文字幕
Let me go ahead and make overflow.

994
00:44:01,000 --> 00:44:06,290
中文字幕
And now 1, 2, 4, 8, 16, 32, and so forth.

995
00:44:06,290 --> 00:44:08,590
中文字幕
It's a little slow to start, but doubling and doubling

996
00:44:08,590 --> 00:44:11,030
中文字幕
is going to get us up to a big value pretty quickly.

997
00:44:11,030 --> 00:44:13,660
中文字幕
This is indeed going to overflow once we hit roughly 2 billion.

998
00:44:13,660 --> 00:44:14,410
中文字幕
Why?

999
00:44:14,410 --> 00:44:16,970
中文字幕
Why two billion, give or take?

1000
00:44:16,970 --> 00:44:18,700
中文字幕
Why that value in C?

1001
00:44:18,700 --> 00:44:19,870
中文字幕
Yeah?

1002
00:44:21,950 --> 00:44:23,830
中文字幕
Yeah, that's how much an integer

1003
00:44:23,830 --> 00:44:27,700
中文字幕
can store because we're calling C. An int is typically 32 bits or 4 bytes.

1004
00:44:27,700 --> 00:44:31,120
中文字幕
And with 32 bits, you can represent four billion possible values.

1005
00:44:31,120 --> 00:44:34,090
中文字幕
And if half of those values are positive and half of them are negative,

1006
00:44:34,090 --> 00:44:37,720
中文字幕
it stands to reason that the highest you can count is roughly 2 billion.

1007
00:44:37,720 --> 00:44:41,630
中文字幕
And indeed, once we try to count up just doubling one billion, we overflow.

1008
00:44:41,630 --> 00:44:44,830
中文字幕
So to your point earlier, overflow is still an issue,

1009
00:44:44,830 --> 00:44:46,540
中文字幕
but in the context of integers.

1010
00:44:46,540 --> 00:44:49,000
中文字幕
But now let's try a Python version of this.

1011
00:44:49,000 --> 00:44:52,880
中文字幕
Let me go ahead now and open up overflow.py,

1012
00:44:52,880 --> 00:44:54,470
中文字幕
which is a program I wrote in advance.

1013
00:44:54,470 --> 00:44:56,420
中文字幕
It's on the course's website, as always, if you

1014
00:44:56,420 --> 00:44:58,300
中文字幕
want to take a look more closely.

1015
00:44:58,300 --> 00:45:04,240
中文字幕
And if I go into this file in weeks one, overflow.py, we see this code.

1016
00:45:04,240 --> 00:45:05,500
中文字幕
So it's almost the same.

1017
00:45:05,500 --> 00:45:07,620
中文字幕
But notice I'm using another library that we've not

1018
00:45:07,620 --> 00:45:09,590
中文字幕
seen before, from time import sleep.

1019
00:45:09,590 --> 00:45:10,340
中文字幕
It's kind of cute.

1020
00:45:10,340 --> 00:45:12,000
中文字幕
So this allows me to sleep for a second.

1021
00:45:12,000 --> 00:45:14,130
中文字幕
That's going to get tedious quickly, but that's OK.

1022
00:45:14,130 --> 00:45:15,160
中文字幕
Let's do this real fast.

1023
00:45:15,160 --> 00:45:18,580
中文字幕
If I go into the source six directory, weeks one,

1024
00:45:18,580 --> 00:45:23,530
中文字幕
and run Python of overflow.py, it's the same function-- or same program,

1025
00:45:23,530 --> 00:45:24,540
中文字幕
functionally.

1026
00:45:24,540 --> 00:45:26,500
中文字幕
But honestly, this is getting a little tedious.

1027
00:45:26,500 --> 00:45:31,090
中文字幕
Let's go ahead and not sleep for a second every time, save and reload.

1028
00:45:31,090 --> 00:45:32,610
中文字幕
Let's just run the thing.

1029
00:45:32,610 --> 00:45:35,800
中文字幕
Whew, look at it go.

1030
00:45:35,800 --> 00:45:36,520
中文字幕
Only up there.

1031
00:45:36,520 --> 00:45:38,440
中文字幕
Look up there.

1032
00:45:38,440 --> 00:45:42,070
中文字幕
What's it doing differently?

1033
00:45:42,070 --> 00:45:44,380
中文字幕
It's counting a lot higher than 2 billion.

1034
00:45:44,380 --> 00:45:47,380
中文字幕
So what might you infer about integers in Python?

1035
00:45:48,670 --> 00:45:50,140
中文字幕
Say again?

1036
00:45:50,140 --> 00:45:54,250
中文字幕
An integer is defined to be quite a number of bits.

1037
00:45:54,250 --> 00:45:57,090
中文字幕
OK, an integer is defined to be quite a number of bits.

1038
00:45:57,090 --> 00:45:58,650
中文字幕
And indeed, that's the case.

1039
00:45:58,650 --> 00:46:00,030
中文字幕
Python is not actually this slow.

1040
00:46:00,030 --> 00:46:02,940
中文字幕
It's because we're running a web based IDE and the internet itself

1041
00:46:02,940 --> 00:46:03,900
中文字幕
is a little slow.

1042
00:46:03,900 --> 00:46:06,890
中文字幕
And so what's happening here is just the internet is getting in the way.

1043
00:46:06,890 --> 00:46:10,620
中文字幕
But suffice it to say that Python is counting up way, way higher than C was.

1044
00:46:10,620 --> 00:46:13,170
中文字幕
And that's the power you get by just using larger data types.

1045
00:46:13,170 --> 00:46:16,470
中文字幕
We could have done this in C. We could have used longs, for instance.

1046
00:46:16,470 --> 00:46:20,260
中文字幕
But notice that with Python you just get more by default out of the box.

1047
00:46:20,260 --> 00:46:22,310
中文字幕
Let's go ahead and take a five minute break here.

1048
00:46:22,310 --> 00:46:24,470
中文字幕
And when we resume, we'll introduce some more syntax

1049
00:46:24,470 --> 00:46:25,950
中文字幕
and solve some more problems.

1050
00:46:25,950 --> 00:46:28,950
中文字幕
All right, so let's take a look at a few other examples

1051
00:46:28,950 --> 00:46:31,920
中文字幕
that are comparable to what we did back in week one and look at a few

1052
00:46:31,920 --> 00:46:34,440
中文字幕
from week two and three and really take a look

1053
00:46:34,440 --> 00:46:37,770
中文字幕
not just at the syntax, ultimately, but some of the features of Python.

1054
00:46:37,770 --> 00:46:40,710
中文字幕
And of course, we need the ability to express ourselves conditionally

1055
00:46:40,710 --> 00:46:42,480
中文字幕
or logically with control flow.

1056
00:46:42,480 --> 00:46:44,340
中文字幕
And so let me propose a quick program here

1057
00:46:44,340 --> 00:46:47,760
中文字幕
that we'll just call conditions.py, reminiscent of conditions.c

1058
00:46:47,760 --> 00:46:48,850
中文字幕
some time ago.

1059
00:46:48,850 --> 00:46:52,560
中文字幕
Let me go ahead and import from CS50 getInt this time

1060
00:46:52,560 --> 00:46:56,530
中文字幕
and get myself another x with getInt x from the user.

1061
00:46:56,530 --> 00:47:00,260
中文字幕
Then let me go ahead and ask them for getInt y from the user.

1062
00:47:00,260 --> 00:47:02,220
中文字幕
And then let me go ahead and just compare them.

1063
00:47:02,220 --> 00:47:04,830
中文字幕
And so per our comparison with Scratch a bit ago,

1064
00:47:04,830 --> 00:47:08,220
中文字幕
I can simply say if x is less than y, then go ahead

1065
00:47:08,220 --> 00:47:14,090
中文字幕
and print out, for instance, print x is less than y, just as we did weeks ago.

1066
00:47:14,090 --> 00:47:16,980
中文字幕
Elif if x is greater than y, we can go ahead

1067
00:47:16,980 --> 00:47:20,610
中文字幕
and print out x is greater than y.

1068
00:47:20,610 --> 00:47:23,160
中文字幕
And then we can still have a third condition, else, just

1069
00:47:23,160 --> 00:47:26,310
中文字幕
like in C, where we print out, for instance, the logical conclusion.

1070
00:47:26,310 --> 00:47:28,440
中文字幕
x is equal to y.

1071
00:47:28,440 --> 00:47:30,330
中文字幕
So just to point out some of the differences,

1072
00:47:30,330 --> 00:47:32,400
中文字幕
indentation is ever so important now.

1073
00:47:32,400 --> 00:47:33,850
中文字幕
And it's got to be consistent.

1074
00:47:33,850 --> 00:47:35,400
中文字幕
You can't have four spaces and three.

1075
00:47:35,400 --> 00:47:37,540
中文字幕
You've got to have, for instance, four all the way.

1076
00:47:37,540 --> 00:47:39,690
中文字幕
Notice that I've got the colons consistently there.

1077
00:47:39,690 --> 00:47:44,260
中文字幕
But notice that I don't need the parentheses, either, anymore.

1078
00:47:44,260 --> 00:47:46,900
中文字幕
And with Python, there's sort of a buzzword, Pythonic.

1079
00:47:46,900 --> 00:47:48,930
中文字幕
There is a Pythonic way of doing things.

1080
00:47:48,930 --> 00:47:53,230
中文字幕
You can have parentheses around x, less than y, or x greater than y,

1081
00:47:53,230 --> 00:47:56,600
中文字幕
just like in C. But it doesn't add anything logically, arguably.

1082
00:47:56,600 --> 00:47:58,560
中文字幕
And if it doesn't make your code more readable,

1083
00:47:58,560 --> 00:48:00,990
中文字幕
don't clutter your code with additional characters.

1084
00:48:00,990 --> 00:48:02,820
中文字幕
And so that's a general rule of thumb now.

1085
00:48:02,820 --> 00:48:06,090
中文字幕
Python is much more trim when it comes to syntax, only

1086
00:48:06,090 --> 00:48:08,890
中文字幕
introducing it when it really solves a problem, which in this case,

1087
00:48:08,890 --> 00:48:09,710
中文字幕
it doesn't really.

1088
00:48:09,710 --> 00:48:10,710
中文字幕
Yeah?

1089
00:48:10,710 --> 00:48:12,760
中文字幕
Quick question, the lines ,,

1090
00:48:12,760 --> 00:48:15,550
中文字幕
those are grouped right together, one to the next, one to the next,

1091
00:48:15,550 --> 00:48:16,510
中文字幕
and one to the next.

1092
00:48:16,510 --> 00:48:18,640
中文字幕
If you were to put an additional line between them,

1093
00:48:18,640 --> 00:48:19,960
中文字幕
would that break the code?

1094
00:48:19,960 --> 00:48:20,770
中文字幕
No, not at all.

1095
00:48:20,770 --> 00:48:23,080
中文字幕
I can have as much whitespace vertically as I want if.

1096
00:48:23,080 --> 00:48:25,210
中文字幕
I want to add some comments, indeed, I can do that.

1097
00:48:25,210 --> 00:48:27,760
中文字幕
And why don't we do that, in fact, because the commenting syntax

1098
00:48:27,760 --> 00:48:29,130
中文字幕
for Python is a little different.

1099
00:48:29,130 --> 00:48:31,310
中文字幕
In C, we were in the habit of doing slash slash.

1100
00:48:31,310 --> 00:48:33,190
中文字幕
Python, it's actually a little more succinct.

1101
00:48:33,190 --> 00:48:34,510
中文字幕
You can just use a single hash.

1102
00:48:34,510 --> 00:48:37,270
中文字幕
And you can say gets x from user here.

1103
00:48:37,270 --> 00:48:39,860
中文字幕
I can say get y from user here.

1104
00:48:39,860 --> 00:48:42,550
中文字幕
And then I can say something like compare x and y.

1105
00:48:42,550 --> 00:48:44,890
中文字幕
And if I really wanted to, I could put comments in here.

1106
00:48:44,890 --> 00:48:46,150
中文字幕
That is perfectly fine.

1107
00:48:46,150 --> 00:48:49,420
中文字幕
But I'll just keep it more compact with this particular example.

1108
00:48:49,420 --> 00:48:54,740
中文字幕
So any questions on the conditional syntax or what we've just done here?

1109
00:48:54,740 --> 00:48:56,980
中文字幕
All right, let Me whip up another example,

1110
00:48:56,980 --> 00:48:59,340
中文字幕
this time doing some comparisons.

1111
00:48:59,340 --> 00:49:02,190
中文字幕
This time, let me create a file called answer.py,

1112
00:49:02,190 --> 00:49:05,700
中文字幕
which is reminiscent of a quick example we did weeks ago called answer.c.

1113
00:49:05,700 --> 00:49:09,630
中文字幕
Let me go ahead and from CS50 import getString.

1114
00:49:09,630 --> 00:49:12,210
中文字幕
And this time, let me go ahead and declare

1115
00:49:12,210 --> 00:49:15,090
中文字幕
a variable, C. And let me go ahead and get a string from the user--

1116
00:49:15,090 --> 00:49:18,030
中文字幕
whoops-- get a string from the user for their answer

1117
00:49:18,030 --> 00:49:19,770
中文字幕
to whatever question it is we care about.

1118
00:49:19,770 --> 00:49:22,890
中文字幕
And then if it's meant to be a yes/no answer, let's check for that.

1119
00:49:22,890 --> 00:49:28,840
中文字幕
If c equals equals y or c equals equals little y,

1120
00:49:28,840 --> 00:49:32,280
中文字幕
then go ahead and say, just for the sake of demonstration,

1121
00:49:32,280 --> 00:49:34,680
中文字幕
yes, because the human presumably meant that.

1122
00:49:34,680 --> 00:49:40,140
中文字幕
Elif c equals equals capital n or c equals equals little n,

1123
00:49:40,140 --> 00:49:43,320
中文字幕
then go ahead and print out, for instance, no.

1124
00:49:43,320 --> 00:49:47,320
中文字幕
So a short program, but what are some of the takeaways?

1125
00:49:47,320 --> 00:49:51,180
中文字幕
Well, what's different clearly among these lines, 5 through 8, versus C,

1126
00:49:51,180 --> 00:49:53,090
中文字幕
weeks ago?

1127
00:49:53,090 --> 00:49:53,660
中文字幕
Yeah.

1128
00:49:53,660 --> 00:49:55,330
中文字幕
For or you have to do--

1129
00:49:55,330 --> 00:49:58,310
中文字幕
Yeah, none of those stupid vertical bars or the ampersand

1130
00:49:58,310 --> 00:49:58,830
中文字幕
ampersand.

1131
00:49:58,830 --> 00:50:02,430
中文字幕
If you want to do something or or and it together, just say and and

1132
00:50:02,430 --> 00:50:05,580
中文字幕
or, much like Scratch, actually, some weeks ago.

1133
00:50:05,580 --> 00:50:08,970
中文字幕
Notice, too-- how are we comparing strings?

1134
00:50:08,970 --> 00:50:12,930
中文字幕
Turns out Python does not have chars, per se.

1135
00:50:12,930 --> 00:50:14,960
中文字幕
C did have chars, single characters.

1136
00:50:14,960 --> 00:50:16,380
中文字幕
Python only has strings.

1137
00:50:16,380 --> 00:50:19,100
中文字幕
It has strings, ints, floats, and then some fancier things,

1138
00:50:19,100 --> 00:50:20,190
中文字幕
but it doesn't have chars.

1139
00:50:20,190 --> 00:50:22,530
中文字幕
So that's why I am deliberately using string.

1140
00:50:22,530 --> 00:50:28,130
中文字幕
But when we use strings in C, how did we compare two strings?

1141
00:50:28,130 --> 00:50:31,960
中文字幕
Str comp, right, because of the whole annoying pointer comparison thing.

1142
00:50:31,960 --> 00:50:33,800
中文字幕
Well, it turns out now in Python if you want

1143
00:50:33,800 --> 00:50:37,280
中文字幕
to compare two strings character by character by character,

1144
00:50:37,280 --> 00:50:38,570
中文字幕
equal equals is back.

1145
00:50:38,570 --> 00:50:43,050
中文字幕
And it does exactly what you expect it to do, even if it's a full word.

1146
00:50:43,050 --> 00:50:47,780
中文字幕
So if you're actually checking for, for instance, yes or yes from the human,

1147
00:50:47,780 --> 00:50:50,630
中文字幕
you can still use equal equals, as well, even though it's

1148
00:50:50,630 --> 00:50:52,080
中文字幕
more than now one character.

1149
00:50:52,080 --> 00:50:53,530
中文字幕
So that's a wonderful feature, too.

1150
00:50:53,530 --> 00:50:56,000
中文字幕
And it just makes the code more readable and a lot easier

1151
00:50:56,000 --> 00:50:58,430
中文字幕
to write right out of the gate.

1152
00:50:58,430 --> 00:51:02,000
中文字幕
All right, so now recall that in C we spent a little while,

1153
00:51:02,000 --> 00:51:05,120
中文字幕
as well as in Scratch, taking a look at a few examples about coughing,

1154
00:51:05,120 --> 00:51:06,050
中文字幕
of all things.

1155
00:51:06,050 --> 00:51:08,000
中文字幕
And in fact, in Python and C--

1156
00:51:08,000 --> 00:51:09,530
中文字幕
rather, in Scratch and in C--

1157
00:51:09,530 --> 00:51:12,130
中文字幕
we did a zero example that looked a little like this.

1158
00:51:12,130 --> 00:51:14,990
中文字幕
If you want to simulate the notion of Scratch the cat coughing,

1159
00:51:14,990 --> 00:51:16,440
中文字幕
you might, of course, do this.

1160
00:51:16,440 --> 00:51:19,070
中文字幕
And then if he's going to cough three times, you might do this.

1161
00:51:19,070 --> 00:51:22,020
中文字幕
And we ran this and it just did cough, cough, cough on the screen.

1162
00:51:22,020 --> 00:51:24,320
中文字幕
I won't bother running it because it will just do that.

1163
00:51:24,320 --> 00:51:26,810
中文字幕
But this was bad design we claimed weeks ago.

1164
00:51:26,810 --> 00:51:28,700
中文字幕
What was the gist of why this is bad design?

1165
00:51:31,260 --> 00:51:32,850
中文字幕
I mean, I literally copied and pasted.

1166
00:51:32,850 --> 00:51:35,870
中文字幕
And the odds are if you're ever doing that in CS50 or in programming

1167
00:51:35,870 --> 00:51:38,000
中文字幕
more generally, you're probably being a little lazy

1168
00:51:38,000 --> 00:51:39,290
中文字幕
and there's a better way to do it.

1169
00:51:39,290 --> 00:51:41,030
中文字幕
And it's a more maintainable way to do it.

1170
00:51:41,030 --> 00:51:45,260
中文字幕
So of course, we introduced weeks ago, both in Scratch and in C,

1171
00:51:45,260 --> 00:51:49,610
中文字幕
the ability to in cough one, this time, do a loop.

1172
00:51:49,610 --> 00:51:53,240
中文字幕
And I can do a loop slightly differently in Python and in C. But for i

1173
00:51:53,240 --> 00:51:57,000
中文字幕
in the range of 3, go ahead and print out cough.

1174
00:51:57,000 --> 00:51:59,210
中文字幕
So the syntax for the for loop is a little different.

1175
00:51:59,210 --> 00:52:01,080
中文字幕
But it's pretty straightforward, nonetheless,

1176
00:52:01,080 --> 00:52:04,340
中文字幕
once you remember that you use for, variable name, then

1177
00:52:04,340 --> 00:52:08,560
中文字幕
the preposition in, and then the word range with a parenthesis and its--

1178
00:52:08,560 --> 00:52:10,610
中文字幕
parentheses and the value you want to care about.

1179
00:52:10,610 --> 00:52:16,240
中文字幕
But then we saw an opportunity, recall, to actually abstract coughing away.

1180
00:52:16,240 --> 00:52:19,490
中文字幕
Coughing, at least in our textual form, is just the act of printing something.

1181
00:52:19,490 --> 00:52:22,310
中文字幕
So we introduced in version two some time ago,

1182
00:52:22,310 --> 00:52:25,340
中文字幕
the following approach in cough two.

1183
00:52:25,340 --> 00:52:28,850
中文字幕
I instead defined a function called cough that did the coughing for me.

1184
00:52:28,850 --> 00:52:30,440
中文字幕
And we've not seen this yet in Python.

1185
00:52:30,440 --> 00:52:33,350
中文字幕
So how do you define a function in Python called cough?

1186
00:52:33,350 --> 00:52:36,680
中文字幕
Put another way, how do you make your own custom puzzle piece,

1187
00:52:36,680 --> 00:52:38,300
中文字幕
just as we did in Scratch?

1188
00:52:38,300 --> 00:52:40,250
中文字幕
Well, you define it with def.

1189
00:52:40,250 --> 00:52:42,390
中文字幕
And then you have it do exactly what you want

1190
00:52:42,390 --> 00:52:45,690
中文字幕
it to do by just indenting the lines of code that belong to that function.

1191
00:52:45,690 --> 00:52:47,270
中文字幕
So there's no return value.

1192
00:52:47,270 --> 00:52:49,200
中文字幕
There's no need for an input at the moment.

1193
00:52:49,200 --> 00:52:50,510
中文字幕
But we do have the colon.

1194
00:52:50,510 --> 00:52:51,680
中文字幕
And we have the indentation.

1195
00:52:51,680 --> 00:52:53,510
中文字幕
No curly braces, nothing else.

1196
00:52:53,510 --> 00:52:55,230
中文字幕
How do I now use this function?

1197
00:52:55,230 --> 00:52:59,480
中文字幕
Well, here's where we have a few options stylistically in the program.

1198
00:52:59,480 --> 00:53:03,890
中文字幕
The simplest way to call this function would be quite simply like this.

1199
00:53:03,890 --> 00:53:09,710
中文字幕
Go ahead and for i in range 3, go ahead now and cough.

1200
00:53:09,710 --> 00:53:11,240
中文字幕
And this should look a little weird.

1201
00:53:11,240 --> 00:53:12,770
中文字幕
It looks, indeed, a little sloppy.

1202
00:53:12,770 --> 00:53:13,860
中文字幕
But let's see if it works.

1203
00:53:13,860 --> 00:53:17,780
中文字幕
So if I go ahead and run Python of coughtwo.py,

1204
00:53:17,780 --> 00:53:19,790
中文字幕
it seems to cough, cough, cough.

1205
00:53:19,790 --> 00:53:24,160
中文字幕
But I say this is a little weird because what am I

1206
00:53:24,160 --> 00:53:28,590
中文字幕
doing that's very different now from C?

1207
00:53:28,590 --> 00:53:29,980
中文字幕
There's no what?

1208
00:53:29,980 --> 00:53:31,690
中文字幕
There's no main function.

1209
00:53:31,690 --> 00:53:34,740
中文字幕
I just have some code right here on the left of the screen.

1210
00:53:34,740 --> 00:53:36,200
中文字幕
And yet, I do have a function here.

1211
00:53:36,200 --> 00:53:37,660
中文字幕
And in Python, this is OK.

1212
00:53:37,660 --> 00:53:40,000
中文字幕
Because you're using an interpreter and reading the file

1213
00:53:40,000 --> 00:53:43,390
中文字幕
top to bottom, left to right, you don't strictly need a function called main.

1214
00:53:43,390 --> 00:53:45,610
中文字幕
It's just going to interpret all of your code.

1215
00:53:45,610 --> 00:53:47,810
中文字幕
And when it's seen the definition of a function, OK.

1216
00:53:47,810 --> 00:53:49,060
中文字幕
It's going to say, OK, got it.

1217
00:53:49,060 --> 00:53:50,830
中文字幕
I now know what the verb cough means.

1218
00:53:50,830 --> 00:53:53,890
中文字幕
I will do this anytime I see it down here.

1219
00:53:53,890 --> 00:53:56,120
中文字幕
But we're going to run into a problem.

1220
00:53:56,120 --> 00:53:58,870
中文字幕
And if, indeed, I did what my first instinct was,

1221
00:53:58,870 --> 00:54:02,620
中文字幕
which was to put the logic, the main part of my program at the top

1222
00:54:02,620 --> 00:54:05,240
中文字幕
and to define cough down here, let's see what happens.

1223
00:54:05,240 --> 00:54:06,160
中文字幕
Let me zoom out.

1224
00:54:06,160 --> 00:54:08,800
中文字幕
Let me go ahead and rerun coughtwo.py.

1225
00:54:08,800 --> 00:54:11,410
中文字幕
And now we start to see the first of our error messages.

1226
00:54:11,410 --> 00:54:14,890
中文字幕
And they're going to look just as cryptic at first glance as is clang

1227
00:54:14,890 --> 00:54:15,730
中文字幕
and make were.

1228
00:54:15,730 --> 00:54:19,640
中文字幕
Arrested assured that help 50 can help with Python error messages, as well.

1229
00:54:19,640 --> 00:54:23,860
中文字幕
But let's just try to parse what I do understand. cough2.py, line two

1230
00:54:23,860 --> 00:54:26,440
中文字幕
in module whatever that is, name error.

1231
00:54:26,440 --> 00:54:28,550
中文字幕
Name cough is not defined.

1232
00:54:28,550 --> 00:54:29,830
中文字幕
So what's your gut here?

1233
00:54:29,830 --> 00:54:31,180
中文字幕
What is that really--

1234
00:54:31,180 --> 00:54:32,890
中文字幕
what's the explanation for that error?

1235
00:54:32,890 --> 00:54:34,600
中文字幕
Because cough is clearly defined--

1236
00:54:34,600 --> 00:54:37,660
中文字幕
literally with the define def verb--

1237
00:54:37,660 --> 00:54:40,550
中文字幕
right there on line four now.

1238
00:54:40,550 --> 00:54:41,050
中文字幕
What--

1239
00:54:41,050 --> 00:54:41,980
中文字幕
You're calling cough before it's defined.

1240
00:54:41,980 --> 00:54:44,520
中文字幕
Yeah, I'm trying to call it before it's defined.

1241
00:54:44,520 --> 00:54:46,700
中文字幕
Python is trying to take me very literally.

1242
00:54:46,700 --> 00:54:48,790
中文字幕
And it's going to do top to bottom, left to right.

1243
00:54:48,790 --> 00:54:50,790
中文字幕
And if it doesn't see until the bottom something

1244
00:54:50,790 --> 00:54:53,680
中文字幕
it's supposed to be doing at the top, it's just not going to work.

1245
00:54:53,680 --> 00:54:56,430
中文字幕
So there is a solution to this and it starts to get a little ugly.

1246
00:54:56,430 --> 00:54:58,140
中文字幕
But it's a more generalized solution.

1247
00:54:58,140 --> 00:55:01,890
中文字幕
It turns out that even though main is not required in a Python program,

1248
00:55:01,890 --> 00:55:04,590
中文字幕
many programmers just create one nonetheless

1249
00:55:04,590 --> 00:55:06,780
中文字幕
to address this particular problem.

1250
00:55:06,780 --> 00:55:09,150
中文字幕
And they specifically do something like this--

1251
00:55:09,150 --> 00:55:13,290
中文字幕
def main-- and then below it they indent everything there.

1252
00:55:13,290 --> 00:55:18,390
中文字幕
And then you need one specific feature to solve this problem now.

1253
00:55:18,390 --> 00:55:21,960
中文字幕
I've now defined main and I've defined cough, which theoretically

1254
00:55:21,960 --> 00:55:24,540
中文字幕
solves this problem just as it did in C. There

1255
00:55:24,540 --> 00:55:26,280
中文字幕
is no notion of a prototype in Python.

1256
00:55:26,280 --> 00:55:30,280
中文字幕
That is not the solution to copy paste the name of the function up above.

1257
00:55:30,280 --> 00:55:33,820
中文字幕
But when I do this now, literally nothing happens.

1258
00:55:33,820 --> 00:55:35,920
中文字幕
But I did get rid of the error.

1259
00:55:35,920 --> 00:55:38,260
中文字幕
So just reason through this, perhaps.

1260
00:55:38,260 --> 00:55:40,430
中文字幕
Especially if you've never programmed Python before,

1261
00:55:40,430 --> 00:55:44,670
中文字幕
why might nothing now be happening?

1262
00:55:44,670 --> 00:55:45,790
中文字幕
Not calling main?

1263
00:55:45,790 --> 00:55:47,670
中文字幕
I'm not calling main, yeah.

1264
00:55:47,670 --> 00:55:49,010
中文字幕
So whereas in C--

1265
00:55:49,010 --> 00:55:53,630
中文字幕
and frankly, in Java, C++, and a few other languages-- main is special.

1266
00:55:53,630 --> 00:55:57,590
中文字幕
It just gets called by default. In Python, main is not special.

1267
00:55:57,590 --> 00:56:00,960
中文字幕
I've chosen this name main just because so many other languages use it,

1268
00:56:00,960 --> 00:56:02,840
中文字幕
but it has no special significance.

1269
00:56:02,840 --> 00:56:05,970
中文字幕
If you want to call main, you have to do it yourself.

1270
00:56:05,970 --> 00:56:08,090
中文字幕
And so this is a little weird, admittedly.

1271
00:56:08,090 --> 00:56:12,410
中文字幕
But you can literally do this down here because your code will be executed top

1272
00:56:12,410 --> 00:56:13,610
中文字幕
to bottom, left to right.

1273
00:56:13,610 --> 00:56:16,640
中文字幕
By the time line 10 is reached, both main has been defined

1274
00:56:16,640 --> 00:56:19,100
中文字幕
and cough has been defined, which means you're good to go.

1275
00:56:19,100 --> 00:56:23,630
中文字幕
So if I now go down here and run Python of cough2, now it actually works.

1276
00:56:23,630 --> 00:56:27,200
中文字幕
Now, as an aside, this is not Pythonic, if you will.

1277
00:56:27,200 --> 00:56:33,020
中文字幕
Most people would actually do this if the name equals equals main,

1278
00:56:33,020 --> 00:56:34,910
中文字幕
then do this.

1279
00:56:34,910 --> 00:56:38,180
中文字幕
This is for lower level reasons that let me wave my hand out for today.

1280
00:56:38,180 --> 00:56:40,930
中文字幕
But long story short, the addition of this cryptic-looking line

1281
00:56:40,930 --> 00:56:42,890
中文字幕
solves other problems that we're just not going

1282
00:56:42,890 --> 00:56:44,790
中文字幕
to trip over this week and probably next.

1283
00:56:44,790 --> 00:56:46,710
中文字幕
So this is the common way to do it.

1284
00:56:46,710 --> 00:56:49,730
中文字幕
But if you just ignore that, the effect of this cryptic-looking code

1285
00:56:49,730 --> 00:56:52,460
中文字幕
is just to call main yourself at the very bottom of your file.

1286
00:56:52,460 --> 00:56:54,350
中文字幕
So when we start writing more interesting programs,

1287
00:56:54,350 --> 00:56:55,920
中文字幕
this is just going to become conventional.

1288
00:56:55,920 --> 00:56:58,080
中文字幕
If you want to start writing functions and so forth,

1289
00:56:58,080 --> 00:57:00,560
中文字幕
odds are you'll benefit by writing a main function

1290
00:57:00,560 --> 00:57:02,120
中文字幕
and putting more code in there.

1291
00:57:02,120 --> 00:57:07,400
中文字幕
So let's do one final example with cough that actually now parameterizes

1292
00:57:07,400 --> 00:57:12,200
中文字幕
the code, just as we did weeks ago in Scratch and C. This will be cough3.py.

1293
00:57:12,200 --> 00:57:14,330
中文字幕
Let me start as I did just a little bit ago.

1294
00:57:14,330 --> 00:57:16,550
中文字幕
But suppose I want to achieve this effect.

1295
00:57:16,550 --> 00:57:20,780
中文字幕
I want the computer to cough three times by passing in an input.

1296
00:57:20,780 --> 00:57:23,900
中文字幕
I now do need to modify cough to take an input.

1297
00:57:23,900 --> 00:57:26,420
中文字幕
And in C, I would have said something like int n.

1298
00:57:26,420 --> 00:57:29,300
中文字幕
But you don't have to specify data types in Python,

1299
00:57:29,300 --> 00:57:32,150
中文字幕
you just have to specify the parameter name or the argument name.

1300
00:57:32,150 --> 00:57:33,510
中文字幕
So that's nice and simple.

1301
00:57:33,510 --> 00:57:36,680
中文字幕
And now down in here, in cough is where I should probably

1302
00:57:36,680 --> 00:57:41,270
中文字幕
say for i in the range of 3, do this.

1303
00:57:41,270 --> 00:57:42,440
中文字幕
But this isn't quite right.

1304
00:57:42,440 --> 00:57:44,700
中文字幕
What fix do I want to make here?

1305
00:57:44,700 --> 00:57:45,200
中文字幕
Yeah.

1306
00:57:45,200 --> 00:57:46,420
中文字幕
Now I can just pass in n.

1307
00:57:46,420 --> 00:57:48,920
中文字幕
So range is just a function that takes an argument that I've

1308
00:57:48,920 --> 00:57:51,150
中文字幕
been hard coding as three just because.

1309
00:57:51,150 --> 00:57:53,420
中文字幕
But you can generalize it with n, as well.

1310
00:57:53,420 --> 00:57:56,450
中文字幕
So now again, per our discussion of abstraction weeks and weeks

1311
00:57:56,450 --> 00:57:59,900
中文字幕
ago, do we have a sort of beautiful version of coughing,

1312
00:57:59,900 --> 00:58:01,970
中文字幕
even though it's looking way more cryptic.

1313
00:58:01,970 --> 00:58:04,220
中文字幕
But by step by step by step did we get to the point

1314
00:58:04,220 --> 00:58:07,100
中文字幕
of having a main function that takes an abstraction, cough.

1315
00:58:07,100 --> 00:58:08,420
中文字幕
Do it this many times.

1316
00:58:08,420 --> 00:58:11,370
中文字幕
Now the implementation details are hidden in this custom puzzle piece,

1317
00:58:11,370 --> 00:58:11,990
中文字幕
if you will.

1318
00:58:11,990 --> 00:58:14,600
中文字幕
And the two lines at the bottom just kick off

1319
00:58:14,600 --> 00:58:16,280
中文字幕
the whole execution of the program.

1320
00:58:16,280 --> 00:58:20,740
中文字幕
But that's the only stuff that's really Python-specific now.

1321
00:58:20,740 --> 00:58:21,710
中文字幕
Yeah?

1322
00:58:21,710 --> 00:58:27,550
中文字幕
Can we use the cough function on line 11 ??

1323
00:58:27,550 --> 00:58:31,150
中文字幕
Could use the cough function on line 11?

1324
00:58:31,150 --> 00:58:31,650
中文字幕
Yes.

1325
00:58:31,650 --> 00:58:37,310
中文字幕
You could absolutely just do this, for instance, and get rid of main again.

1326
00:58:37,310 --> 00:58:38,490
中文字幕
It's just a convention.

1327
00:58:38,490 --> 00:58:41,490
中文字幕
Once you start writing more sophisticated programs with functions,

1328
00:58:41,490 --> 00:58:45,540
中文字幕
you should probably introduce main just to keep it tidy.

1329
00:58:45,540 --> 00:58:49,330
中文字幕
With the .

1330
00:58:49,330 --> 00:58:50,710
中文字幕
You could do that.

1331
00:58:50,710 --> 00:58:53,410
中文字幕
Then you're starting to be non-Pythonic.

1332
00:58:53,410 --> 00:58:59,320
中文字幕
Like, yes, you could do cough3 but people would look askew at you

1333
00:58:59,320 --> 00:59:01,450
中文字幕
because it's just not done that way.

1334
00:59:01,450 --> 00:59:03,160
中文字幕
That's what Pythonic means.

1335
00:59:03,160 --> 00:59:04,990
中文字幕
Yeah, other questions?

1336
00:59:04,990 --> 00:59:08,940
中文字幕
You need to have the  come after the for i

1337
00:59:08,940 --> 00:59:15,840
中文字幕
in range n so that it knows what the cough is?

1338
00:59:15,840 --> 00:59:17,090
中文字幕
Not in this case.

1339
00:59:17,090 --> 00:59:22,460
中文字幕
So the order now is OK because first Python is seeing here's

1340
00:59:22,460 --> 00:59:23,420
中文字幕
the definition of main.

1341
00:59:23,420 --> 00:59:24,500
中文字幕
OK, I got it.

1342
00:59:24,500 --> 00:59:27,380
中文字幕
And then it's saying, here is the definition of cough, OK, I got it.

1343
00:59:27,380 --> 00:59:30,020
中文字幕
But it's not actually calling those functions yet.

1344
00:59:30,020 --> 00:59:33,170
中文字幕
The Python errors are thrown only at what's called runtime,

1345
00:59:33,170 --> 00:59:37,490
中文字幕
the running of the program's time, which means only when main is called

1346
00:59:37,490 --> 00:59:40,990
中文字幕
does Python actually execute line 4 and then see,

1347
00:59:40,990 --> 00:59:42,830
中文字幕
ooh, I need to call a function called cough.

1348
00:59:42,830 --> 00:59:45,350
中文字幕
But that's OK because it saw it earlier when it first

1349
00:59:45,350 --> 00:59:47,340
中文字幕
read the file top to bottom.

1350
00:59:47,340 --> 00:59:49,940
中文字幕
So it matters when the functions are called,

1351
00:59:49,940 --> 00:59:54,000
中文字幕
not where they appear, per se, in the file, the order in which they're

1352
00:59:54,000 --> 00:59:54,660
中文字幕
called.

1353
00:59:54,660 --> 00:59:57,300
中文字幕
Other questions?

1354
00:59:57,300 --> 01:00:00,720
中文字幕
All right, yes?

1355
01:00:00,720 --> 01:00:04,190
中文字幕
I don't know where you  from.

1356
01:00:04,190 --> 01:00:07,090
中文字幕
How do you define n as an integer?

1357
01:00:07,090 --> 01:00:09,010
中文字幕
How did I define n as an integer?

1358
01:00:09,010 --> 01:00:10,240
中文字幕
This is what's nice about Python.

1359
01:00:10,240 --> 01:00:12,030
中文字幕
If you want a variable or a parameter, just

1360
01:00:12,030 --> 01:00:14,950
中文字幕
start using it without mentioning its data type.

1361
01:00:14,950 --> 01:00:18,360
中文字幕
So the fact that I put n in parentheses in this function

1362
01:00:18,360 --> 01:00:21,960
中文字幕
means, hey, Python, let this function take an input called n.

1363
01:00:21,960 --> 01:00:24,840
中文字幕
And it can actually be any data type-- int, float, string,

1364
01:00:24,840 --> 01:00:26,010
中文字幕
or even something else.

1365
01:00:26,010 --> 01:00:28,950
中文字幕
It's up to me to use it responsibly as a number

1366
01:00:28,950 --> 01:00:32,560
中文字幕
and to call it responsibly with a number.

1367
01:00:32,560 --> 01:00:33,750
中文字幕
Good question.

1368
01:00:33,750 --> 01:00:34,380
中文字幕
Yeah?

1369
01:00:34,380 --> 01:00:36,920
中文字幕
So it's possible for a variable to change type?

1370
01:00:36,920 --> 01:00:39,050
中文字幕
It is, indeed, possible for a variable

1371
01:00:39,050 --> 01:00:40,910
中文字幕
to change type, a good observation.

1372
01:00:40,910 --> 01:00:45,560
中文字幕
So yes, Python is not as strongly-typed language, so to speak.

1373
01:00:45,560 --> 01:00:48,050
中文字幕
C is strongly-typed in that if you make something an int,

1374
01:00:48,050 --> 01:00:49,850
中文字幕
it is staying an int forever.

1375
01:00:49,850 --> 01:00:53,120
中文字幕
Python is loosely typed, whereby x can be an int initially.

1376
01:00:53,120 --> 01:00:55,580
中文字幕
But if you really want to turn it into a string, you can.

1377
01:00:55,580 --> 01:01:00,140
中文字幕
But the convention there would be, yes, you can do that, but don't do that.

1378
01:01:00,140 --> 01:01:02,780
中文字幕
So Python has the, frankly, the sort of arrogance

1379
01:01:02,780 --> 01:01:04,460
中文字幕
of being sort of an adult language.

1380
01:01:04,460 --> 01:01:06,560
中文字幕
Yes, you could do that, but just don't.

1381
01:01:06,560 --> 01:01:08,470
中文字幕
Why do we have to protect you from yourselves?

1382
01:01:08,470 --> 01:01:11,470
中文字幕
And so in that sense, you need to be a little more responsible about it.

1383
01:01:11,470 --> 01:01:13,310
中文字幕
But again, there are arguments both ways.

1384
01:01:13,310 --> 01:01:16,820
中文字幕
That induces potential bugs that C would catch for you.

1385
01:01:16,820 --> 01:01:19,820
中文字幕
And this is where humans start to disagree about the upsides

1386
01:01:19,820 --> 01:01:23,390
中文字幕
and downsides of languages, whether a language should be strongly or loosely

1387
01:01:23,390 --> 01:01:25,290
中文字幕
or not even typed at all.

1388
01:01:25,290 --> 01:01:26,670
中文字幕
A good observation.

1389
01:01:26,670 --> 01:01:29,330
中文字幕
So let's look at a paradigm that was super common in C

1390
01:01:29,330 --> 01:01:31,280
中文字幕
when we wanted to do something again and again

1391
01:01:31,280 --> 01:01:34,370
中文字幕
to see how it actually is a little differently done in Python now.

1392
01:01:34,370 --> 01:01:37,880
中文字幕
Let me go ahead and create a file called positive.py

1393
01:01:37,880 --> 01:01:40,950
中文字幕
and go ahead and write a program a little quickly here.

1394
01:01:40,950 --> 01:01:44,250
中文字幕
So from CS50, let me go ahead and import getInt,

1395
01:01:44,250 --> 01:01:46,030
中文字幕
so we can get integers from the user.

1396
01:01:46,030 --> 01:01:47,780
中文字幕
Let me go ahead and define a main function

1397
01:01:47,780 --> 01:01:53,940
中文字幕
that simply does i, which will be my variable, gets a positive int,

1398
01:01:53,940 --> 01:01:56,180
中文字幕
and asks the user, just as we did weeks ago,

1399
01:01:56,180 --> 01:01:58,880
中文字幕
if you'll recall, for a positive integer.

1400
01:01:58,880 --> 01:02:02,240
中文字幕
And then just goes ahead and very boringly prints it out.

1401
01:02:02,240 --> 01:02:03,860
中文字幕
So that's all this program does.

1402
01:02:03,860 --> 01:02:06,110
中文字幕
And let me go ahead and just from recollection--

1403
01:02:06,110 --> 01:02:08,930
中文字幕
though it's totally fine to copy/paste this cryptic-looking string,

1404
01:02:08,930 --> 01:02:13,590
中文字幕
we would just be remiss in not showing you how most people do this.

1405
01:02:13,590 --> 01:02:15,770
中文字幕
So if I do this, this is a complete program,

1406
01:02:15,770 --> 01:02:21,120
中文字幕
except for the fact that what does not exist yet?

1407
01:02:21,120 --> 01:02:24,260
中文字幕
Get positive int probably does not exist, just as it didn't in week one,

1408
01:02:24,260 --> 01:02:25,890
中文字幕
because we have to invent it ourselves.

1409
01:02:25,890 --> 01:02:28,030
中文字幕
Get int exists, but get positive int does not.

1410
01:02:28,030 --> 01:02:30,110
中文字幕
And just for demonstration's sake, let's try this.

1411
01:02:30,110 --> 01:02:33,360
中文字幕
Python of positive.py, notice we have name error get

1412
01:02:33,360 --> 01:02:34,790
中文字幕
positive int not defined.

1413
01:02:34,790 --> 01:02:36,280
中文字幕
OK, so we can fix that.

1414
01:02:36,280 --> 01:02:38,460
中文字幕
We can literally define, or def, it.

1415
01:02:38,460 --> 01:02:40,920
中文字幕
So get positive int.

1416
01:02:40,920 --> 01:02:42,670
中文字幕
It's going to take a prompt from the user,

1417
01:02:42,670 --> 01:02:45,870
中文字幕
just as it did weeks ago, the string that you want to show to him or her.

1418
01:02:45,870 --> 01:02:49,350
中文字幕
And now let me go ahead and get a positive integer.

1419
01:02:49,350 --> 01:02:51,930
中文字幕
What type of programming construct did we

1420
01:02:51,930 --> 01:02:55,060
中文字幕
use in C to do something again and again and again?

1421
01:02:55,060 --> 01:02:55,820
中文字幕
Loop.

1422
01:02:55,820 --> 01:02:58,030
中文字幕
A loop, for sure, but more specifically,

1423
01:02:58,030 --> 01:03:00,700
中文字幕
to do something at least once and then maybe again

1424
01:03:00,700 --> 01:03:02,610
中文字幕
and again and again if they don't cooperate?

1425
01:03:02,610 --> 01:03:03,280
中文字幕
While.

1426
01:03:03,280 --> 01:03:04,550
中文字幕
Do while.

1427
01:03:04,550 --> 01:03:06,730
中文字幕
No do while in Python.

1428
01:03:06,730 --> 01:03:09,750
中文字幕
So that handy feature for user input does not exist.

1429
01:03:09,750 --> 01:03:10,740
中文字幕
So that's fine.

1430
01:03:10,740 --> 01:03:12,370
中文字幕
We need to solve this just differently.

1431
01:03:12,370 --> 01:03:15,190
中文字幕
And honestly, in C, you could have solved that problem differently.

1432
01:03:15,190 --> 01:03:16,230
中文字幕
You don't need do while.

1433
01:03:16,230 --> 01:03:17,780
中文字幕
We could have taken it away from you.

1434
01:03:17,780 --> 01:03:19,070
中文字幕
C could take it away.

1435
01:03:19,070 --> 01:03:21,820
中文字幕
You could still solve every problem that we have in the past weeks

1436
01:03:21,820 --> 01:03:23,980
中文字幕
using a for loop or a while loop.

1437
01:03:23,980 --> 01:03:26,140
中文字幕
Do while just is a nice handy feature.

1438
01:03:26,140 --> 01:03:27,520
中文字幕
But we can simulate it.

1439
01:03:27,520 --> 01:03:30,070
中文字幕
And the Pythonic way of doing this is as follows.

1440
01:03:30,070 --> 01:03:32,860
中文字幕
Deliberately induce an infinite loop, because you

1441
01:03:32,860 --> 01:03:34,690
中文字幕
do want to loop potentially.

1442
01:03:34,690 --> 01:03:37,210
中文字幕
But the logic is going to be, give me an infinite loop

1443
01:03:37,210 --> 01:03:40,390
中文字幕
and I will break out of it when I'm ready to break out of it.

1444
01:03:40,390 --> 01:03:41,740
中文字幕
This would be the convention.

1445
01:03:41,740 --> 01:03:43,820
中文字幕
So while the following is true do this.

1446
01:03:43,820 --> 01:03:46,190
中文字幕
Go ahead and declare a variable called n.

1447
01:03:46,190 --> 01:03:48,440
中文字幕
Get an int from the user and pass in that same prompt.

1448
01:03:48,440 --> 01:03:50,440
中文字幕
So get int, we wrote-- the staff--

1449
01:03:50,440 --> 01:03:52,750
中文字幕
prompt is whatever I typed in up here.

1450
01:03:52,750 --> 01:03:55,480
中文字幕
So just copy/paste from the C version.

1451
01:03:55,480 --> 01:03:59,110
中文字幕
And then under what circumstances do I want to break out of this infinite loop

1452
01:03:59,110 --> 01:04:01,900
中文字幕
if the function is to be called to get positive int?

1453
01:04:02,770 --> 01:04:04,780
中文字幕
Yeah, so if n is greater than 0,

1454
01:04:04,780 --> 01:04:08,110
中文字幕
then I do have the keyword break still, just as I did in C.

1455
01:04:08,110 --> 01:04:09,790
中文字幕
I can break out of this loop.

1456
01:04:09,790 --> 01:04:13,480
中文字幕
And then once I do that, I can go ahead and just return n.

1457
01:04:13,480 --> 01:04:16,060
中文字幕
Or for that matter, I could condense this a little bit.

1458
01:04:16,060 --> 01:04:19,570
中文字幕
I could just return n immediately and tighten it just a little bit.

1459
01:04:19,570 --> 01:04:21,100
中文字幕
So multiple ways to do this.

1460
01:04:21,100 --> 01:04:23,980
中文字幕
Otherwise it's just going to loop and loop forever.

1461
01:04:23,980 --> 01:04:26,260
中文字幕
So let me go ahead now and run positive.py

1462
01:04:26,260 --> 01:04:32,920
中文字幕
through Python, positive integer like negative 1, maybe negative 2, 0, OK, 1.

1463
01:04:32,920 --> 01:04:34,450
中文字幕
And now it, indeed, co-operates.

1464
01:04:34,450 --> 01:04:36,000
中文字幕
So this is just a common paradigm.

1465
01:04:36,000 --> 01:04:38,980
中文字幕
This is the kind of thing when learning a new language that honestly

1466
01:04:38,980 --> 01:04:40,480
中文字幕
tends to hang people up initially.

1467
01:04:40,480 --> 01:04:42,760
中文字幕
You need to learn the JavaScript way of doing things.

1468
01:04:42,760 --> 01:04:44,840
中文字幕
You need to learn the Python way of doing things.

1469
01:04:44,840 --> 01:04:47,310
中文字幕
But then you start to notice these so-called design patterns.

1470
01:04:47,310 --> 01:04:49,240
中文字幕
Anytime in Python you want to do something again and again,

1471
01:04:49,240 --> 01:04:50,390
中文字幕
yes, you want to loop.

1472
01:04:50,390 --> 01:04:54,130
中文字幕
But if you want to do something definitely once and maybe again?

1473
01:04:54,130 --> 01:04:56,440
中文字幕
You still just use a loop, but you deliberately

1474
01:04:56,440 --> 01:05:00,170
中文字幕
induce, typically, an infinite loop, and just break out of it when you're ready.

1475
01:05:00,170 --> 01:05:01,630
中文字幕
So a very common approach.

1476
01:05:01,630 --> 01:05:06,670
中文字幕
So not everything translates literally from C back and forth.

1477
01:05:06,670 --> 01:05:10,630
中文字幕
Any questions then on that?

1478
01:05:10,630 --> 01:05:11,560
中文字幕
Yeah, in the back?

1479
01:05:11,560 --> 01:05:15,420
中文字幕
Is that something you just did with the while for loop,

1480
01:05:15,420 --> 01:05:19,290
中文字幕
is that  initializing a variable called 

1481
01:05:19,290 --> 01:05:23,350
中文字幕
to a negative number and then do while n is less than 0--

1482
01:05:23,350 --> 01:05:24,770
中文字幕
Really good question.

1483
01:05:24,770 --> 01:05:27,380
中文字幕
Is this approach preferable to instead declaring, maybe

1484
01:05:27,380 --> 01:05:32,220
中文字幕
in here, a variable that is equal to some known value, like zero or whatnot,

1485
01:05:32,220 --> 01:05:33,770
中文字幕
and then updating it?

1486
01:05:33,770 --> 01:05:36,830
中文字幕
Short answer, yes, because your approach, while correct,

1487
01:05:36,830 --> 01:05:40,170
中文字幕
is not as well-designed, arguably because it's just not necessary.

1488
01:05:40,170 --> 01:05:43,250
中文字幕
And the Pythonic way, and really the well-designed way

1489
01:05:43,250 --> 01:05:45,050
中文字幕
to do most things would be use as few lines

1490
01:05:45,050 --> 01:05:47,780
中文字幕
as you can so long as it's still readable and understandable,

1491
01:05:47,780 --> 01:05:50,780
中文字幕
which I would argue this is once you're comfortable with the syntax.

1492
01:05:50,780 --> 01:05:56,030
中文字幕
But this does bring up an interesting point about one other topic in C. Scope

1493
01:05:56,030 --> 01:05:59,480
中文字幕
has now gone out the window, at least as we previously saw it.

1494
01:05:59,480 --> 01:06:02,570
中文字幕
Scope referred to where a variable lives.

1495
01:06:02,570 --> 01:06:05,570
中文字幕
And we defined it essentially casually between two curly braces,

1496
01:06:05,570 --> 01:06:07,160
中文字幕
the most recently opened curly braces.

1497
01:06:07,160 --> 01:06:10,790
中文字幕
Well, no curly braces anymore so it turns out that variables by default

1498
01:06:10,790 --> 01:06:12,530
中文字幕
have function scope here.

1499
01:06:12,530 --> 01:06:17,600
中文字幕
So when you declare n on line 9, you can use it in Python on line 10.

1500
01:06:17,600 --> 01:06:18,350
中文字幕
And you know what?

1501
01:06:18,350 --> 01:06:22,880
中文字幕
You can even use it on line 12, even though it was declared inside

1502
01:06:22,880 --> 01:06:24,870
中文字幕
of this loop higher up.

1503
01:06:24,870 --> 01:06:27,170
中文字幕
So once you declare a variable on this line,

1504
01:06:27,170 --> 01:06:30,650
中文字幕
you can use it anywhere on a subsequent line within that same function.

1505
01:06:30,650 --> 01:06:33,570
中文字幕
So in some sense, it's a little sloppy that you're allowed to do this.

1506
01:06:33,570 --> 01:06:35,570
中文字幕
But on the other hand, it's very convenient

1507
01:06:35,570 --> 01:06:37,570
中文字幕
because you don't have to deal with those things

1508
01:06:37,570 --> 01:06:40,130
中文字幕
like declaring the variable up here just to use it down here.

1509
01:06:40,130 --> 01:06:42,980
中文字幕
So it's one less thing to think about.

1510
01:06:42,980 --> 01:06:46,250
中文字幕
All right, let's take a look just a few examples from week two

1511
01:06:46,250 --> 01:06:49,550
中文字幕
wherein we introduced arrays and strings more generally

1512
01:06:49,550 --> 01:06:51,620
中文字幕
to see what has changed now, as well.

1513
01:06:51,620 --> 01:06:56,330
中文字幕
You'll recall that in week two, perhaps, we had an example about capitalization.

1514
01:06:56,330 --> 01:06:59,540
中文字幕
And let me go ahead and look at the third version of that,

1515
01:06:59,540 --> 01:07:01,580
中文字幕
capitalize too, but convert it to Python.

1516
01:07:01,580 --> 01:07:04,190
中文字幕
The purpose in life was to take input from the user

1517
01:07:04,190 --> 01:07:06,800
中文字幕
and just capitalize every character therein.

1518
01:07:06,800 --> 01:07:08,660
中文字幕
So if I type in my name in all lowercase,

1519
01:07:08,660 --> 01:07:10,830
中文字幕
it should come back as all uppercase.

1520
01:07:10,830 --> 01:07:12,650
中文字幕
So from the CS50 library, let me go ahead

1521
01:07:12,650 --> 01:07:16,310
中文字幕
and import getString so that I have some input from the user.

1522
01:07:16,310 --> 01:07:20,660
中文字幕
Then let me go ahead and just get a string from the user, like their name.

1523
01:07:20,660 --> 01:07:24,530
中文字幕
And then I want to go ahead and capitalize everything.

1524
01:07:24,530 --> 01:07:27,470
中文字幕
So let me go ahead and do this.

1525
01:07:27,470 --> 01:07:29,090
中文字幕
And this is a fancy feature.

1526
01:07:29,090 --> 01:07:33,680
中文字幕
In C I would have done a for int i is zero i less than strlen.

1527
01:07:33,680 --> 01:07:36,850
中文字幕
I mean, you perhaps remember the paradigm for iterating over a string.

1528
01:07:36,850 --> 01:07:38,660
中文字幕
Python is just so much more pleasant.

1529
01:07:38,660 --> 01:07:40,820
中文字幕
For c in s--

1530
01:07:40,820 --> 01:07:46,280
中文字幕
that will induce a loop over the string s, giving you access to every character

1531
01:07:46,280 --> 01:07:49,040
中文字幕
at a time, calling that variable c.

1532
01:07:49,040 --> 01:07:52,940
中文字幕
And so what is it I want to do, just as a preliminary step,

1533
01:07:52,940 --> 01:07:56,820
中文字幕
a baby step, if you will, let's just print out c, just to see what happens.

1534
01:07:56,820 --> 01:08:01,280
中文字幕
Let me go ahead down here and do Python of capitalize two.

1535
01:08:01,280 --> 01:08:03,590
中文字幕
Let me go ahead and type in my name, all lowercase.

1536
01:08:03,590 --> 01:08:06,260
中文字幕
All right, and why is it showing up vertically

1537
01:08:06,260 --> 01:08:08,880
中文字幕
like that, one character per line?

1538
01:08:08,880 --> 01:08:10,440
中文字幕
Yeah, you get the free line--

1539
01:08:10,440 --> 01:08:11,990
中文字幕
free new line this time.

1540
01:08:11,990 --> 01:08:13,580
中文字幕
So let's see how you can disable that.

1541
01:08:13,580 --> 01:08:15,300
中文字幕
It's stupid looking, honestly.

1542
01:08:15,300 --> 01:08:20,060
中文字幕
But you say end equals quote unquote, thereby revealing a new feature

1543
01:08:20,060 --> 01:08:21,770
中文字幕
of Python that C does not have.

1544
01:08:21,770 --> 01:08:26,410
中文字幕
It turns out that Python has not only positional arguments, as it's called,

1545
01:08:26,410 --> 01:08:28,500
中文字幕
whereby you just pass in arguments between commas.

1546
01:08:28,500 --> 01:08:30,120
中文字幕
That's what we've been doing in C.

1547
01:08:30,120 --> 01:08:33,630
中文字幕
But Python also has named arguments, whereby

1548
01:08:33,630 --> 01:08:35,930
中文字幕
you can specify the name of the argument,

1549
01:08:35,930 --> 01:08:38,250
中文字幕
then an equals sign, then the value.

1550
01:08:38,250 --> 01:08:42,560
中文字幕
And the power of named arguments, even though this is a tiny example,

1551
01:08:42,560 --> 01:08:46,150
中文字幕
means that you can sometimes pass in your arguments in any order.

1552
01:08:46,150 --> 01:08:47,270
中文字幕
You don't have to remember.

1553
01:08:47,270 --> 01:08:49,520
中文字幕
You don't have to pull up CS50 manual or the man pages

1554
01:08:49,520 --> 01:08:52,640
中文字幕
to remember what is the order of all these darn arguments.

1555
01:08:52,640 --> 01:08:55,410
中文字幕
You can pass them in in any order, but by specifying

1556
01:08:55,410 --> 01:08:58,920
中文字幕
the name of the argument, an equals sign, and its value.

1557
01:08:58,920 --> 01:09:01,080
中文字幕
And in Python 2, you can have optional arguments.

1558
01:09:01,080 --> 01:09:02,880
中文字幕
Obviously, in all of the examples thus far,

1559
01:09:02,880 --> 01:09:06,180
中文字幕
I have never typed the word end and an equals sign yet.

1560
01:09:06,180 --> 01:09:09,890
中文字幕
But what Python does support is default values for arguments.

1561
01:09:09,890 --> 01:09:14,550
中文字幕
And so if you look in the documentation for Python, this is equivalent--

1562
01:09:14,550 --> 01:09:18,580
中文字幕
this cryptic looking sequence-- this is equivalent to the default behavior,

1563
01:09:18,580 --> 01:09:20,970
中文字幕
which is to type none of that at all.

1564
01:09:20,970 --> 01:09:25,080
中文字幕
End implies, for the print function, that you should end every line

1565
01:09:25,080 --> 01:09:26,600
中文字幕
with that default character.

1566
01:09:26,600 --> 01:09:28,680
中文字幕
Therefore, if you want to override it, you

1567
01:09:28,680 --> 01:09:31,800
中文字幕
can just change it to the empty string, quote unquote.

1568
01:09:31,800 --> 01:09:36,660
中文字幕
So if I now run this again and run it through with my name,

1569
01:09:36,660 --> 01:09:39,000
中文字幕
now I get it like that, one character at a time.

1570
01:09:39,000 --> 01:09:42,140
中文字幕
But you can do weird things, like ha ha ha ha ha--

1571
01:09:42,140 --> 01:09:43,640
中文字幕
not that you would.

1572
01:09:43,640 --> 01:09:45,060
中文字幕
I don't know why I went with that.

1573
01:09:45,060 --> 01:09:48,980
中文字幕
But I mean, that does the exact same thing

1574
01:09:48,980 --> 01:09:50,850
中文字幕
because you're just changing the line ending.

1575
01:09:50,850 --> 01:09:54,090
中文字幕
So don't do that, but do something else like this with it, instead.

1576
01:09:54,090 --> 01:09:57,330
中文字幕
So suppose I want to now capitalize the first character.

1577
01:09:57,330 --> 01:10:02,910
中文字幕
It turns out that strings in Python are more powerful than strings

1578
01:10:02,910 --> 01:10:05,190
中文字幕
in C. In C, there is no string.

1579
01:10:05,190 --> 01:10:06,160
中文字幕
That was a lie.

1580
01:10:06,160 --> 01:10:09,750
中文字幕
It's just a sequence of characters as referenced by an address in memory.

1581
01:10:09,750 --> 01:10:12,270
中文字幕
In Python, a string is an actual object.

1582
01:10:12,270 --> 01:10:13,410
中文字幕
It's a data structure.

1583
01:10:13,410 --> 01:10:16,470
中文字幕
And if you think about C, we had structs toward the very end of our look

1584
01:10:16,470 --> 01:10:19,230
中文字幕
at C, nodes and structs and student structures and the like.

1585
01:10:19,230 --> 01:10:22,020
中文字幕
A string in Python is like this container inside of which

1586
01:10:22,020 --> 01:10:23,610
中文字幕
somewhere are all of those characters.

1587
01:10:23,610 --> 01:10:27,540
中文字幕
But in that container or structure is also built-in functions,

1588
01:10:27,540 --> 01:10:29,850
中文字幕
features of a string that you can just call.

1589
01:10:29,850 --> 01:10:33,120
中文字幕
So in C, we would have said something like toUpper

1590
01:10:33,120 --> 01:10:36,180
中文字幕
and then passed as input to a function called toUpper

1591
01:10:36,180 --> 01:10:37,770
中文字幕
the character that we care about.

1592
01:10:37,770 --> 01:10:40,080
中文字幕
Python kind of flips the logic around.

1593
01:10:40,080 --> 01:10:43,170
中文字幕
Strings come with built-in functionality that

1594
01:10:43,170 --> 01:10:47,260
中文字幕
allow you to operate on the given character automatically.

1595
01:10:47,260 --> 01:10:50,160
中文字幕
So in Python, the syntax is actually the character itself.

1596
01:10:50,160 --> 01:10:52,530
中文字幕
Use the dot notation because it's a structure.

1597
01:10:52,530 --> 01:10:54,480
中文字幕
And then you can literally do--

1598
01:10:54,480 --> 01:10:55,080
中文字幕
oops.

1599
01:10:55,080 --> 01:10:58,330
中文字幕
You can literally do upper.

1600
01:10:58,330 --> 01:11:04,290
中文字幕
So this is to say, built into the string type in Python

1601
01:11:04,290 --> 01:11:07,940
中文字幕
is a bunch of features, one of which is a function called upper.

1602
01:11:07,940 --> 01:11:10,650
中文字幕
And the syntax with which you call it is the name of the variable

1603
01:11:10,650 --> 01:11:14,860
中文字幕
or the name of the string dot name of the function open paren, close paren.

1604
01:11:14,860 --> 01:11:16,240
中文字幕
And that's just now the paradigm.

1605
01:11:16,240 --> 01:11:17,580
中文字幕
There's no C type library.

1606
01:11:17,580 --> 01:11:19,470
中文字幕
There's no to upper or to lower.

1607
01:11:19,470 --> 01:11:22,020
中文字幕
Those features now built into the strings themselves.

1608
01:11:22,020 --> 01:11:24,630
中文字幕
And this is an example of encapsulation, or more

1609
01:11:24,630 --> 01:11:26,700
中文字幕
generally, object oriented programming, something

1610
01:11:26,700 --> 01:11:29,460
中文字幕
you'll explore if you take a class like CS51 that

1611
01:11:29,460 --> 01:11:33,930
中文字幕
bakes into the data types itself all of the relevant functionality.

1612
01:11:33,930 --> 01:11:37,420
中文字幕
It does not relegate them to another library.

1613
01:11:37,420 --> 01:11:41,020
中文字幕
So if I clean this up by just moving the cursor to the next line,

1614
01:11:41,020 --> 01:11:45,750
中文字幕
now hopefully you'll indeed see David typed out in all caps, the same idea

1615
01:11:45,750 --> 01:11:46,620
中文字幕
as before.

1616
01:11:46,620 --> 01:11:48,220
中文字幕
What about this length of a string?

1617
01:11:48,220 --> 01:11:50,370
中文字幕
This one is pretty trivial, but if I go in here,

1618
01:11:50,370 --> 01:11:54,100
中文字幕
let me go ahead and create a file called str len of .py.

1619
01:11:54,100 --> 01:11:57,660
中文字幕
If I want to see the length of a string, from CS50 import getString,

1620
01:11:57,660 --> 01:11:59,010
中文字幕
just as we did before.

1621
01:11:59,010 --> 01:12:01,800
中文字幕
Let me go ahead and get a string for myself, like my name again.

1622
01:12:01,800 --> 01:12:04,760
中文字幕
And then here, if I want to print the length of the string, in Python--

1623
01:12:04,760 --> 01:12:06,730
中文字幕
in C, you would say strlen.

1624
01:12:06,730 --> 01:12:08,190
中文字幕
In Python, it's a little different.

1625
01:12:08,190 --> 01:12:10,780
中文字幕
You actually just say len for length.

1626
01:12:10,780 --> 01:12:13,830
中文字幕
So if I go ahead and run this through strlen--

1627
01:12:13,830 --> 01:12:15,960
中文字幕
strlen-- type in my name.

1628
01:12:15,960 --> 01:12:17,340
中文字幕
Hopefully I, indeed, see five.

1629
01:12:17,340 --> 01:12:20,640
中文字幕
And there's no notion that you need to care about the backslash zero

1630
01:12:20,640 --> 01:12:23,410
中文字幕
in order to terminate the string.

1631
01:12:23,410 --> 01:12:25,110
中文字幕
Yeah?

1632
01:12:25,110 --> 01:12:31,400
中文字幕
So this upper 

1633
01:12:31,400 --> 01:12:32,900
中文字幕
No, in fact.

1634
01:12:32,900 --> 01:12:34,890
中文字幕
So that's a really good observation.

1635
01:12:34,890 --> 01:12:37,880
中文字幕
Let's rewind and actually improve upon this

1636
01:12:37,880 --> 01:12:42,380
中文字幕
rather than just translate it from what was our comparable example in C. Let

1637
01:12:42,380 --> 01:12:45,980
中文字幕
me go ahead here and actually say, you know what?

1638
01:12:45,980 --> 01:12:48,680
中文字幕
S gets s upper.

1639
01:12:48,680 --> 01:12:50,480
中文字幕
And then let me just print s, perhaps.

1640
01:12:50,480 --> 01:12:51,660
中文字幕
Let's see what happens.

1641
01:12:51,660 --> 01:12:55,100
中文字幕
Let me go back here and run Python of capitalize 2.

1642
01:12:55,100 --> 01:12:57,230
中文字幕
Enter David.

1643
01:12:57,230 --> 01:12:58,730
中文字幕
And it operates on the whole string.

1644
01:12:58,730 --> 01:12:59,350
中文字幕
Good intuition.

1645
01:12:59,350 --> 01:13:01,020
中文字幕
And honestly, I don't need to do this.

1646
01:13:01,020 --> 01:13:07,400
中文字幕
I could just say upper here and really trim this down and do

1647
01:13:07,400 --> 01:13:11,360
中文字幕
Python of capitalize, type in my name.

1648
01:13:11,360 --> 01:13:12,080
中文字幕
That still works.

1649
01:13:12,080 --> 01:13:15,650
中文字幕
And if I really want to be fancy, I don't even need s at all.

1650
01:13:15,650 --> 01:13:20,060
中文字幕
I can take this, get rid of that, put this here, immediately call

1651
01:13:20,060 --> 01:13:24,200
中文字幕
upper on the user's input and whittle this down to one line, type in David,

1652
01:13:24,200 --> 01:13:25,200
中文字幕
and that, too, works.

1653
01:13:25,200 --> 01:13:28,190
中文字幕
So you just get lots and lots and lots of more expressiveness.

1654
01:13:28,190 --> 01:13:29,030
中文字幕
Good question.

1655
01:13:29,030 --> 01:13:31,490
中文字幕
So how do you even know that things like this exist?

1656
01:13:31,490 --> 01:13:32,870
中文字幕
Well, quick aside.

1657
01:13:32,870 --> 01:13:35,340
中文字幕
Google will truly be your friend in cases like this.

1658
01:13:35,340 --> 01:13:38,510
中文字幕
And you'll want to know at this point, there's different versions of Python.

1659
01:13:38,510 --> 01:13:40,460
中文字幕
The world is kind of holding out and is still

1660
01:13:40,460 --> 01:13:43,930
中文字幕
using, a lot of people, version 2 of Python, which is older by many years

1661
01:13:43,930 --> 01:13:44,460
中文字幕
now.

1662
01:13:44,460 --> 01:13:45,480
中文字幕
We are using version 3.

1663
01:13:45,480 --> 01:13:47,030
中文字幕
And this is where the world is going.

1664
01:13:47,030 --> 01:13:50,450
中文字幕
And indeed, Python 2 will be officially deprecated or phased out

1665
01:13:50,450 --> 01:13:52,040
中文字幕
in a couple of years, theoretically.

1666
01:13:52,040 --> 01:13:54,150
中文字幕
So when you Google, you just want to be mindful of this

1667
01:13:54,150 --> 01:13:57,230
中文字幕
so that you don't accidentally make your way to old tutorials, old documentation

1668
01:13:57,230 --> 01:13:57,920
中文字幕
and the like.

1669
01:13:57,920 --> 01:14:03,380
中文字幕
So let me go ahead and Google Python 3 string, or str, and upper,

1670
01:14:03,380 --> 01:14:05,510
中文字幕
just to see if I can get to the documentation.

1671
01:14:05,510 --> 01:14:07,790
中文字幕
Here you have a number of tutorials.

1672
01:14:07,790 --> 01:14:11,300
中文字幕
But if we focus down here, what you're generally going to want to look for,

1673
01:14:11,300 --> 01:14:15,110
中文字幕
at least for the official documentation, is docs.python.org.

1674
01:14:15,110 --> 01:14:18,420
中文字幕
You see in the URL it's version 3, and that's where we want to go.

1675
01:14:18,420 --> 01:14:21,120
中文字幕
So let me go ahead and click on this, common string operators.

1676
01:14:21,120 --> 01:14:22,550
中文字幕
And I will disclaim this--

1677
01:14:22,550 --> 01:14:24,770
中文字幕
I think, personally, Python's documentation

1678
01:14:24,770 --> 01:14:26,400
中文字幕
is not terribly newbie-friendly.

1679
01:14:26,400 --> 01:14:28,490
中文字幕
Like, it's written fairly arcanely and you kind of

1680
01:14:28,490 --> 01:14:30,800
中文字幕
have to really dig to understand certain things.

1681
01:14:30,800 --> 01:14:31,370
中文字幕
That's fine.

1682
01:14:31,370 --> 01:14:33,080
中文字幕
You'll get comfortable with it over time.

1683
01:14:33,080 --> 01:14:34,990
中文字幕
But if you're feeling a little overwhelmed by,

1684
01:14:34,990 --> 01:14:39,050
中文字幕
oh my God, I just want to know about upper, everyone feels this way too.

1685
01:14:39,050 --> 01:14:42,350
中文字幕
So control F or Command F is your friend, upper.

1686
01:14:42,350 --> 01:14:44,390
中文字幕
Let me go ahead and search for this.

1687
01:14:44,390 --> 01:14:47,400
中文字幕
And it's not actually on this page, is it?

1688
01:14:47,400 --> 01:14:50,430
中文字幕
String-- string methods.

1689
01:14:50,430 --> 01:14:50,930
中文字幕
Here we go.

1690
01:14:50,930 --> 01:14:52,190
中文字幕
String methods.

1691
01:14:52,190 --> 01:14:56,710
中文字幕
OK, so under string methods, let me go ahead and search for upper.

1692
01:14:56,710 --> 01:14:59,020
中文字幕
And down here, indeed, is the documentation.

1693
01:14:59,020 --> 01:15:02,490
中文字幕
So the convention will be the name of the data type in question--

1694
01:15:02,490 --> 01:15:03,590
中文字幕
str for string--

1695
01:15:03,590 --> 01:15:04,840
中文字幕
the name of the function here.

1696
01:15:04,840 --> 01:15:08,330
中文字幕
It would tell you in parentheses if it takes any arguments, but it doesn't.

1697
01:15:08,330 --> 01:15:11,450
中文字幕
And so it returns a copy of the string with all of the cased characters

1698
01:15:11,450 --> 01:15:14,290
中文字幕
converted to uppercase-- that just means the letters of the alphabet

1699
01:15:14,290 --> 01:15:15,620
中文字幕
essentially--

1700
01:15:15,620 --> 01:15:17,870
中文字幕
and then some additional documentation, and so forth.

1701
01:15:17,870 --> 01:15:19,330
中文字幕
It gets pretty low-level pretty quickly.

1702
01:15:19,330 --> 01:15:21,160
中文字幕
These are the equivalent of the man pages.

1703
01:15:21,160 --> 01:15:23,380
中文字幕
And there is no CS50 reference for Python.

1704
01:15:23,380 --> 01:15:25,630
中文字幕
That was just for C. So just realize that there's

1705
01:15:25,630 --> 01:15:27,050
中文字幕
this documentation available.

1706
01:15:27,050 --> 01:15:29,010
中文字幕
And you'll notice there's bunches of functions.

1707
01:15:29,010 --> 01:15:33,190
中文字幕
Strip is actually kind of a popular one, or L strip or R strip.

1708
01:15:33,190 --> 01:15:35,530
中文字幕
If you have whitespace at the beginning or end of a line

1709
01:15:35,530 --> 01:15:39,160
中文字幕
because your human got a little sloppy or there's new lines in a file,

1710
01:15:39,160 --> 01:15:42,250
中文字幕
you can call strip on a string and get rid of whitespace to the left

1711
01:15:42,250 --> 01:15:43,710
中文字幕
and right to kind of clean it up.

1712
01:15:43,710 --> 01:15:46,090
中文字幕
Terribly useful for things like data science applications

1713
01:15:46,090 --> 01:15:48,750
中文字幕
and analysis of data where you just kind of clean up messy data.

1714
01:15:48,750 --> 01:15:51,710
中文字幕
So many functions like that are built in for you.

1715
01:15:51,710 --> 01:15:55,060
中文字幕
All right, so let's take a look at a few other examples reminiscent of features

1716
01:15:55,060 --> 01:15:58,040
中文字幕
we did have in C, such as this one here.

1717
01:15:58,040 --> 01:15:59,950
中文字幕
Suppose I want to write a program that takes

1718
01:15:59,950 --> 01:16:02,540
中文字幕
command line arguments, much like resize,

1719
01:16:02,540 --> 01:16:04,040
中文字幕
with which we started today's story.

1720
01:16:04,040 --> 01:16:06,700
中文字幕


1721
01:16:06,700 --> 01:16:08,360
中文字幕
Let's not even use the CS50 library.

1722
01:16:08,360 --> 01:16:09,340
中文字幕
Let's do this.

1723
01:16:09,340 --> 01:16:13,540
中文字幕
If you want access to argv, recall in C it looked like this-- int,

1724
01:16:13,540 --> 01:16:19,150
中文字幕
argc, string, argv.

1725
01:16:19,150 --> 01:16:20,830
中文字幕
It looked like this in C.

1726
01:16:20,830 --> 01:16:22,780
中文字幕
Well, unfortunately, if you're not using main,

1727
01:16:22,780 --> 01:16:25,330
中文字幕
it would be nice if you can still use command line arguments.

1728
01:16:25,330 --> 01:16:27,070
中文字幕
And you can, but you have to import them.

1729
01:16:27,070 --> 01:16:29,230
中文字幕
It's a library that provides you with access.

1730
01:16:29,230 --> 01:16:33,730
中文字幕
From the sys or system library, you can import argv in Python.

1731
01:16:33,730 --> 01:16:36,850
中文字幕
And that gives you access to command line arguments as a feature.

1732
01:16:36,850 --> 01:16:38,540
中文字幕
Then you can say something like this.

1733
01:16:38,540 --> 01:16:40,750
中文字幕
If the length of argv--

1734
01:16:40,750 --> 01:16:43,060
中文字幕
which is just an array, recall, in C--

1735
01:16:43,060 --> 01:16:47,260
中文字幕
equals equals 2, then go ahead and say hello.

1736
01:16:47,260 --> 01:16:52,030
中文字幕
And let's go ahead and print out whatever the user typed in, argv 1.

1737
01:16:52,030 --> 01:16:56,030
中文字幕
Else, let's just by default say hello world.

1738
01:16:56,030 --> 01:16:57,670
中文字幕
So in English, what's happening?

1739
01:16:57,670 --> 01:17:01,990
中文字幕
If the user typed in a command line argument-- say, hello so-and-so.

1740
01:17:01,990 --> 01:17:04,870
中文字幕
Else if the human did not type in exactly one command line argument,

1741
01:17:04,870 --> 01:17:07,210
中文字幕
just say, by default, hello world.

1742
01:17:07,210 --> 01:17:08,170
中文字幕
So let me save this.

1743
01:17:08,170 --> 01:17:11,440
中文字幕
Do Python of argv1, or rather zero.

1744
01:17:11,440 --> 01:17:12,200
中文字幕
Enter.

1745
01:17:12,200 --> 01:17:14,330
中文字幕
OK, I didn't type in a word after the command.

1746
01:17:14,330 --> 01:17:18,440
中文字幕
So now let's do it again and I'll type in Brian's name.

1747
01:17:18,440 --> 01:17:19,720
中文字幕
Enter, hello Brian.

1748
01:17:19,720 --> 01:17:21,220
中文字幕
Let's do it again.

1749
01:17:21,220 --> 01:17:23,590
中文字幕
Veronica, enter.

1750
01:17:23,590 --> 01:17:27,700
中文字幕
Now, there's something that's not quite the same as C. How many words did I

1751
01:17:27,700 --> 01:17:30,770
中文字幕
just type at the prompt?

1752
01:17:30,770 --> 01:17:31,810
中文字幕
3.

1753
01:17:31,810 --> 01:17:37,830
中文字幕
So that would suggest that this is argv 0, argv 1, and argv 2.

1754
01:17:37,830 --> 01:17:41,190
中文字幕
And yet, I'm printing argv 1, not argv 2.

1755
01:17:41,190 --> 01:17:43,470
中文字幕
So how do I think about this?

1756
01:17:43,470 --> 01:17:47,430
中文字幕
The code is correct, but it's different from C.

1757
01:17:47,430 --> 01:17:50,950
中文字幕
What does argv technically store when you run a command like these?

1758
01:17:57,850 --> 01:17:58,810
中文字幕
Remember, let's rewind.

1759
01:17:58,810 --> 01:18:02,050
中文字幕
In C, argv 0 stored what?

1760
01:18:02,050 --> 01:18:03,180
中文字幕
Name of the file.

1761
01:18:03,180 --> 01:18:06,480
中文字幕
The name of the file or the name of the program you just ran.

1762
01:18:06,480 --> 01:18:09,780
中文字幕
Notice, though, the program I just ran is called Python.

1763
01:18:09,780 --> 01:18:13,080
中文字幕
And so you would think that argv 0 would have Python in it,

1764
01:18:13,080 --> 01:18:16,080
中文字幕
but it doesn't because notice if I'm printing argv 1,

1765
01:18:16,080 --> 01:18:17,730
中文字幕
you would think that's 0, 1.

1766
01:18:17,730 --> 01:18:20,830
中文字幕
You would think I just said hello argv 0 .py, But I didn't.

1767
01:18:20,830 --> 01:18:24,720
中文字幕
argv 1 clearly prints Veronica or Brian.

1768
01:18:24,720 --> 01:18:27,370
中文字幕
So it stands to reason argv 0 is this, which

1769
01:18:27,370 --> 01:18:28,920
中文字幕
means this is, like, argv negative 1.

1770
01:18:28,920 --> 01:18:32,840
中文字幕
Python is excluded from the argument vector, as it's called.

1771
01:18:32,840 --> 01:18:35,800
中文字幕
The command line arguments do not include the name of the interpreter.

1772
01:18:35,800 --> 01:18:39,720
中文字幕
But otherwise, it works exactly the same as it did once upon a time.

1773
01:18:39,720 --> 01:18:43,020
中文字幕
And notice, too, with this new for construct,

1774
01:18:43,020 --> 01:18:46,380
中文字幕
notice what you can do whenever you have access to an array of things.

1775
01:18:46,380 --> 01:18:52,560
中文字幕
If I go into argv1.py and import argv again, let me go ahead now

1776
01:18:52,560 --> 01:18:53,610
中文字幕
and just-- you know what?

1777
01:18:53,610 --> 01:18:57,990
中文字幕
For s in argv, go ahead and print out s.

1778
01:18:57,990 --> 01:18:59,220
中文字幕
It's really succinct.

1779
01:18:59,220 --> 01:19:00,450
中文字幕
What is this going to do?

1780
01:19:00,450 --> 01:19:04,500
中文字幕
Let me go ahead and do Python of argv1, enter.

1781
01:19:04,500 --> 01:19:06,490
中文字幕
And it just prints out the name of the file.

1782
01:19:06,490 --> 01:19:09,780
中文字幕
If I go ahead and say foo, bar, baz, three random words,

1783
01:19:09,780 --> 01:19:11,590
中文字幕
it prints out all of those words.

1784
01:19:11,590 --> 01:19:14,310
中文字幕
And so what's powerful about Python is honestly this for loop.

1785
01:19:14,310 --> 01:19:17,190
中文字幕
There's no int i, less than, plus plus, any of that.

1786
01:19:17,190 --> 01:19:19,380
中文字幕
You just say, give me a variable called s

1787
01:19:19,380 --> 01:19:22,950
中文字幕
and iterate over the entirety of the thing on the right, which is presumed,

1788
01:19:22,950 --> 01:19:25,020
中文字幕
in this case, to be an array.

1789
01:19:25,020 --> 01:19:26,790
中文字幕
You can be even more powerful than that.

1790
01:19:26,790 --> 01:19:29,080
中文字幕
If I-- just like in C weeks ago--

1791
01:19:29,080 --> 01:19:32,550
中文字幕
look at characters in these strings-- let me do argv2.py--

1792
01:19:32,550 --> 01:19:38,020
中文字幕
suppose that this iterate over each string in argv,

1793
01:19:38,020 --> 01:19:46,530
中文字幕
and then here iterate over each character in s, I can do for c in s

1794
01:19:46,530 --> 01:19:49,330
中文字幕
and now print out the character.

1795
01:19:49,330 --> 01:19:53,820
中文字幕
So now when I run this same command but on argv2.py,

1796
01:19:53,820 --> 01:19:55,090
中文字幕
notice what's going to happen.

1797
01:19:55,090 --> 01:19:57,410
中文字幕
Let me raise this a little bit.

1798
01:19:57,410 --> 01:19:59,350
中文字幕
Enter.

1799
01:19:59,350 --> 01:20:03,010
中文字幕
It prints every character from every word one at a time.

1800
01:20:03,010 --> 01:20:06,320
中文字幕
But it did so this time based on using these two for loops.

1801
01:20:06,320 --> 01:20:07,330
中文字幕
So what does this mean?

1802
01:20:07,330 --> 01:20:10,540
中文字幕
When you have an array, as we've called it,

1803
01:20:10,540 --> 01:20:12,490
中文字幕
you can iterate over everything in the array.

1804
01:20:12,490 --> 01:20:15,800
中文字幕
When you have a string, you can iterate over every character in the string.

1805
01:20:15,800 --> 01:20:17,710
中文字幕
And this is where Python just gets wonderfully

1806
01:20:17,710 --> 01:20:20,620
中文字幕
flexible to do this again and again.

1807
01:20:20,620 --> 01:20:23,170
中文字幕
All right, let's take a look at--

1808
01:20:23,170 --> 01:20:25,140
中文字幕
let's see-- compared strings already.

1809
01:20:25,140 --> 01:20:26,510
中文字幕
We copied strings.

1810
01:20:26,510 --> 01:20:29,110
中文字幕
Let's go ahead and do this in Python.

1811
01:20:29,110 --> 01:20:32,290
中文字幕
Recall that we ran into a fundamental limitation of C,

1812
01:20:32,290 --> 01:20:35,560
中文字幕
and it would seem programming, when we had example called swap

1813
01:20:35,560 --> 01:20:38,080
中文字幕
and no swap back in the day where I was just

1814
01:20:38,080 --> 01:20:40,240
中文字幕
trying to swap two values, x and y.

1815
01:20:40,240 --> 01:20:44,170
中文字幕
And recall that I hardcoded something like x is 1 and y is 2.

1816
01:20:44,170 --> 01:20:48,370
中文字幕
And the whole goal was simply to first say, x is such and such,

1817
01:20:48,370 --> 01:20:50,920
中文字幕
y is such and such.

1818
01:20:50,920 --> 01:20:53,350
中文字幕
Let me go ahead and make that a format string.

1819
01:20:53,350 --> 01:20:55,360
中文字幕
Then I wanted to print this again.

1820
01:20:55,360 --> 01:20:58,570
中文字幕
But somewhere in here, I wanted to swap x and y.

1821
01:20:58,570 --> 01:21:01,900
中文字幕
So to punctuate our sort of exploration of just what Python can do,

1822
01:21:01,900 --> 01:21:07,020
中文字幕
if you want to swap two variables, x and y, that's fine, just do it.

1823
01:21:07,020 --> 01:21:10,410
中文字幕
And it's this magical shell game that just works in Python.

1824
01:21:10,410 --> 01:21:13,260
中文字幕
Now, technically these are what are called tuples on the left.

1825
01:21:13,260 --> 01:21:15,010
中文字幕
It's a x comma y pair.

1826
01:21:15,010 --> 01:21:16,320
中文字幕
It's latitude comma longitude.

1827
01:21:16,320 --> 01:21:20,640
中文字幕
So there's an actual underlying mental model for what's going on here.

1828
01:21:20,640 --> 01:21:22,590
中文字幕
But in effect, you're literally switching them

1829
01:21:22,590 --> 01:21:24,340
中文字幕
and you don't need the temporary variable.

1830
01:21:24,340 --> 01:21:28,560
中文字幕
Python the language takes care of that for you.

1831
01:21:28,560 --> 01:21:30,670
中文字幕
All right, let's look at a more powerful feature

1832
01:21:30,670 --> 01:21:33,930
中文字幕
still, this time using what's actually called a list.

1833
01:21:33,930 --> 01:21:38,010
中文字幕
So a moment ago I was using argv 0, 1, 2, as our examples.

1834
01:21:38,010 --> 01:21:40,090
中文字幕
And I was calling them arrays.

1835
01:21:40,090 --> 01:21:41,220
中文字幕
They're not arrays anymore.

1836
01:21:41,220 --> 01:21:43,080
中文字幕
Python does not have arrays.

1837
01:21:43,080 --> 01:21:44,640
中文字幕
Python has lists.

1838
01:21:44,640 --> 01:21:46,590
中文字幕
And lists sounds reminiscent of linked lists.

1839
01:21:46,590 --> 01:21:47,470
中文字幕
And indeed, they are.

1840
01:21:47,470 --> 01:21:50,780
中文字幕
In Python, you have lists that are resizable.

1841
01:21:50,780 --> 01:21:53,910
中文字幕
You don't have to decide in advance how big they are or how small they are.

1842
01:21:53,910 --> 01:21:57,330
中文字幕
They will just grow and shrink for you just like a linked list will,

1843
01:21:57,330 --> 01:21:59,760
中文字幕
but you don't have to write the linked list yourself.

1844
01:21:59,760 --> 01:22:00,450
中文字幕
Yeah?

1845
01:22:04,850 --> 01:22:05,600
中文字幕
Sure.

1846
01:22:10,430 --> 01:22:11,350
中文字幕
Oh, sure.

1847
01:22:11,350 --> 01:22:15,130
中文字幕
Let me open that file up in argv1.

1848
01:22:15,130 --> 01:22:16,260
中文字幕
This one here?

1849
01:22:16,260 --> 01:22:19,400
中文字幕
No, it was, like, .

1850
01:22:19,400 --> 01:22:20,690
中文字幕
Oh, this one here.

1851
01:22:20,690 --> 01:22:21,310
中文字幕
Yeah.

1852
01:22:21,310 --> 01:22:23,430
中文字幕
 bracket notation ..

1853
01:22:23,430 --> 01:22:26,250
中文字幕
Yes, you can still-- so argv, I called it an array,

1854
01:22:26,250 --> 01:22:27,840
中文字幕
but that was a white lie a moment ago.

1855
01:22:27,840 --> 01:22:29,770
中文字幕
It's actually a list, a linked list.

1856
01:22:29,770 --> 01:22:32,850
中文字幕
But whereas a linked list in C does not allow you to use square brackets,

1857
01:22:32,850 --> 01:22:34,600
中文字幕
you have to use a for loop or a while loop

1858
01:22:34,600 --> 01:22:38,230
中文字幕
to iterate over the whole thing to find what you're looking for, in Python,

1859
01:22:38,230 --> 01:22:41,200
中文字幕
if something is in a list, you can just use, yes, the square brackets

1860
01:22:41,200 --> 01:22:42,700
中文字幕
to get at that specific element.

1861
01:22:42,700 --> 01:22:45,930
中文字幕
Or I'm saying you could use the f right before--

1862
01:22:45,930 --> 01:22:47,570
中文字幕
Oh, I could have, yes.

1863
01:22:47,570 --> 01:22:52,280
中文字幕
I didn't use the F, just because frankly it just gets ugly eventually.

1864
01:22:52,280 --> 01:22:56,210
中文字幕
But yes, I could have also done this to achieve the exact same effect.

1865
01:22:56,210 --> 01:22:58,760
中文字幕
It just starts to look cryptic.

1866
01:22:58,760 --> 01:23:03,970
中文字幕
OK, so let's actually introduce a list, which itself is a data type in Python,

1867
01:23:03,970 --> 01:23:07,740
中文字幕
as well as in languages like C++ and Java,

1868
01:23:07,740 --> 01:23:09,620
中文字幕
if some of you have that background, as well.

1869
01:23:09,620 --> 01:23:13,100
中文字幕
So here, in list.py, let me go ahead and do the following.

1870
01:23:13,100 --> 01:23:15,580
中文字幕
Let me first import from the CS50 library getInt

1871
01:23:15,580 --> 01:23:17,380
中文字幕
so that we can get some ints from the user.

1872
01:23:17,380 --> 01:23:19,510
中文字幕
Let me give myself an array, a.k.a.

1873
01:23:19,510 --> 01:23:22,810
中文字幕
now a list in Python.

1874
01:23:22,810 --> 01:23:25,930
中文字幕
So in C you can't really express quite this idea.

1875
01:23:25,930 --> 01:23:29,260
中文字幕
In Python, if you want a variable called numbers

1876
01:23:29,260 --> 01:23:31,390
中文字幕
and you want to initialize it to an empty list,

1877
01:23:31,390 --> 01:23:33,490
中文字幕
you just literally do open bracket, close bracket.

1878
01:23:33,490 --> 01:23:35,140
中文字幕
No number in between them.

1879
01:23:35,140 --> 01:23:37,090
中文字幕
And as before, no semi-colon.

1880
01:23:37,090 --> 01:23:40,660
中文字幕
Let's now do the following forever until I break out of this.

1881
01:23:40,660 --> 01:23:43,150
中文字幕
Let me go ahead and get a number from the user,

1882
01:23:43,150 --> 01:23:45,130
中文字幕
just by asking them for some number.

1883
01:23:45,130 --> 01:23:49,600
中文字幕
Then let me say, if not number, go ahead and break out of this.

1884
01:23:49,600 --> 01:23:51,730
中文字幕
This is going to, as an aside, just let me quit out

1885
01:23:51,730 --> 01:23:55,400
中文字幕
of this by hitting Control D as we discussed ever so briefly a while back.

1886
01:23:55,400 --> 01:23:57,010
中文字幕
But that's just a UI feature.

1887
01:23:57,010 --> 01:23:58,750
中文字幕
So this is what's kind of cool.

1888
01:23:58,750 --> 01:24:02,920
中文字幕
Suppose I want to implement the notion of checking

1889
01:24:02,920 --> 01:24:06,850
中文字幕
if the number the user's typed in is in the list already, and if so,

1890
01:24:06,850 --> 01:24:07,390
中文字幕
not add it.

1891
01:24:07,390 --> 01:24:08,810
中文字幕
I'm going to go ahead and do that.

1892
01:24:08,810 --> 01:24:10,100
中文字幕
But first, let's just do this--

1893
01:24:10,100 --> 01:24:13,360
中文字幕
numbers.append number.

1894
01:24:13,360 --> 01:24:14,860
中文字幕
And this is a new feature.

1895
01:24:14,860 --> 01:24:16,120
中文字幕
So what do I want to do here?

1896
01:24:16,120 --> 01:24:17,770
中文字幕
For number in numbers--

1897
01:24:17,770 --> 01:24:20,140
中文字幕
I'll explain this in a second--

1898
01:24:20,140 --> 01:24:21,520
中文字幕
let me go ahead and print number.

1899
01:24:21,520 --> 01:24:23,910
中文字幕
So what is this program aspiring to do?

1900
01:24:23,910 --> 01:24:26,020
中文字幕
At the very top, I'm importing getInt.

1901
01:24:26,020 --> 01:24:29,170
中文字幕
At the very top below that, I'm just giving myself an empty array,

1902
01:24:29,170 --> 01:24:31,290
中文字幕
now called a list, called numbers.

1903
01:24:31,290 --> 01:24:33,360
中文字幕
Then I do the following forever.

1904
01:24:33,360 --> 01:24:35,280
中文字幕
Go ahead and get the number from the user.

1905
01:24:35,280 --> 01:24:38,230
中文字幕
If he or she did not actually type in a number, just break out of this.

1906
01:24:38,230 --> 01:24:39,300
中文字幕
The program is done.

1907
01:24:39,300 --> 01:24:40,770
中文字幕
But here's the new feature.

1908
01:24:40,770 --> 01:24:44,170
中文字幕
Just as with strings, they are objects, so to speak.

1909
01:24:44,170 --> 01:24:46,830
中文字幕
They are data structures that have functions built in.

1910
01:24:46,830 --> 01:24:49,500
中文字幕
So do lists have functions built in.

1911
01:24:49,500 --> 01:24:52,470
中文字幕
There is literally a function inside of every Python list

1912
01:24:52,470 --> 01:24:54,540
中文字幕
called append that literally does that.

1913
01:24:54,540 --> 01:24:56,970
中文字幕
You call append and it appends whatever its input

1914
01:24:56,970 --> 01:24:59,670
中文字幕
is to whatever the list itself is.

1915
01:24:59,670 --> 01:25:03,720
中文字幕
So in C, you might have had to use realloc.

1916
01:25:03,720 --> 01:25:06,630
中文字幕
You might have had to add something to the end of the list.

1917
01:25:06,630 --> 01:25:07,980
中文字幕
None of that happens anymore.

1918
01:25:07,980 --> 01:25:10,410
中文字幕
Just at a high level, you say append this to the list

1919
01:25:10,410 --> 01:25:12,690
中文字幕
and let the language take care of it for you.

1920
01:25:12,690 --> 01:25:15,690
中文字幕
Then down here, left-aligned all the way at the end,

1921
01:25:15,690 --> 01:25:17,580
中文字幕
is just saying, for number in numbers.

1922
01:25:17,580 --> 01:25:21,880
中文字幕
Like, iterate over all of the numbers in the list and print out one at a time.

1923
01:25:21,880 --> 01:25:22,720
中文字幕
So let's try this.

1924
01:25:22,720 --> 01:25:25,530
中文字幕
Let me go down here and do Python of--

1925
01:25:25,530 --> 01:25:31,920
中文字幕
this is list.py-- and let me go ahead and type in a number like 13, 42, 50.

1926
01:25:31,920 --> 01:25:34,950
中文字幕
And I'm going to hit Control D, which means that's it, I'm done.

1927
01:25:34,950 --> 01:25:36,450
中文字幕
And there we see the three numbers.

1928
01:25:36,450 --> 01:25:38,100
中文字幕
It looks a little stupid because you know what?

1929
01:25:38,100 --> 01:25:39,480
中文字幕
I think I need a print here.

1930
01:25:39,480 --> 01:25:40,800
中文字幕
Let's fix this.

1931
01:25:40,800 --> 01:25:42,200
中文字幕
Let me rerun this.

1932
01:25:42,200 --> 01:25:45,510
中文字幕
13, 42, 50, Control D, there we go.

1933
01:25:45,510 --> 01:25:46,710
中文字幕
One per line.

1934
01:25:46,710 --> 01:25:50,400
中文字幕
But what this program has is honestly kind of a bug, potentially.

1935
01:25:50,400 --> 01:25:53,620
中文字幕
Suppose I want unique numbers, now I have three 13s.

1936
01:25:53,620 --> 01:25:56,580
中文字幕
But I'd ideally just want one copy of every number for whatever reason.

1937
01:25:56,580 --> 01:25:57,730
中文字幕
I want uniqueness.

1938
01:25:57,730 --> 01:26:00,570
中文字幕
Well, notice how easily you can express that.

1939
01:26:00,570 --> 01:26:05,710
中文字幕
If my goal is to only conditionally add a number to the numbers list

1940
01:26:05,710 --> 01:26:08,940
中文字幕
if it's not already there, how would you do this in C?

1941
01:26:08,940 --> 01:26:11,730
中文字幕
You have an array called numbers and you want to first check

1942
01:26:11,730 --> 01:26:13,390
中文字幕
is a number in that array.

1943
01:26:13,390 --> 01:26:15,620
中文字幕
What would you do in English?

1944
01:26:15,620 --> 01:26:16,570
中文字幕
A for loop.

1945
01:26:16,570 --> 01:26:17,240
中文字幕
A for loop, right?

1946
01:26:17,240 --> 01:26:18,880
中文字幕
You'd probably start at the left, iterate over

1947
01:26:18,880 --> 01:26:21,850
中文字幕
the whole array looking for the number and then conclude true or false,

1948
01:26:21,850 --> 01:26:22,630
中文字幕
it's in there.

1949
01:26:22,630 --> 01:26:24,340
中文字幕
It's not hard but it's a little annoying.

1950
01:26:24,340 --> 01:26:27,420
中文字幕
You have to write more code, a couple of lines, four lines for a for loop.

1951
01:26:27,420 --> 01:26:30,130
中文字幕
In Python, just say what you mean.

1952
01:26:30,130 --> 01:26:35,140
中文字幕
If number not in numbers, append it.

1953
01:26:35,140 --> 01:26:37,360
中文字幕
And it reads much more like English.

1954
01:26:37,360 --> 01:26:41,990
中文字幕
At the end of the day, some human wrote the for loop that does that operation.

1955
01:26:41,990 --> 01:26:46,110
中文字幕
But we, the more modern programmers, can just now say, if number not in numbers,

1956
01:26:46,110 --> 01:26:46,930
中文字幕
append it.

1957
01:26:46,930 --> 01:26:48,870
中文字幕
And so it is meant to read more English-like.

1958
01:26:48,870 --> 01:26:50,540
中文字幕
So let's try this now.

1959
01:26:50,540 --> 01:26:53,260
中文字幕
13, 13, 50, done.

1960
01:26:53,260 --> 01:26:56,980
中文字幕
Now I just get one copy of the 13 because it's checking that for me.

1961
01:26:56,980 --> 01:26:58,750
中文字幕
Now, running time is still an issue.

1962
01:26:58,750 --> 01:27:01,420
中文字幕
Consider this, theoretically, you're still

1963
01:27:01,420 --> 01:27:04,510
中文字幕
wasting some time looking for a number because someone wrote

1964
01:27:04,510 --> 01:27:05,990
中文字幕
code that's probably linear search.

1965
01:27:05,990 --> 01:27:07,660
中文字幕
Maybe it's binary search if it's sorted.

1966
01:27:07,660 --> 01:27:08,830
中文字幕
But someone wrote that code.

1967
01:27:08,830 --> 01:27:10,990
中文字幕
But the point is, with these higher level languages,

1968
01:27:10,990 --> 01:27:14,930
中文字幕
these more modern languages like Python, that is not our problem, necessarily.

1969
01:27:14,930 --> 01:27:17,020
中文字幕
It only becomes our problem if the program is just

1970
01:27:17,020 --> 01:27:22,720
中文字幕
too slow for some reason and we really need to get into the weeds of why.

1971
01:27:22,720 --> 01:27:25,210
中文字幕
All right, let's look at a final feature syntactically

1972
01:27:25,210 --> 01:27:27,580
中文字幕
before we try this to a more generalized problem.

1973
01:27:27,580 --> 01:27:30,550
中文字幕
Let me go ahead and save a file called struct0.py,

1974
01:27:30,550 --> 01:27:33,780
中文字幕
which is reminiscent of struct0.c a few weeks back.

1975
01:27:33,780 --> 01:27:37,820
中文字幕
And let me go ahead and from the CS50 library import getString.

1976
01:27:37,820 --> 01:27:41,770
中文字幕
Let me go ahead and give myself an array this time called students that's empty,

1977
01:27:41,770 --> 01:27:43,330
中文字幕
or a list called students.

1978
01:27:43,330 --> 01:27:46,340
中文字幕
And then let me just get three students for the sake of discussion.

1979
01:27:46,340 --> 01:27:50,170
中文字幕
So for i in range 3, that just iterates three times,

1980
01:27:50,170 --> 01:27:52,870
中文字幕
let me go ahead and ask the user for their name.

1981
01:27:52,870 --> 01:27:55,370
中文字幕
So getString, ask them for their name.

1982
01:27:55,370 --> 01:27:57,370
中文字幕
Then let me go ahead and ask them for their dorm

1983
01:27:57,370 --> 01:28:00,040
中文字幕
and go ahead and get string for dorm.

1984
01:28:00,040 --> 01:28:01,540
中文字幕
And then that's enough.

1985
01:28:01,540 --> 01:28:04,390
中文字幕
Let me now go ahead and append the student to my list.

1986
01:28:04,390 --> 01:28:07,330
中文字幕
So students dot append.

1987
01:28:07,330 --> 01:28:09,480
中文字幕
But I don't really have a student structure yet.

1988
01:28:09,480 --> 01:28:11,530
中文字幕
Now, there's many ways we can solve this, but let

1989
01:28:11,530 --> 01:28:13,330
中文字幕
me propose the simplest one.

1990
01:28:13,330 --> 01:28:19,120
中文字幕
It turns out in Python you can declare hash tables so wonderfully simply.

1991
01:28:19,120 --> 01:28:21,680
中文字幕
A hash table is just a collection of key value pairs.

1992
01:28:21,680 --> 01:28:25,600
中文字幕
And I would argue at this point in my example I have keys and values.

1993
01:28:25,600 --> 01:28:29,330
中文字幕
I have a name which is a key and the value, like David or whatever,

1994
01:28:29,330 --> 01:28:33,430
中文字幕
another key called dorm, and then a value which is like Matthews

1995
01:28:33,430 --> 01:28:34,210
中文字幕
or wherever.

1996
01:28:34,210 --> 01:28:35,500
中文字幕
And so keys and values.

1997
01:28:35,500 --> 01:28:38,710
中文字幕
So it would be kind of nice if I could create for myself a hash table--

1998
01:28:38,710 --> 01:28:41,660
中文字幕
or even a try, for that matter-- that allows me to store this data.

1999
01:28:41,660 --> 01:28:44,260
中文字幕
Well, it turns out in Python, I can do just that.

2000
01:28:44,260 --> 01:28:47,110
中文字幕
I can go ahead and create an object called student

2001
01:28:47,110 --> 01:28:49,600
中文字幕
using curly bracket notation.

2002
01:28:49,600 --> 01:28:51,370
中文字幕
And you can literally do this.

2003
01:28:51,370 --> 01:28:53,530
中文字幕
The name shall be one key.

2004
01:28:53,530 --> 01:28:55,600
中文字幕
And now it's going to take on that value.

2005
01:28:55,600 --> 01:28:59,530
中文字幕
Dorm shall be another key and it's going to take on that value.

2006
01:28:59,530 --> 01:29:02,500
中文字幕
So I could call this anything I want-- x and y

2007
01:29:02,500 --> 01:29:05,920
中文字幕
and have the values David and Matthews or whatever it is I'm going to type in.

2008
01:29:05,920 --> 01:29:09,310
中文字幕
But if you want a very generalized data structure

2009
01:29:09,310 --> 01:29:13,600
中文字幕
that isn't just a list of values from left to right, but has metadata--

2010
01:29:13,600 --> 01:29:16,330
中文字幕
a key, or if you think of a spreadsheet, a column name

2011
01:29:16,330 --> 01:29:20,260
中文字幕
called name and a column name called dorm, each of which has values--

2012
01:29:20,260 --> 01:29:21,520
中文字幕
you just use curly braces.

2013
01:29:21,520 --> 01:29:24,500
中文字幕
And you put the keys in quotes and then a colon.

2014
01:29:24,500 --> 01:29:26,960
中文字幕
And then if you've got multiple keys, you just put a comma.

2015
01:29:26,960 --> 01:29:31,060
中文字幕
So it's a little cryptic, but this is just like a container, a hash table,

2016
01:29:31,060 --> 01:29:33,590
中文字幕
that contains words and values.

2017
01:29:33,590 --> 01:29:36,640
中文字幕
Now, in p set 4, when you implemented speller,

2018
01:29:36,640 --> 01:29:40,060
中文字幕
you actually just said yes or no, is the word in the dictionary?

2019
01:29:40,060 --> 01:29:42,460
中文字幕
But you certainly could have stored more information

2020
01:29:42,460 --> 01:29:43,960
中文字幕
instead of just Boolean values.

2021
01:29:43,960 --> 01:29:47,150
中文字幕
You just tended to not need to do that.

2022
01:29:47,150 --> 01:29:48,610
中文字幕
So what does this mean for me?

2023
01:29:48,610 --> 01:29:50,920
中文字幕
At this point in the story, I have an object,

2024
01:29:50,920 --> 01:29:54,980
中文字幕
as it's called in Python, that stores these keys and these values.

2025
01:29:54,980 --> 01:29:57,400
中文字幕
So if later on I want to iterate over them, I can do this.

2026
01:29:57,400 --> 01:30:01,330
中文字幕
For student in-- oh, you have to append it--

2027
01:30:01,330 --> 01:30:04,480
中文字幕
so student.append student.

2028
01:30:04,480 --> 01:30:06,320
中文字幕
Let's add the student to the list.

2029
01:30:06,320 --> 01:30:08,200
中文字幕
So for student in students, which is just how

2030
01:30:08,200 --> 01:30:10,440
中文字幕
you iterate over every one of the things in that list.

2031
01:30:10,440 --> 01:30:16,270
中文字幕
Let me just go ahead and say a sentence like, I want to say so and so

2032
01:30:16,270 --> 01:30:18,340
中文字幕
is in this dorm.

2033
01:30:18,340 --> 01:30:19,810
中文字幕
So how do express that?

2034
01:30:19,810 --> 01:30:22,540
中文字幕
Well, so and so, I need to get access to the student's name.

2035
01:30:22,540 --> 01:30:25,390
中文字幕
And the way I can do this is as follows.

2036
01:30:25,390 --> 01:30:30,850
中文字幕
I could say, let's go ahead and say curly brace student bracket

2037
01:30:30,850 --> 01:30:33,760
中文字幕
name close bracket.

2038
01:30:33,760 --> 01:30:36,170
中文字幕
And then here, I can go ahead and say--

2039
01:30:36,170 --> 01:30:38,710
中文字幕
oops, let me put quotes in here--

2040
01:30:38,710 --> 01:30:42,520
中文字幕
and then here I can say student bracket quote unquote dorm.

2041
01:30:42,520 --> 01:30:45,400
中文字幕
So this is admittedly the most cryptic example we've done thus far.

2042
01:30:45,400 --> 01:30:47,870
中文字幕
But let's tease it apart as a format string.

2043
01:30:47,870 --> 01:30:50,260
中文字幕
So if I zoom in on this, what am I doing?

2044
01:30:50,260 --> 01:30:52,720
中文字幕
The curly braces and the f just means format this string.

2045
01:30:52,720 --> 01:30:56,220
中文字幕
So you can ignore the curly braces as part of our story from earlier.

2046
01:30:56,220 --> 01:30:58,390
中文字幕
Student is the name of the variable in the for loop.

2047
01:30:58,390 --> 01:30:59,890
中文字幕
So it's the current student.

2048
01:30:59,890 --> 01:31:01,820
中文字幕
The square brackets are new.

2049
01:31:01,820 --> 01:31:05,350
中文字幕
In C, the only time we used square brackets was in what context?

2050
01:31:05,350 --> 01:31:07,150
中文字幕
Arrays.

2051
01:31:07,150 --> 01:31:10,720
中文字幕
And what did we always put in those square brackets?

2052
01:31:10,720 --> 01:31:11,610
中文字幕
A number.

2053
01:31:11,610 --> 01:31:12,990
中文字幕
Yeah, so 0, 1, 2.

2054
01:31:12,990 --> 01:31:14,780
中文字幕
You can index into an array.

2055
01:31:14,780 --> 01:31:16,990
中文字幕
What's cool about an object--

2056
01:31:16,990 --> 01:31:20,160
中文字幕
or a hash table more generally, as we're now defining it--

2057
01:31:20,160 --> 01:31:25,660
中文字幕
is you can index into the variable using not numbers, but words.

2058
01:31:25,660 --> 01:31:29,110
中文字幕
So you could think of student as being like a list or an array

2059
01:31:29,110 --> 01:31:30,980
中文字幕
with two values-- name and dorm.

2060
01:31:30,980 --> 01:31:33,570
中文字幕
But it's nice to be able to refer to those not as zero and one

2061
01:31:33,570 --> 01:31:36,720
中文字幕
or some stupid arbitrary number, but rather by keys--

2062
01:31:36,720 --> 01:31:38,340
中文字幕
name and dorm.

2063
01:31:38,340 --> 01:31:41,370
中文字幕
So this syntax here, though cryptic, says go inside the student

2064
01:31:41,370 --> 01:31:44,970
中文字幕
object and get me the value of the key called name.

2065
01:31:44,970 --> 01:31:47,830
中文字幕
And this says the same thing about dorm.

2066
01:31:47,830 --> 01:31:50,550
中文字幕
So an object in Python--

2067
01:31:50,550 --> 01:31:54,120
中文字幕
or more generally a hash table-- allows you to associate keys with values.

2068
01:31:54,120 --> 01:31:56,710
中文字幕
And this is quite simply the syntax you use for that.

2069
01:31:56,710 --> 01:31:58,050
中文字幕
So let me go ahead and run this.

2070
01:31:58,050 --> 01:32:01,410
中文字幕
Struct0.py, type in my name.

2071
01:32:01,410 --> 01:32:03,660
中文字幕
Let's say Matthews.

2072
01:32:03,660 --> 01:32:07,080
中文字幕
Let's do, like, Veronica, Weld.

2073
01:32:07,080 --> 01:32:08,310
中文字幕
Let's do Brian.

2074
01:32:08,310 --> 01:32:09,420
中文字幕
Brian, where did you live?

2075
01:32:09,420 --> 01:32:10,440
中文字幕
Which year?

2076
01:32:10,440 --> 01:32:11,570
中文字幕
Freshman year.

2077
01:32:11,570 --> 01:32:12,480
中文字幕
Pennypacker.

2078
01:32:12,480 --> 01:32:14,690
中文字幕
Pennypacker, enter.

2079
01:32:14,690 --> 01:32:17,420
中文字幕
Not that these specifics really matter, but now we

2080
01:32:17,420 --> 01:32:19,050
中文字幕
have expressed all of these sentences.

2081
01:32:19,050 --> 01:32:21,950
中文字幕
So the short of it now is we didn't quite see this in C,

2082
01:32:21,950 --> 01:32:25,340
中文字幕
but we did see a hint of this when we implemented our own hash

2083
01:32:25,340 --> 01:32:30,590
中文字幕
table in C so that we can actually access keys and values arbitrarily.

2084
01:32:30,590 --> 01:32:35,080
中文字幕
So let's do a-- actually, let me pause here for any questions

2085
01:32:35,080 --> 01:32:39,140
中文字幕
before we bring back Mario.

2086
01:32:39,140 --> 01:32:39,780
中文字幕
All right.

2087
01:32:39,780 --> 01:32:43,230
中文字幕
So let's now not just do examples for the sake of demonstration,

2088
01:32:43,230 --> 01:32:47,090
中文字幕
but rewind to an old friend that we've seen a few times

2089
01:32:47,090 --> 01:32:48,800
中文字幕
and just look at a few different screens.

2090
01:32:48,800 --> 01:32:50,950
中文字幕
So in Super Mario Bros, running left to right

2091
01:32:50,950 --> 01:32:53,870
中文字幕
you might recall or have seen that there's stuff like this in the sky.

2092
01:32:53,870 --> 01:32:55,870
中文字幕
And Mario's supposed to run under it and jump up

2093
01:32:55,870 --> 01:32:59,310
中文字幕
and he gets coins or whatever by jumping up and hitting these question marks.

2094
01:32:59,310 --> 01:33:01,550
中文字幕
So this is mostly a very contrived way of saying,

2095
01:33:01,550 --> 01:33:03,300
中文字幕
suppose we want to print out four question

2096
01:33:03,300 --> 01:33:06,290
中文字幕
marks on the screen just like Super Mario Bros, how could we do it?

2097
01:33:06,290 --> 01:33:08,790
中文字幕
It's going to be a little black and white, a little textual,

2098
01:33:08,790 --> 01:33:10,600
中文字幕
but how do I print out four question marks?

2099
01:33:10,600 --> 01:33:14,790
中文字幕
Well, let me go over here and let me create a file called,

2100
01:33:14,790 --> 01:33:17,370
中文字幕
let's say, Mario0.py.

2101
01:33:17,370 --> 01:33:18,330
中文字幕
And how do I do this?

2102
01:33:18,330 --> 01:33:22,180
中文字幕
What's the simplest way to do this, print four question marks?

2103
01:33:22,180 --> 01:33:24,500
中文字幕
OK, I heard print.

2104
01:33:24,500 --> 01:33:25,650
中文字幕
OK, four question marks.

2105
01:33:25,650 --> 01:33:26,290
中文字幕
Very good.

2106
01:33:26,290 --> 01:33:28,740
中文字幕
So let's go ahead and run Mario0.

2107
01:33:28,740 --> 01:33:29,850
中文字幕
Correct, that's right.

2108
01:33:29,850 --> 01:33:31,200
中文字幕
So this is not bad.

2109
01:33:31,200 --> 01:33:32,770
中文字幕
It's one string, not a huge deal.

2110
01:33:32,770 --> 01:33:35,480
中文字幕
Let's do it at least with a loop, as we've been often doing,

2111
01:33:35,480 --> 01:33:37,320
中文字幕
just to improve the design, even though this

2112
01:33:37,320 --> 01:33:39,450
中文字幕
is a very tiny, tiny, tiny example.

2113
01:33:39,450 --> 01:33:44,440
中文字幕
So Mario1.py, let's go ahead and print this out with a loop, for instance.

2114
01:33:44,440 --> 01:33:45,670
中文字幕
So how do I do this?

2115
01:33:45,670 --> 01:33:49,900
中文字幕
How do I print four question marks, but one at a time?

2116
01:33:49,900 --> 01:33:56,570
中文字幕
For i in range four, print, question mark.

2117
01:33:56,570 --> 01:33:57,470
中文字幕
Save, all right.

2118
01:33:57,470 --> 01:33:58,490
中文字幕
So Python, Mario.

2119
01:33:58,490 --> 01:34:01,610
中文字幕
Does anyone want to yell out, no, don't do that?

2120
01:34:01,610 --> 01:34:02,390
中文字幕
OK, thanks.

2121
01:34:02,390 --> 01:34:02,960
中文字幕
That's great.

2122
01:34:02,960 --> 01:34:05,080
中文字幕
All right, so why did you not want me to do that?

2123
01:34:05,080 --> 01:34:06,290
中文字幕
Because they're all vertical.

2124
01:34:06,290 --> 01:34:08,210
中文字幕
So we did have a fix for this how.

2125
01:34:08,210 --> 01:34:12,310
中文字幕
Do I tell print, don't end your lines with the default new line?

2126
01:34:12,310 --> 01:34:17,850
中文字幕
So and equals just quote unquote to override the default backslash n value.

2127
01:34:17,850 --> 01:34:18,940
中文字幕
So now I can rerun this.

2128
01:34:18,940 --> 01:34:20,240
中文字幕
All right, it's a little buggy.

2129
01:34:20,240 --> 01:34:24,790
中文字幕
So how can I fix this and only put a newline after the last one?

2130
01:34:25,760 --> 01:34:27,910
中文字幕
Yeah, honestly, just do print nothing.

2131
01:34:27,910 --> 01:34:30,740
中文字幕
And that will have the effect of printing a new line for free.

2132
01:34:30,740 --> 01:34:31,600
中文字幕
So let's do this.

2133
01:34:31,600 --> 01:34:32,140
中文字幕
OK.

2134
01:34:32,140 --> 01:34:33,990
中文字幕
Now we've got a good example there.

2135
01:34:33,990 --> 01:34:36,490
中文字幕
All right, so it turns out we actually printed along the way

2136
01:34:36,490 --> 01:34:40,840
中文字幕
a separate example, which looked like this, albeit with four blocks.

2137
01:34:40,840 --> 01:34:43,380
中文字幕
So we won't-- let's go ahead and do this now vertically,

2138
01:34:43,380 --> 01:34:45,730
中文字幕
not with question marks, but with hashes like bricks.

2139
01:34:45,730 --> 01:34:47,650
中文字幕
So if we want to print out those three hashes,

2140
01:34:47,650 --> 01:34:53,140
中文字幕
allow me to draw some inspiration from this and let's say in Mario2.py,

2141
01:34:53,140 --> 01:34:58,780
中文字幕
let me go ahead and just say for i in range of three,

2142
01:34:58,780 --> 01:35:01,000
中文字幕
go ahead and print out just one block.

2143
01:35:01,000 --> 01:35:03,580
中文字幕
And as you've been advising, just do this--

2144
01:35:03,580 --> 01:35:06,220
中文字幕
or rather, no, let's use the default to print out

2145
01:35:06,220 --> 01:35:08,470
中文字幕
a vertical bar of three blocks.

2146
01:35:08,470 --> 01:35:10,240
中文字幕
So this is Mario2.py.

2147
01:35:10,240 --> 01:35:12,790
中文字幕
And now we've done something reminiscent of that.

2148
01:35:12,790 --> 01:35:16,090
中文字幕
But now things get a little interesting if we go underground.

2149
01:35:16,090 --> 01:35:17,800
中文字幕
And let's focus on this square.

2150
01:35:17,800 --> 01:35:20,560
中文字幕
So three by three, for instance, because we've not quite

2151
01:35:20,560 --> 01:35:22,160
中文字幕
seen something like this.

2152
01:35:22,160 --> 01:35:24,610
中文字幕
So in our last example here, let's see.

2153
01:35:24,610 --> 01:35:28,330
中文字幕
Could we get maybe a brave volunteer to come on up, tie some of these ideas

2154
01:35:28,330 --> 01:35:30,100
中文字幕
together?

2155
01:35:30,100 --> 01:35:31,350
中文字幕
Is that a hand back there?

2156
01:35:31,350 --> 01:35:33,510
中文字幕
Come on down.

2157
01:35:33,510 --> 01:35:39,390
中文字幕
So this will be Mario3.py, the goal of which is to print a brick,

2158
01:35:39,390 --> 01:35:40,740
中文字幕
a bigger brick--

2159
01:35:40,740 --> 01:35:43,300
中文字幕
it's like 3 by 3-- hello again.

2160
01:35:43,300 --> 01:35:44,180
中文字幕
ANDREA: Hello.

2161
01:35:44,180 --> 01:35:45,120
中文字幕
For the audience, what's your name?

2162
01:35:45,120 --> 01:35:46,050
中文字幕
ANDREA: Andrea.

2163
01:35:46,050 --> 01:35:47,040
中文字幕
Andrea, nice to see you.

2164
01:35:47,040 --> 01:35:47,850
中文字幕
ANDREA: Nice to see you.

2165
01:35:47,850 --> 01:35:49,640
中文字幕
All right, so the goal at hand

2166
01:35:49,640 --> 01:35:52,320
中文字幕
is to print a three by three grid of just

2167
01:35:52,320 --> 01:35:54,990
中文字幕
hashes reminiscent of those bricks.

2168
01:35:54,990 --> 01:35:56,210
中文字幕
All right, you're in charge.

2169
01:35:56,210 --> 01:35:57,630
中文字幕
ANDREA: All right.

2170
01:35:57,630 --> 01:35:59,760
中文字幕
Should I do, like, a loop or something?

2171
01:35:59,760 --> 01:36:01,420
中文字幕
Whatever gets the job done.

2172
01:36:04,750 --> 01:36:07,690
中文字幕
All right, for.

2173
01:36:07,690 --> 01:36:08,190
中文字幕
OK, good.

2174
01:36:15,360 --> 01:36:17,000
中文字幕
OK, interesting.

2175
01:36:23,710 --> 01:36:27,930
中文字幕
OK, print, quote unquote, print, yeah, OK.

2176
01:36:27,930 --> 01:36:28,430
中文字幕
ANDREA: OK.

2177
01:36:28,430 --> 01:36:29,060
中文字幕
Oh, right.

2178
01:36:29,060 --> 01:36:30,060
中文字幕
Key detail.

2179
01:36:30,060 --> 01:36:31,220
中文字幕
ANDREA: What was it, a hash?

2180
01:36:31,220 --> 01:36:32,640
中文字幕
A hash is fine, yeah.

2181
01:36:32,640 --> 01:36:33,510
中文字幕
ANDREA: OK.

2182
01:36:33,510 --> 01:36:34,600
中文字幕
All right.

2183
01:36:34,600 --> 01:36:40,320
中文字幕
And before we do this, does everyone want her to run this program

2184
01:36:40,320 --> 01:36:42,060
中文字幕
and be correct?

2185
01:36:42,060 --> 01:36:42,980
中文字幕
Don't do it.

2186
01:36:42,980 --> 01:36:45,350
中文字幕
No, why?

2187
01:36:45,350 --> 01:36:46,610
中文字幕
Someone who claims no, what?

2188
01:36:46,610 --> 01:36:47,710
中文字幕
What's your concern?

2189
01:36:47,710 --> 01:36:50,890
中文字幕
N equals-- it'll do it 

2190
01:36:50,890 --> 01:36:51,810
中文字幕
Good, OK.

2191
01:36:51,810 --> 01:36:52,590
中文字幕
So you fixed that.

2192
01:36:52,590 --> 01:36:53,160
中文字幕
Good.

2193
01:36:53,160 --> 01:36:55,750
中文字幕
Any other concerns?

2194
01:36:55,750 --> 01:36:57,000
中文字幕
Yeah?

2195
01:37:01,700 --> 01:37:02,370
中文字幕
OK.

2196
01:37:02,370 --> 01:37:03,510
中文字幕
Is it going to go up and down?

2197
01:37:03,510 --> 01:37:03,710
中文字幕
Well, let's see.

2198
01:37:03,710 --> 01:37:05,690
中文字幕
Can you walk us through verbally-- do we have--

2199
01:37:09,460 --> 01:37:12,310
中文字幕
can you walk us through what the program does?

2200
01:37:15,430 --> 01:37:19,250
中文字幕
ANDREA: For i in range 3, so this will happen three times, then j

2201
01:37:19,250 --> 01:37:22,050
中文字幕
in range three, the next thing will also happen three times.

2202
01:37:22,050 --> 01:37:23,400
中文字幕
So we print a hash.

2203
01:37:23,400 --> 01:37:25,370
中文字幕
And then we another hash and another hash

2204
01:37:25,370 --> 01:37:28,930
中文字幕
because the end is the quotation marks.

2205
01:37:28,930 --> 01:37:29,740
中文字幕
OK.

2206
01:37:29,740 --> 01:37:35,480
中文字幕
ANDREA: And then that happens and then we print a new line.

2207
01:37:35,480 --> 01:37:38,350
中文字幕
And then it should execute that three times.

2208
01:37:38,350 --> 01:37:39,310
中文字幕
All right.

2209
01:37:39,310 --> 01:37:40,060
中文字幕
What do you think?

2210
01:37:40,060 --> 01:37:42,210
中文字幕
Do you-- the duck is convinced.

2211
01:37:42,210 --> 01:37:44,380
中文字幕
All right, why don't you go ahead and save the file.

2212
01:37:44,380 --> 01:37:45,160
中文字幕
Let's try.

2213
01:37:45,160 --> 01:37:48,130
中文字幕
No harm in trying, so right or wrong, let's see.

2214
01:37:48,130 --> 01:37:53,740
中文字幕
This is called Mario3.py, and I think we have round of applause if we could.

2215
01:37:53,740 --> 01:37:55,770
中文字幕
Very nicely done.

2216
01:37:55,770 --> 01:37:56,560
中文字幕
All right.

2217
01:37:56,560 --> 01:37:58,460
中文字幕
So let's-- and if you'd like one more.

2218
01:37:58,460 --> 01:38:00,670
中文字幕
So let's take a look at one final example,

2219
01:38:00,670 --> 01:38:02,890
中文字幕
coming full circle from where we began.

2220
01:38:02,890 --> 01:38:04,330
中文字幕
We of course looked at resize.

2221
01:38:04,330 --> 01:38:09,340
中文字幕
And let's open that up, just to see how I got away with writing so little code

2222
01:38:09,340 --> 01:38:11,350
中文字幕
and actually getting that job done.

2223
01:38:11,350 --> 01:38:14,110
中文字幕
So in resize.py, which is where we began,

2224
01:38:14,110 --> 01:38:17,200
中文字幕
notice that I had a few lines that hopefully look a little more familiar

2225
01:38:17,200 --> 01:38:17,700
中文字幕
now.

2226
01:38:17,700 --> 01:38:21,520
中文字幕
But we didn't exactly introduce all of these features ourselves.

2227
01:38:21,520 --> 01:38:24,850
中文字幕
So it turns out in line one and line two we have

2228
01:38:24,850 --> 01:38:26,500
中文字幕
one unfamiliar and one familiar line.

2229
01:38:26,500 --> 01:38:29,170
中文字幕
Line two just gives us access to a command line arguments, which

2230
01:38:29,170 --> 01:38:30,910
中文字幕
we needed for resizing the bitmap.

2231
01:38:30,910 --> 01:38:34,070
中文字幕
Line one is where a lot of the power is coming from.

2232
01:38:34,070 --> 01:38:36,720
中文字幕
It turns out there's a library in Python called pillow

2233
01:38:36,720 --> 01:38:39,470
中文字幕
that you can install by typing a certain command at your terminal.

2234
01:38:39,470 --> 01:38:41,430
中文字幕
It doesn't necessarily come with your Mac or PC.

2235
01:38:41,430 --> 01:38:43,670
中文字幕
You have to download it and install it with a command.

2236
01:38:43,670 --> 01:38:45,640
中文字幕
And then if you read its documentation, it

2237
01:38:45,640 --> 01:38:48,640
中文字幕
will say, from pill for pillow import image.

2238
01:38:48,640 --> 01:38:50,200
中文字幕
Now, that's not a specific image.

2239
01:38:50,200 --> 01:38:52,870
中文字幕
That's the name of a library called the image

2240
01:38:52,870 --> 01:38:56,740
中文字幕
library that comes with that software that someone freely made available.

2241
01:38:56,740 --> 01:39:00,420
中文字幕
So that's just saying, give me access to an image-related library.

2242
01:39:00,420 --> 01:39:03,970
中文字幕
And undoubtedly, there could exist similar things in C. But we of course

2243
01:39:03,970 --> 01:39:06,190
中文字幕
did things very hands-on low-level.

2244
01:39:06,190 --> 01:39:10,150
中文字幕
All right, if the length of argv is not 4, yell at the user with the usage.

2245
01:39:10,150 --> 01:39:13,480
中文字幕
And that's just if they don't cooperate by typing in as they should, this.

2246
01:39:13,480 --> 01:39:15,960
中文字幕
It's a little more verbose now because we have Python

2247
01:39:15,960 --> 01:39:17,260
中文字幕
and we have the file extension.

2248
01:39:17,260 --> 01:39:19,930
中文字幕
But we could technically clean that up if we really wanted.

2249
01:39:19,930 --> 01:39:23,290
中文字幕
Lines 7, 8, and 9, there's nothing really new there.

2250
01:39:23,290 --> 01:39:26,230
中文字幕
I'm just declaring three variables implicitly typed.

2251
01:39:26,230 --> 01:39:28,510
中文字幕
I don't have to bother saying int or string.

2252
01:39:28,510 --> 01:39:33,320
中文字幕
I'm accessing argv 1, 2, and 3, which is 1, 2, and 3.

2253
01:39:33,320 --> 01:39:35,920
中文字幕
And then I'm doing one thing line 7.

2254
01:39:35,920 --> 01:39:39,710
中文字幕
What is line 7 doing that's important?

2255
01:39:41,140 --> 01:39:43,770
中文字幕
I'm changing the argument from what is technically

2256
01:39:43,770 --> 01:39:46,520
中文字幕
a string by default-- because indeed, it came from the human hands

2257
01:39:46,520 --> 01:39:49,110
中文字幕
at a keyboard-- and converting it into a number.

2258
01:39:49,110 --> 01:39:53,250
中文字幕
Now, as an aside, if the user does not provide a number like 2 or 10,

2259
01:39:53,250 --> 01:39:54,300
中文字幕
this code could break.

2260
01:39:54,300 --> 01:39:56,460
中文字幕
To be fair, I should really have some error checking

2261
01:39:56,460 --> 01:40:00,630
中文字幕
to make sure if the user typed in hello and not 2 or 10,

2262
01:40:00,630 --> 01:40:01,780
中文字幕
I need to catch that error.

2263
01:40:01,780 --> 01:40:02,980
中文字幕
So I'm being a little sloppy.

2264
01:40:02,980 --> 01:40:06,130
中文字幕
But it was really meant to demonstrate succinct code.

2265
01:40:06,130 --> 01:40:09,730
中文字幕
So now we have infile and outfile defined exactly as before.

2266
01:40:09,730 --> 01:40:13,040
中文字幕
So we have just three lines left that actually implement most of the magic.

2267
01:40:13,040 --> 01:40:14,710
中文字幕
Yeah.

2268
01:40:22,650 --> 01:40:24,440
中文字幕
Wait, say the last part again.

2269
01:40:26,600 --> 01:40:28,550
中文字幕
Yes.

2270
01:40:28,550 --> 01:40:33,430
中文字幕
There was almost 

2271
01:40:33,430 --> 01:40:34,680
中文字幕
Good observation.

2272
01:40:34,680 --> 01:40:38,700
中文字幕
So this is not just converting the user's input to the equivalent ASCII

2273
01:40:38,700 --> 01:40:40,800
中文字幕
value because that's not what we want.

2274
01:40:40,800 --> 01:40:44,400
中文字幕
This int used here is actually converting it

2275
01:40:44,400 --> 01:40:48,420
中文字幕
as via a2i, a function that you've probably used a couple of weeks ago,

2276
01:40:48,420 --> 01:40:50,460
中文字幕
it's just named a little more succinctly.

2277
01:40:50,460 --> 01:40:53,940
中文字幕
There is a function via which you could convert a character or a string

2278
01:40:53,940 --> 01:40:55,200
中文字幕
to its ASCII equivalent.

2279
01:40:55,200 --> 01:40:56,700
中文字幕
But that's not what's going on here.

2280
01:40:56,700 --> 01:40:59,190
中文字幕
It does the more intuitive turn this into an integer

2281
01:40:59,190 --> 01:41:01,810
中文字幕
without using a cryptically named function like a2i.

2282
01:41:01,810 --> 01:41:04,560
中文字幕
So let's scroll down just a little further to these last few lines

2283
01:41:04,560 --> 01:41:05,770
中文字幕
and see what's going on.

2284
01:41:05,770 --> 01:41:08,220
中文字幕
Some of them you would only know how to do from having

2285
01:41:08,220 --> 01:41:09,870
中文字幕
read the documentation just as we did.

2286
01:41:09,870 --> 01:41:11,760
中文字幕
This says give me a variable called in image.

2287
01:41:11,760 --> 01:41:13,010
中文字幕
Could have called it anything.

2288
01:41:13,010 --> 01:41:14,940
中文字幕
I'm just trying to be consistent with in file.

2289
01:41:14,940 --> 01:41:17,100
中文字幕
This says, use the image library.

2290
01:41:17,100 --> 01:41:19,140
中文字幕
Use its open function that comes with it.

2291
01:41:19,140 --> 01:41:21,780
中文字幕
So image is some kind of structure, inside of which

2292
01:41:21,780 --> 01:41:23,730
中文字幕
is some useful image-related functionality.

2293
01:41:23,730 --> 01:41:26,860
中文字幕
So call its open function on the name of the file,

2294
01:41:26,860 --> 01:41:29,250
中文字幕
then go ahead and extract its height and width.

2295
01:41:29,250 --> 01:41:32,100
中文字幕
So turns out this is another tuple, if you will.

2296
01:41:32,100 --> 01:41:35,110
中文字幕
Tuples, again, are like x comma y, latitude comma longitude.

2297
01:41:35,110 --> 01:41:37,560
中文字幕
You'd only know that it is a tuple from the documentation.

2298
01:41:37,560 --> 01:41:42,150
中文字幕
So when I say width comma height, this is taking what's technically a list

2299
01:41:42,150 --> 01:41:43,670
中文字幕
of size two-- or really, a tuple--

2300
01:41:43,670 --> 01:41:46,050
中文字幕
and it's just extracting for me the width and the height.

2301
01:41:46,050 --> 01:41:48,360
中文字幕
But let me wave my hands at that particular syntax.

2302
01:41:48,360 --> 01:41:50,070
中文字幕
The rest of this just says the following.

2303
01:41:50,070 --> 01:41:52,450
中文字幕
Give me a new variable called out image.

2304
01:41:52,450 --> 01:41:56,250
中文字幕
Call the input image's resize function, another piece of functionality

2305
01:41:56,250 --> 01:41:59,610
中文字幕
built into it, just like open, and change it

2306
01:41:59,610 --> 01:42:03,750
中文字幕
by this width and this height-- the original width times n,

2307
01:42:03,750 --> 01:42:05,520
中文字幕
the original height times n.

2308
01:42:05,520 --> 01:42:08,850
中文字幕
No padding manipulation, that's all the responsibility of the library.

2309
01:42:08,850 --> 01:42:11,160
中文字幕
Some other human dealt with all of that for us.

2310
01:42:11,160 --> 01:42:13,290
中文字幕
And this last line, perhaps not surprisingly,

2311
01:42:13,290 --> 01:42:16,660
中文字幕
saves the output image to that file name.

2312
01:42:16,660 --> 01:42:18,860
中文字幕
So in just, what, 15 lines of code and fewer

2313
01:42:18,860 --> 01:42:20,820
中文字幕
if we get rid of some of the whitespace can you

2314
01:42:20,820 --> 01:42:22,410
中文字幕
implement the entirety of resize.

2315
01:42:22,410 --> 01:42:24,490
中文字幕
But really focusing on the logic of the problem,

2316
01:42:24,490 --> 01:42:26,130
中文字幕
I want to take an input from the user.

2317
01:42:26,130 --> 01:42:27,600
中文字幕
I want to scale it up by a factor of n.

2318
01:42:27,600 --> 01:42:28,740
中文字幕
And I want to save out the file.

2319
01:42:28,740 --> 01:42:30,040
中文字幕
That's what you care about.

2320
01:42:30,040 --> 01:42:33,270
中文字幕
You don't necessarily care about getting into the weeds of exactly what it

2321
01:42:33,270 --> 01:42:36,870
中文字幕
was you had to do when you did it in C.

2322
01:42:36,870 --> 01:42:39,300
中文字幕
So let's do one final example here.

2323
01:42:39,300 --> 01:42:42,780
中文字幕
You'll recall from problem set four you implemented your own spell checker.

2324
01:42:42,780 --> 01:42:45,790
中文字幕
And odds are you did a try or a hash table or the like.

2325
01:42:45,790 --> 01:42:48,120
中文字幕
And it turns out that is non-trivial, certainly in C.

2326
01:42:48,120 --> 01:42:51,100
中文字幕
And it's non-trivial certainly for the first time in any language.

2327
01:42:51,100 --> 01:42:53,880
中文字幕
But let me take a stab at doing this now in Python.

2328
01:42:53,880 --> 01:42:57,330
中文字幕
Let me go into source 6 where I have a speller example.

2329
01:42:57,330 --> 01:43:00,840
中文字幕
And notice that in this folder today I've brought a few files with me.

2330
01:43:00,840 --> 01:43:03,030
中文字幕
So I've brought a copy of the dictionaries

2331
01:43:03,030 --> 01:43:06,750
中文字幕
from p set four, a copy of the text files, like la-la land and the like

2332
01:43:06,750 --> 01:43:07,690
中文字幕
in text.

2333
01:43:07,690 --> 01:43:11,280
中文字幕
And then I brought two files-- dictionary.py and speller.py--

2334
01:43:11,280 --> 01:43:14,940
中文字幕
the latter of which is an implementation of speller.c in Python.

2335
01:43:14,940 --> 01:43:17,940
中文字幕
And I'm not going to pull that one up because we wrote that one entirely

2336
01:43:17,940 --> 01:43:18,600
中文字幕
for you.

2337
01:43:18,600 --> 01:43:22,770
中文字幕
But let me go ahead and write, for instance, just my own dictionary.

2338
01:43:22,770 --> 01:43:28,680
中文字幕
So dictionary.py is the analog of dictionary.c.

2339
01:43:28,680 --> 01:43:31,100
中文字幕
And let's go ahead and set this up.

2340
01:43:31,100 --> 01:43:33,480
中文字幕
Let me go ahead and create this file in a separate folder

2341
01:43:33,480 --> 01:43:36,150
中文字幕
for now, so dictionary.py.

2342
01:43:36,150 --> 01:43:38,180
中文字幕
And there's a few functions in dictionary.c

2343
01:43:38,180 --> 01:43:40,350
中文字幕
which we should probably get around to implementing.

2344
01:43:40,350 --> 01:43:41,770
中文字幕
What are those functions?

2345
01:43:41,770 --> 01:43:43,380
中文字幕
Load.

2346
01:43:43,380 --> 01:43:45,090
中文字幕
Load was one, and load takes

2347
01:43:45,090 --> 01:43:46,990
中文字幕
the name of a file or a dictionary.

2348
01:43:46,990 --> 01:43:47,850
中文字幕
So let's do this.

2349
01:43:47,850 --> 01:43:48,930
中文字幕
And I'll just say to do.

2350
01:43:48,930 --> 01:43:49,680
中文字幕
Come back to that.

2351
01:43:49,680 --> 01:43:52,020
中文字幕
What other functions were in dictionary.c?

2352
01:43:52,020 --> 01:43:53,580
中文字幕
Check, so def check.

2353
01:43:53,580 --> 01:43:56,280
中文字幕
And what did check take as an input?

2354
01:43:56,280 --> 01:43:56,820
中文字幕
A word, yep.

2355
01:43:56,820 --> 01:43:59,320
中文字幕
So we'll come back to this and just come back to that to do.

2356
01:43:59,320 --> 01:44:00,520
中文字幕
What other functions?

2357
01:44:00,520 --> 01:44:01,370
中文字幕
Size.

2358
01:44:01,370 --> 01:44:04,200
中文字幕
Size was one, so def size.

2359
01:44:04,200 --> 01:44:07,200
中文字幕
This did not take input, but it just returned the size of the structure.

2360
01:44:07,200 --> 01:44:07,950
中文字幕
So we'll come back to that.

2361
01:44:07,950 --> 01:44:08,710
中文字幕
And lastly?

2362
01:44:08,710 --> 01:44:09,420
中文字幕
Unload.

2363
01:44:09,420 --> 01:44:10,540
中文字幕
OK, so unload.

2364
01:44:10,540 --> 01:44:13,310
中文字幕
All right, so this is the Python version of the distribution code

2365
01:44:13,310 --> 01:44:15,170
中文字幕
for speller for your dictionary file.

2366
01:44:15,170 --> 01:44:17,670
中文字幕
So unload also didn't take an argument.

2367
01:44:17,670 --> 01:44:19,820
中文字幕
So that's something for us to do, too.

2368
01:44:19,820 --> 01:44:22,400
中文字幕
So what's the gist of making a spell checker?

2369
01:44:22,400 --> 01:44:25,730
中文字幕
You are loading words in your load function from a dictionary file.

2370
01:44:25,730 --> 01:44:27,980
中文字幕
And the goal is to load those somehow into memory.

2371
01:44:27,980 --> 01:44:30,950
中文字幕
You had a design decision for the p set in C,

2372
01:44:30,950 --> 01:44:32,840
中文字幕
where you could make a hash table or a try

2373
01:44:32,840 --> 01:44:34,790
中文字幕
or even a linked list or even an array.

2374
01:44:34,790 --> 01:44:37,580
中文字幕
But odds are the first of those two were probably more efficient.

2375
01:44:37,580 --> 01:44:40,550
中文字幕
So it turns out that in Python, you have the ability

2376
01:44:40,550 --> 01:44:43,640
中文字幕
to store words pretty readily in any number of data structures.

2377
01:44:43,640 --> 01:44:46,640
中文字幕
You have not just ints and floats and strings,

2378
01:44:46,640 --> 01:44:49,250
中文字幕
but you clearly have lists, as we've seen.

2379
01:44:49,250 --> 01:44:52,510
中文字幕
We call them objects or hashes, hash tables.

2380
01:44:52,510 --> 01:44:54,260
中文字幕
And there's other things, too, even called

2381
01:44:54,260 --> 01:44:57,650
中文字幕
sets, where a set is kind of just a collection of words

2382
01:44:57,650 --> 01:45:00,350
中文字幕
which would be very nicely searchable.

2383
01:45:00,350 --> 01:45:01,240
中文字幕
And so you know what?

2384
01:45:01,240 --> 01:45:03,080
中文字幕
If I want to ultimately load some words, let

2385
01:45:03,080 --> 01:45:05,600
中文字幕
me give myself a global variable called words

2386
01:45:05,600 --> 01:45:08,250
中文字幕
and just initialize it to an empty set.

2387
01:45:08,250 --> 01:45:11,330
中文字幕
So I have a global variable called words and nothing is in it just yet.

2388
01:45:11,330 --> 01:45:13,160
中文字幕
But it's a set of words.

2389
01:45:13,160 --> 01:45:15,660
中文字幕
How do I go about loading words into that dictionary?

2390
01:45:15,660 --> 01:45:17,540
中文字幕
Well, let's go ahead and implement load here.

2391
01:45:17,540 --> 01:45:20,240
中文字幕
So let me go ahead and declare a variable called file and open

2392
01:45:20,240 --> 01:45:24,230
中文字幕
this dictionary in read mode, just as in C.

2393
01:45:24,230 --> 01:45:26,540
中文字幕
And then how do I integrate over the lines in a file?

2394
01:45:26,540 --> 01:45:27,510
中文字幕
We've not seen that.

2395
01:45:27,510 --> 01:45:30,530
中文字幕
But I do know how to iterate over the strings in an array

2396
01:45:30,530 --> 01:45:31,840
中文字幕
and the characters in a string.

2397
01:45:31,840 --> 01:45:35,720
中文字幕
So let me go with my instinct for line in file.

2398
01:45:35,720 --> 01:45:38,240
中文字幕
Indeed, this will do exactly what you want it to do.

2399
01:45:38,240 --> 01:45:44,750
中文字幕
Then let me go ahead and add to my words data structure the following line.

2400
01:45:44,750 --> 01:45:46,960
中文字幕
And then let me close the file.

2401
01:45:46,960 --> 01:45:49,340
中文字幕
And then let me just say return true because all is well.

2402
01:45:49,340 --> 01:45:50,780
中文字幕
Done.

2403
01:45:50,780 --> 01:45:53,690
中文字幕
All right, so I'm cutting a few corners, technically.

2404
01:45:53,690 --> 01:45:55,670
中文字幕
Let me use that function I alluded to earlier.

2405
01:45:55,670 --> 01:45:58,580
中文字幕
Let me go ahead and call r strip and strip off

2406
01:45:58,580 --> 01:46:00,500
中文字幕
the new line because in the file, technically,

2407
01:46:00,500 --> 01:46:03,460
中文字幕
when you're reading in those words, every line ends with a backslash zero.

2408
01:46:03,460 --> 01:46:04,620
中文字幕
That's now part of the word.

2409
01:46:04,620 --> 01:46:07,120
中文字幕
So a minor correction there that I'm stripping off the line.

2410
01:46:07,120 --> 01:46:08,210
中文字幕
But that's it for load.

2411
01:46:08,210 --> 01:46:13,040
中文字幕
How do I now check if a given word is in that set?

2412
01:46:13,040 --> 01:46:18,510
中文字幕
Well, I can just say, if word in words return true.

2413
01:46:18,510 --> 01:46:21,120
中文字幕
Else, return false.

2414
01:46:21,120 --> 01:46:22,950
中文字幕
Done with check.

2415
01:46:22,950 --> 01:46:26,590
中文字幕
How do I return the size of this data structure?

2416
01:46:26,590 --> 01:46:30,450
中文字幕
How about I just return the length of that structure, words, and then

2417
01:46:30,450 --> 01:46:30,990
中文字幕
unload--

2418
01:46:30,990 --> 01:46:33,080
中文字幕
heck, Python's doing this all for me--

2419
01:46:33,080 --> 01:46:35,810
中文字幕
done.

2420
01:46:35,810 --> 01:46:37,120
中文字幕
Let me shrink this.

2421
01:46:37,120 --> 01:46:37,870
中文字幕
And you know what?

2422
01:46:37,870 --> 01:46:39,010
中文字幕
This is a little verbose.

2423
01:46:39,010 --> 01:46:40,720
中文字幕
I don't actually need to do this if else.

2424
01:46:40,720 --> 01:46:44,690
中文字幕
I could just return word in words and that will return a Boolean for me.

2425
01:46:44,690 --> 01:46:46,940
中文字幕
And honestly, if I want to lower case it, that's easy.

2426
01:46:46,940 --> 01:46:48,640
中文字幕
I can just do this and take care of that.

2427
01:46:48,640 --> 01:46:49,980
中文字幕
Now it's even better.

2428
01:46:49,980 --> 01:46:51,410
中文字幕
That's p set 4.

2429
01:46:54,760 --> 01:46:56,440
中文字幕
Excited?

2430
01:46:56,440 --> 01:46:57,790
中文字幕
Wish we had done this in C?

2431
01:46:57,790 --> 01:46:59,830
中文字幕
So what is the whole point of all of this,

2432
01:46:59,830 --> 01:47:03,760
中文字幕
because the goal wasn't to create sort of great angst and wonder now.

2433
01:47:03,760 --> 01:47:07,210
中文字幕
But the whole point of having introduced C over these past few weeks is to,

2434
01:47:07,210 --> 01:47:09,330
中文字幕
one, none of this now do you take for granted.

2435
01:47:09,330 --> 01:47:12,130
中文字幕
I mean, you might be longing for having implemented this in Python.

2436
01:47:12,130 --> 01:47:13,840
中文字幕
And you might have had to read some documentation

2437
01:47:13,840 --> 01:47:15,310
中文字幕
and figure out the various syntax.

2438
01:47:15,310 --> 01:47:16,660
中文字幕
But my God.

2439
01:47:16,660 --> 01:47:20,080
中文字幕
We whittled down what probably took most of you hours into just seconds

2440
01:47:20,080 --> 01:47:22,040
中文字幕
once you're more comfortable with the language.

2441
01:47:22,040 --> 01:47:23,950
中文字幕
But also, to our very earliest point today,

2442
01:47:23,950 --> 01:47:27,350
中文字幕
once you have the right language and the right tool for the job.

2443
01:47:27,350 --> 01:47:30,200
中文字幕
Now, it's not to say that this is perfect, because in fact,

2444
01:47:30,200 --> 01:47:31,690
中文字幕
let's go ahead and do some tests.

2445
01:47:31,690 --> 01:47:34,360
中文字幕
Let me go into my terminal window here.

2446
01:47:34,360 --> 01:47:38,320
中文字幕
And I actually brought my own solution in my C folder here.

2447
01:47:38,320 --> 01:47:38,980
中文字幕
Let's see.

2448
01:47:38,980 --> 01:47:43,850
中文字幕
I have my own code to speller implemented in C here.

2449
01:47:43,850 --> 01:47:45,310
中文字幕
And let me go ahead and run a test.

2450
01:47:45,310 --> 01:47:49,120
中文字幕
Let me go ahead and run speller on, say, the text Shakespeare.

2451
01:47:49,120 --> 01:47:50,230
中文字幕
That's a pretty big input.

2452
01:47:50,230 --> 01:47:51,670
中文字幕
Let's go ahead and hit Enter.

2453
01:47:51,670 --> 01:47:53,230
中文字幕
And this is my spell checker running.

2454
01:47:53,230 --> 01:47:54,600
中文字幕
And all the words are outputting.

2455
01:47:54,600 --> 01:47:58,780
中文字幕
And the time total to run speller in C was, say, 0.9 seconds.

2456
01:47:58,780 --> 01:48:00,210
中文字幕
So that's actually pretty good.

2457
01:48:00,210 --> 01:48:03,910
中文字幕
In a second window, let me go up here in another terminal window.

2458
01:48:03,910 --> 01:48:08,890
中文字幕
And let me go into today's code and into the speller folder where I have

2459
01:48:08,890 --> 01:48:12,640
中文字幕
a Python version that I'm going to run as follows-- speller.py--

2460
01:48:12,640 --> 01:48:15,250
中文字幕
let me go ahead and run it on Shakespeare.

2461
01:48:15,250 --> 01:48:16,970
中文字幕
So we've not looked at speller.py.

2462
01:48:16,970 --> 01:48:20,670
中文字幕
But it is essentially line for line a port, a translation, from C to Python.

2463
01:48:20,670 --> 01:48:22,420
中文字幕
But you're welcome to look at that online.

2464
01:48:22,420 --> 01:48:25,670
中文字幕
And it's using my dictionary.py file.

2465
01:48:25,670 --> 01:48:27,040
中文字幕
Let me go ahead and run that.

2466
01:48:27,040 --> 01:48:28,780
中文字幕
It's running through all the words.

2467
01:48:28,780 --> 01:48:33,230
中文字幕
Top is Python, bottom is C. Here we go.

2468
01:48:33,230 --> 01:48:38,700
中文字幕
Here we go.

2469
01:48:38,700 --> 01:48:41,580
中文字幕
Now, this is a bit misleading because again, the internet is the way.

2470
01:48:41,580 --> 01:48:46,020
中文字幕
We're using a web-based IDE, and so it's funny that that appears so many times.

2471
01:48:46,020 --> 01:48:48,720
中文字幕
And you'll see it's not 10, 20 seconds, however long that was.

2472
01:48:48,720 --> 01:48:50,310
中文字幕
That was just the internet being slow.

2473
01:48:50,310 --> 01:48:53,190
中文字幕
And all we're timing is your functions in both C and Python.

2474
01:48:53,190 --> 01:48:55,950
中文字幕
But what's the takeaway between Python and C?

2475
01:48:58,880 --> 01:49:01,820
中文字幕
Same inputs.

2476
01:49:01,820 --> 01:49:02,490
中文字幕
What do you see?

2477
01:49:02,490 --> 01:49:03,690
中文字幕
Yeah?

2478
01:49:03,690 --> 01:49:05,490
中文字幕
Be more concise .

2479
01:49:05,490 --> 01:49:07,240
中文字幕
Yeah, I wouldn't say concise.

2480
01:49:07,240 --> 01:49:08,200
中文字幕
That's more aesthetic.

2481
01:49:08,200 --> 01:49:09,280
中文字幕
It's more--

2482
01:49:09,280 --> 01:49:10,850
中文字幕
Specific .

2483
01:49:10,850 --> 01:49:12,600
中文字幕
Well, not even that, I think.

2484
01:49:12,600 --> 01:49:13,470
中文字幕
These are correct.

2485
01:49:13,470 --> 01:49:14,520
中文字幕
Both of them are correct.

2486
01:49:14,520 --> 01:49:18,030
中文字幕
All the important numbers at the top are identical.

2487
01:49:18,030 --> 01:49:21,680
中文字幕
But what is clearly different, though?

2488
01:49:21,680 --> 01:49:22,760
中文字幕
It's slower.

2489
01:49:22,760 --> 01:49:24,710
中文字幕
So Python seems to be slower, right?

2490
01:49:24,710 --> 01:49:27,150
中文字幕
It takes in total-- if we just look at two numbers--

2491
01:49:27,150 --> 01:49:30,230
中文字幕
1.55 seconds in Python, if you ignore the internet speed

2492
01:49:30,230 --> 01:49:32,820
中文字幕
and just look at the code performance, versus 0.9.

2493
01:49:32,820 --> 01:49:37,970
中文字幕
So it's almost twice as slow as C. So what's the takeaway there?

2494
01:49:37,970 --> 01:49:42,180
中文字幕
Well, yes, it took me, what, 10, 20, 30 seconds to write the code.

2495
01:49:42,180 --> 01:49:44,080
中文字幕
But it's taking me twice as long to run it.

2496
01:49:44,080 --> 01:49:45,320
中文字幕
Now, not a big deal, of course, when we're

2497
01:49:45,320 --> 01:49:46,900
中文字幕
talking a few seconds here and there.

2498
01:49:46,900 --> 01:49:49,820
中文字幕
But if this were a big data set that you're analyzing for some project

2499
01:49:49,820 --> 01:49:54,580
中文字幕
or for work or for any kind of analysis project and the data is much larger

2500
01:49:54,580 --> 01:49:57,170
中文字幕
than even this-- especially in the medical field or the like--

2501
01:49:57,170 --> 01:49:58,620
中文字幕
maybe you don't want to use Python.

2502
01:49:58,620 --> 01:50:01,980
中文字幕
Sure, you can bang out the code in just a few minutes, maybe a few hours.

2503
01:50:01,980 --> 01:50:05,900
中文字幕
But once you run it, damn, it's slower than using something like C.

2504
01:50:05,900 --> 01:50:08,210
中文字幕
Whereas in C, might take you more time upfront.

2505
01:50:08,210 --> 01:50:10,130
中文字幕
And you might not even have the comfort with C

2506
01:50:10,130 --> 01:50:12,620
中文字幕
anymore so it's going to take an even longer because you have to go relearn

2507
01:50:12,620 --> 01:50:13,400
中文字幕
the language.

2508
01:50:13,400 --> 01:50:16,250
中文字幕
But when you run it, wow, it runs twice as fast.

2509
01:50:16,250 --> 01:50:18,110
中文字幕
You therefore need less RAM, potentially,

2510
01:50:18,110 --> 01:50:21,530
中文字幕
less hardware or less expensive hardware because you can get away with more.

2511
01:50:21,530 --> 01:50:24,560
中文字幕
So again, this theme we keep seeing in data structures and algorithms

2512
01:50:24,560 --> 01:50:25,340
中文字幕
is trade-offs.

2513
01:50:25,340 --> 01:50:28,760
中文字幕
Like, developer time is a resource and it is wonderful that I

2514
01:50:28,760 --> 01:50:31,520
中文字幕
and now you would be able to write code so much more quickly.

2515
01:50:31,520 --> 01:50:33,420
中文字幕
But you do have to pay a price somewhere.

2516
01:50:33,420 --> 01:50:35,090
中文字幕
And there's clearly a price with Python.

2517
01:50:35,090 --> 01:50:37,610
中文字幕
And it's not because Python is poorly implemented.

2518
01:50:37,610 --> 01:50:40,490
中文字幕
But what is the fundamental difference between the paradigm

2519
01:50:40,490 --> 01:50:44,860
中文字幕
of programming in C versus in Python as we've seen it today?

2520
01:50:44,860 --> 01:50:45,570
中文字幕
What's different?

2521
01:50:45,570 --> 01:50:46,320
中文字幕
Yeah?

2522
01:50:46,320 --> 01:50:52,810
中文字幕
 line by line, whereas C, it essentially--

2523
01:50:52,810 --> 01:50:57,030
中文字幕
 optimize running it, it will run ..

2524
01:50:57,030 --> 01:50:57,870
中文字幕
Indeed.

2525
01:50:57,870 --> 01:50:58,550
中文字幕
And let me flip it around.

2526
01:50:58,550 --> 01:51:00,760
中文字幕
So with C, you're compiling down to zeros and ones.

2527
01:51:00,760 --> 01:51:02,270
中文字幕
And that compiler is super smart.

2528
01:51:02,270 --> 01:51:03,710
中文字幕
And it's going to move things around in memory.

2529
01:51:03,710 --> 01:51:06,540
中文字幕
It's going to talk the computer's native language of zeros and ones.

2530
01:51:06,540 --> 01:51:10,470
中文字幕
Python is, indeed, reading your code, by contrast, line by line, top to bottom,

2531
01:51:10,470 --> 01:51:11,060
中文字幕
left to right.

2532
01:51:11,060 --> 01:51:14,220
中文字幕
And even though technically underneath the hood there is a compilation step,

2533
01:51:14,220 --> 01:51:16,390
中文字幕
there is nonetheless some overhead involved.

2534
01:51:16,390 --> 01:51:18,860
中文字幕
The mere fact that we're no longer running clang and then

2535
01:51:18,860 --> 01:51:22,520
中文字幕
getting 0's and 1's or running make and getting zeros and ones, that's great.

2536
01:51:22,520 --> 01:51:24,180
中文字幕
But we have to pay the price somewhere.

2537
01:51:24,180 --> 01:51:25,520
中文字幕
So this is going to be thematic.

2538
01:51:25,520 --> 01:51:28,520
中文字幕
Like, there is no holy grail among languages or tools or techniques.

2539
01:51:28,520 --> 01:51:31,340
中文字幕
There's going to be trade-offs among your comfort, your familiarity

2540
01:51:31,340 --> 01:51:33,990
中文字幕
or recollection of a language, how easy it is to use,

2541
01:51:33,990 --> 01:51:37,730
中文字幕
how succinctly you can type it, and then how efficiently you can actually

2542
01:51:37,730 --> 01:51:39,050
中文字幕
run it on the screen.

2543
01:51:39,050 --> 01:51:42,560
中文字幕
And with C, hopefully now-- we will not write any more C-code--

2544
01:51:42,560 --> 01:51:45,950
中文字幕
you have an appreciation in Python of when you create a hash--

2545
01:51:45,950 --> 01:51:47,450
中文字幕
or a list, rather--

2546
01:51:47,450 --> 01:51:50,840
中文字幕
or if you create a set or a hash table or the like, what you're really

2547
01:51:50,840 --> 01:51:53,650
中文字幕
getting access to is someone else's implementation of p

2548
01:51:53,650 --> 01:51:57,450
中文字幕
set four and p set three and p set two and p set one, in some form,

2549
01:51:57,450 --> 01:52:01,310
中文字幕
but now exposed to you in a more powerful and more modern language.

2550
01:52:01,310 --> 01:52:02,810
中文字幕
So let's end there officially today.

2551
01:52:02,810 --> 01:52:07,290
中文字幕
And next week, we'll do the same thing, but in the context of web programming.

